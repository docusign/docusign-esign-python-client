# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TemplateSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied': 'str',
        'document_id': 'str',
        'document_name': 'str',
        'name': 'str',
        'template_id': 'str',
        'template_match': 'TemplateMatch',
        'uri': 'str'
    }

    attribute_map = {
        'applied': 'applied',
        'document_id': 'documentId',
        'document_name': 'documentName',
        'name': 'name',
        'template_id': 'templateId',
        'template_match': 'templateMatch',
        'uri': 'uri'
    }

    def __init__(self, applied=None, document_id=None, document_name=None, name=None, template_id=None, template_match=None, uri=None):  # noqa: E501
        """TemplateSummary - a model defined in Swagger"""  # noqa: E501

        self._applied = None
        self._document_id = None
        self._document_name = None
        self._name = None
        self._template_id = None
        self._template_match = None
        self._uri = None
        self.discriminator = None

        if applied is not None:
            self.applied = applied
        if document_id is not None:
            self.document_id = document_id
        if document_name is not None:
            self.document_name = document_name
        if name is not None:
            self.name = name
        if template_id is not None:
            self.template_id = template_id
        if template_match is not None:
            self.template_match = template_match
        if uri is not None:
            self.uri = uri

    @property
    def applied(self):
        """Gets the applied of this TemplateSummary.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The applied of this TemplateSummary.  # noqa: E501
        :rtype: str
        """
        return self._applied

    @applied.setter
    def applied(self, applied):
        """Sets the applied of this TemplateSummary.

        Reserved: TBD  # noqa: E501

        :param applied: The applied of this TemplateSummary.  # noqa: E501
        :type: str
        """

        self._applied = applied

    @property
    def document_id(self):
        """Gets the document_id of this TemplateSummary.  # noqa: E501

        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.  # noqa: E501

        :return: The document_id of this TemplateSummary.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this TemplateSummary.

        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.  # noqa: E501

        :param document_id: The document_id of this TemplateSummary.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def document_name(self):
        """Gets the document_name of this TemplateSummary.  # noqa: E501

          # noqa: E501

        :return: The document_name of this TemplateSummary.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this TemplateSummary.

          # noqa: E501

        :param document_name: The document_name of this TemplateSummary.  # noqa: E501
        :type: str
        """

        self._document_name = document_name

    @property
    def name(self):
        """Gets the name of this TemplateSummary.  # noqa: E501

          # noqa: E501

        :return: The name of this TemplateSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateSummary.

          # noqa: E501

        :param name: The name of this TemplateSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def template_id(self):
        """Gets the template_id of this TemplateSummary.  # noqa: E501

        The unique identifier of the template. If this is not provided, DocuSign will generate a value.   # noqa: E501

        :return: The template_id of this TemplateSummary.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this TemplateSummary.

        The unique identifier of the template. If this is not provided, DocuSign will generate a value.   # noqa: E501

        :param template_id: The template_id of this TemplateSummary.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def template_match(self):
        """Gets the template_match of this TemplateSummary.  # noqa: E501


        :return: The template_match of this TemplateSummary.  # noqa: E501
        :rtype: TemplateMatch
        """
        return self._template_match

    @template_match.setter
    def template_match(self, template_match):
        """Sets the template_match of this TemplateSummary.


        :param template_match: The template_match of this TemplateSummary.  # noqa: E501
        :type: TemplateMatch
        """

        self._template_match = template_match

    @property
    def uri(self):
        """Gets the uri of this TemplateSummary.  # noqa: E501

          # noqa: E501

        :return: The uri of this TemplateSummary.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this TemplateSummary.

          # noqa: E501

        :param uri: The uri of this TemplateSummary.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplateSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
