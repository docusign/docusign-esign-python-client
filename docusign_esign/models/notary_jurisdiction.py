# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class NotaryJurisdiction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commission_expiration': 'str',
        'commission_id': 'str',
        'county': 'str',
        'error_details': 'ErrorDetails',
        'jurisdiction': 'Jurisdiction',
        'registered_name': 'str',
        'seal_type': 'str'
    }

    attribute_map = {
        'commission_expiration': 'commissionExpiration',
        'commission_id': 'commissionId',
        'county': 'county',
        'error_details': 'errorDetails',
        'jurisdiction': 'jurisdiction',
        'registered_name': 'registeredName',
        'seal_type': 'sealType'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """NotaryJurisdiction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._commission_expiration = None
        self._commission_id = None
        self._county = None
        self._error_details = None
        self._jurisdiction = None
        self._registered_name = None
        self._seal_type = None
        self.discriminator = None

        setattr(self, "_{}".format('commission_expiration'), kwargs.get('commission_expiration', None))
        setattr(self, "_{}".format('commission_id'), kwargs.get('commission_id', None))
        setattr(self, "_{}".format('county'), kwargs.get('county', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('jurisdiction'), kwargs.get('jurisdiction', None))
        setattr(self, "_{}".format('registered_name'), kwargs.get('registered_name', None))
        setattr(self, "_{}".format('seal_type'), kwargs.get('seal_type', None))

    @property
    def commission_expiration(self):
        """Gets the commission_expiration of this NotaryJurisdiction.  # noqa: E501

          # noqa: E501

        :return: The commission_expiration of this NotaryJurisdiction.  # noqa: E501
        :rtype: str
        """
        return self._commission_expiration

    @commission_expiration.setter
    def commission_expiration(self, commission_expiration):
        """Sets the commission_expiration of this NotaryJurisdiction.

          # noqa: E501

        :param commission_expiration: The commission_expiration of this NotaryJurisdiction.  # noqa: E501
        :type: str
        """

        self._commission_expiration = commission_expiration

    @property
    def commission_id(self):
        """Gets the commission_id of this NotaryJurisdiction.  # noqa: E501

          # noqa: E501

        :return: The commission_id of this NotaryJurisdiction.  # noqa: E501
        :rtype: str
        """
        return self._commission_id

    @commission_id.setter
    def commission_id(self, commission_id):
        """Sets the commission_id of this NotaryJurisdiction.

          # noqa: E501

        :param commission_id: The commission_id of this NotaryJurisdiction.  # noqa: E501
        :type: str
        """

        self._commission_id = commission_id

    @property
    def county(self):
        """Gets the county of this NotaryJurisdiction.  # noqa: E501

          # noqa: E501

        :return: The county of this NotaryJurisdiction.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this NotaryJurisdiction.

          # noqa: E501

        :param county: The county of this NotaryJurisdiction.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def error_details(self):
        """Gets the error_details of this NotaryJurisdiction.  # noqa: E501

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :return: The error_details of this NotaryJurisdiction.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this NotaryJurisdiction.

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :param error_details: The error_details of this NotaryJurisdiction.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this NotaryJurisdiction.  # noqa: E501

        Description of the jurisdiction for this notary. This is a read-only property.  # noqa: E501

        :return: The jurisdiction of this NotaryJurisdiction.  # noqa: E501
        :rtype: Jurisdiction
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this NotaryJurisdiction.

        Description of the jurisdiction for this notary. This is a read-only property.  # noqa: E501

        :param jurisdiction: The jurisdiction of this NotaryJurisdiction.  # noqa: E501
        :type: Jurisdiction
        """

        self._jurisdiction = jurisdiction

    @property
    def registered_name(self):
        """Gets the registered_name of this NotaryJurisdiction.  # noqa: E501

          # noqa: E501

        :return: The registered_name of this NotaryJurisdiction.  # noqa: E501
        :rtype: str
        """
        return self._registered_name

    @registered_name.setter
    def registered_name(self, registered_name):
        """Sets the registered_name of this NotaryJurisdiction.

          # noqa: E501

        :param registered_name: The registered_name of this NotaryJurisdiction.  # noqa: E501
        :type: str
        """

        self._registered_name = registered_name

    @property
    def seal_type(self):
        """Gets the seal_type of this NotaryJurisdiction.  # noqa: E501

          # noqa: E501

        :return: The seal_type of this NotaryJurisdiction.  # noqa: E501
        :rtype: str
        """
        return self._seal_type

    @seal_type.setter
    def seal_type(self, seal_type):
        """Sets the seal_type of this NotaryJurisdiction.

          # noqa: E501

        :param seal_type: The seal_type of this NotaryJurisdiction.  # noqa: E501
        :type: str
        """

        self._seal_type = seal_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotaryJurisdiction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotaryJurisdiction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotaryJurisdiction):
            return True

        return self.to_dict() != other.to_dict()
