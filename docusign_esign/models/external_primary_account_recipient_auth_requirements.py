# coding: utf-8

"""
    Docusign eSignature REST API

    The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class ExternalPrimaryAccountRecipientAuthRequirements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_code': 'str',
        'id_verification': 'str',
        'kba': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'access_code': 'accessCode',
        'id_verification': 'idVerification',
        'kba': 'kba',
        'phone': 'phone'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ExternalPrimaryAccountRecipientAuthRequirements - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_code = None
        self._id_verification = None
        self._kba = None
        self._phone = None
        self.discriminator = None

        setattr(self, "_{}".format('access_code'), kwargs.get('access_code', None))
        setattr(self, "_{}".format('id_verification'), kwargs.get('id_verification', None))
        setattr(self, "_{}".format('kba'), kwargs.get('kba', None))
        setattr(self, "_{}".format('phone'), kwargs.get('phone', None))

    @property
    def access_code(self):
        """Gets the access_code of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501

        If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account's access code format setting.  If blank, but the signer `accessCode` property is set in the envelope, then that value is used.  If blank and the signer `accessCode` property is not set, then the access code is not required.  # noqa: E501

        :return: The access_code of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :rtype: str
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """Sets the access_code of this ExternalPrimaryAccountRecipientAuthRequirements.

        If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account's access code format setting.  If blank, but the signer `accessCode` property is set in the envelope, then that value is used.  If blank and the signer `accessCode` property is not set, then the access code is not required.  # noqa: E501

        :param access_code: The access_code of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :type: str
        """

        self._access_code = access_code

    @property
    def id_verification(self):
        """Gets the id_verification of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501

          # noqa: E501

        :return: The id_verification of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :rtype: str
        """
        return self._id_verification

    @id_verification.setter
    def id_verification(self, id_verification):
        """Sets the id_verification of this ExternalPrimaryAccountRecipientAuthRequirements.

          # noqa: E501

        :param id_verification: The id_verification of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :type: str
        """

        self._id_verification = id_verification

    @property
    def kba(self):
        """Gets the kba of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501

          # noqa: E501

        :return: The kba of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :rtype: str
        """
        return self._kba

    @kba.setter
    def kba(self, kba):
        """Sets the kba of this ExternalPrimaryAccountRecipientAuthRequirements.

          # noqa: E501

        :param kba: The kba of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :type: str
        """

        self._kba = kba

    @property
    def phone(self):
        """Gets the phone of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501

          # noqa: E501

        :return: The phone of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ExternalPrimaryAccountRecipientAuthRequirements.

          # noqa: E501

        :param phone: The phone of this ExternalPrimaryAccountRecipientAuthRequirements.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalPrimaryAccountRecipientAuthRequirements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalPrimaryAccountRecipientAuthRequirements):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExternalPrimaryAccountRecipientAuthRequirements):
            return True

        return self.to_dict() != other.to_dict()
