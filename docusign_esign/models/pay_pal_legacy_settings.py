# coding: utf-8

"""
    Docusign eSignature REST API

    The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class PayPalLegacySettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'partner': 'str',
        'password': 'str',
        'user_name': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'partner': 'partner',
        'password': 'password',
        'user_name': 'userName',
        'vendor': 'vendor'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """PayPalLegacySettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency = None
        self._partner = None
        self._password = None
        self._user_name = None
        self._vendor = None
        self.discriminator = None

        setattr(self, "_{}".format('currency'), kwargs.get('currency', None))
        setattr(self, "_{}".format('partner'), kwargs.get('partner', None))
        setattr(self, "_{}".format('password'), kwargs.get('password', None))
        setattr(self, "_{}".format('user_name'), kwargs.get('user_name', None))
        setattr(self, "_{}".format('vendor'), kwargs.get('vendor', None))

    @property
    def currency(self):
        """Gets the currency of this PayPalLegacySettings.  # noqa: E501

          # noqa: E501

        :return: The currency of this PayPalLegacySettings.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PayPalLegacySettings.

          # noqa: E501

        :param currency: The currency of this PayPalLegacySettings.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def partner(self):
        """Gets the partner of this PayPalLegacySettings.  # noqa: E501

          # noqa: E501

        :return: The partner of this PayPalLegacySettings.  # noqa: E501
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this PayPalLegacySettings.

          # noqa: E501

        :param partner: The partner of this PayPalLegacySettings.  # noqa: E501
        :type: str
        """

        self._partner = partner

    @property
    def password(self):
        """Gets the password of this PayPalLegacySettings.  # noqa: E501

          # noqa: E501

        :return: The password of this PayPalLegacySettings.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PayPalLegacySettings.

          # noqa: E501

        :param password: The password of this PayPalLegacySettings.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def user_name(self):
        """Gets the user_name of this PayPalLegacySettings.  # noqa: E501

          # noqa: E501

        :return: The user_name of this PayPalLegacySettings.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this PayPalLegacySettings.

          # noqa: E501

        :param user_name: The user_name of this PayPalLegacySettings.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def vendor(self):
        """Gets the vendor of this PayPalLegacySettings.  # noqa: E501

          # noqa: E501

        :return: The vendor of this PayPalLegacySettings.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this PayPalLegacySettings.

          # noqa: E501

        :param vendor: The vendor of this PayPalLegacySettings.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayPalLegacySettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayPalLegacySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PayPalLegacySettings):
            return True

        return self.to_dict() != other.to_dict()
