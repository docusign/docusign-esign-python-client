# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AuthenticationMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, authentication_type=None, last_provider=None, last_timestamp=None, total_count=None):
        """
        AuthenticationMethod - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'authentication_type': 'str',
            'last_provider': 'str',
            'last_timestamp': 'str',
            'total_count': 'str'
        }

        self.attribute_map = {
            'authentication_type': 'authenticationType',
            'last_provider': 'lastProvider',
            'last_timestamp': 'lastTimestamp',
            'total_count': 'totalCount'
        }

        self._authentication_type = authentication_type
        self._last_provider = last_provider
        self._last_timestamp = last_timestamp
        self._total_count = total_count

    @property
    def authentication_type(self):
        """
        Gets the authentication_type of this AuthenticationMethod.
        Indicates the type of authentication. Valid values are: PhoneAuth, STAN, ISCheck, OFAC, AccessCode, AgeVerify, or SSOAuth. 

        :return: The authentication_type of this AuthenticationMethod.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """
        Sets the authentication_type of this AuthenticationMethod.
        Indicates the type of authentication. Valid values are: PhoneAuth, STAN, ISCheck, OFAC, AccessCode, AgeVerify, or SSOAuth. 

        :param authentication_type: The authentication_type of this AuthenticationMethod.
        :type: str
        """

        self._authentication_type = authentication_type

    @property
    def last_provider(self):
        """
        Gets the last_provider of this AuthenticationMethod.
        The last provider that authenticated the user. 

        :return: The last_provider of this AuthenticationMethod.
        :rtype: str
        """
        return self._last_provider

    @last_provider.setter
    def last_provider(self, last_provider):
        """
        Sets the last_provider of this AuthenticationMethod.
        The last provider that authenticated the user. 

        :param last_provider: The last_provider of this AuthenticationMethod.
        :type: str
        """

        self._last_provider = last_provider

    @property
    def last_timestamp(self):
        """
        Gets the last_timestamp of this AuthenticationMethod.
         The data and time the user last used the authentication method. 

        :return: The last_timestamp of this AuthenticationMethod.
        :rtype: str
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """
        Sets the last_timestamp of this AuthenticationMethod.
         The data and time the user last used the authentication method. 

        :param last_timestamp: The last_timestamp of this AuthenticationMethod.
        :type: str
        """

        self._last_timestamp = last_timestamp

    @property
    def total_count(self):
        """
        Gets the total_count of this AuthenticationMethod.
        The number of times the authentication method was used. 

        :return: The total_count of this AuthenticationMethod.
        :rtype: str
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this AuthenticationMethod.
        The number of times the authentication method was used. 

        :param total_count: The total_count of this AuthenticationMethod.
        :type: str
        """

        self._total_count = total_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
