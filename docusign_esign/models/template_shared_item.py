# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TemplateSharedItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, error_details=None, owner=None, password=None, shared=None, shared_groups=None, shared_users=None, template_id=None, template_name=None):
        """
        TemplateSharedItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error_details': 'ErrorDetails',
            'owner': 'UserInfo',
            'password': 'str',
            'shared': 'str',
            'shared_groups': 'list[MemberGroupSharedItem]',
            'shared_users': 'list[UserSharedItem]',
            'template_id': 'str',
            'template_name': 'str'
        }

        self.attribute_map = {
            'error_details': 'errorDetails',
            'owner': 'owner',
            'password': 'password',
            'shared': 'shared',
            'shared_groups': 'sharedGroups',
            'shared_users': 'sharedUsers',
            'template_id': 'templateId',
            'template_name': 'templateName'
        }

        self._error_details = error_details
        self._owner = owner
        self._password = password
        self._shared = shared
        self._shared_groups = shared_groups
        self._shared_users = shared_users
        self._template_id = template_id
        self._template_name = template_name

    @property
    def error_details(self):
        """
        Gets the error_details of this TemplateSharedItem.

        :return: The error_details of this TemplateSharedItem.
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """
        Sets the error_details of this TemplateSharedItem.

        :param error_details: The error_details of this TemplateSharedItem.
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def owner(self):
        """
        Gets the owner of this TemplateSharedItem.

        :return: The owner of this TemplateSharedItem.
        :rtype: UserInfo
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this TemplateSharedItem.

        :param owner: The owner of this TemplateSharedItem.
        :type: UserInfo
        """

        self._owner = owner

    @property
    def password(self):
        """
        Gets the password of this TemplateSharedItem.
        

        :return: The password of this TemplateSharedItem.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this TemplateSharedItem.
        

        :param password: The password of this TemplateSharedItem.
        :type: str
        """

        self._password = password

    @property
    def shared(self):
        """
        Gets the shared of this TemplateSharedItem.
        When set to **true**, this custom tab is shared.

        :return: The shared of this TemplateSharedItem.
        :rtype: str
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """
        Sets the shared of this TemplateSharedItem.
        When set to **true**, this custom tab is shared.

        :param shared: The shared of this TemplateSharedItem.
        :type: str
        """

        self._shared = shared

    @property
    def shared_groups(self):
        """
        Gets the shared_groups of this TemplateSharedItem.
        

        :return: The shared_groups of this TemplateSharedItem.
        :rtype: list[MemberGroupSharedItem]
        """
        return self._shared_groups

    @shared_groups.setter
    def shared_groups(self, shared_groups):
        """
        Sets the shared_groups of this TemplateSharedItem.
        

        :param shared_groups: The shared_groups of this TemplateSharedItem.
        :type: list[MemberGroupSharedItem]
        """

        self._shared_groups = shared_groups

    @property
    def shared_users(self):
        """
        Gets the shared_users of this TemplateSharedItem.
        

        :return: The shared_users of this TemplateSharedItem.
        :rtype: list[UserSharedItem]
        """
        return self._shared_users

    @shared_users.setter
    def shared_users(self, shared_users):
        """
        Sets the shared_users of this TemplateSharedItem.
        

        :param shared_users: The shared_users of this TemplateSharedItem.
        :type: list[UserSharedItem]
        """

        self._shared_users = shared_users

    @property
    def template_id(self):
        """
        Gets the template_id of this TemplateSharedItem.
        The unique identifier of the template. If this is not provided, DocuSign will generate a value. 

        :return: The template_id of this TemplateSharedItem.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """
        Sets the template_id of this TemplateSharedItem.
        The unique identifier of the template. If this is not provided, DocuSign will generate a value. 

        :param template_id: The template_id of this TemplateSharedItem.
        :type: str
        """

        self._template_id = template_id

    @property
    def template_name(self):
        """
        Gets the template_name of this TemplateSharedItem.
        

        :return: The template_name of this TemplateSharedItem.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """
        Sets the template_name of this TemplateSharedItem.
        

        :param template_name: The template_name of this TemplateSharedItem.
        :type: str
        """

        self._template_name = template_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
