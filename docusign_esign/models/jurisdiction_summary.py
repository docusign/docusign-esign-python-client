# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class JurisdictionSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorized_for_i_pen': 'str',
        'authorized_for_ron': 'str',
        'jurisdiction_id': 'str',
        'jurisdiction_name': 'str'
    }

    attribute_map = {
        'authorized_for_i_pen': 'authorizedForIPen',
        'authorized_for_ron': 'authorizedForRon',
        'jurisdiction_id': 'jurisdictionId',
        'jurisdiction_name': 'jurisdictionName'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """JurisdictionSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorized_for_i_pen = None
        self._authorized_for_ron = None
        self._jurisdiction_id = None
        self._jurisdiction_name = None
        self.discriminator = None

        setattr(self, "_{}".format('authorized_for_i_pen'), kwargs.get('authorized_for_i_pen', None))
        setattr(self, "_{}".format('authorized_for_ron'), kwargs.get('authorized_for_ron', None))
        setattr(self, "_{}".format('jurisdiction_id'), kwargs.get('jurisdiction_id', None))
        setattr(self, "_{}".format('jurisdiction_name'), kwargs.get('jurisdiction_name', None))

    @property
    def authorized_for_i_pen(self):
        """Gets the authorized_for_i_pen of this JurisdictionSummary.  # noqa: E501

          # noqa: E501

        :return: The authorized_for_i_pen of this JurisdictionSummary.  # noqa: E501
        :rtype: str
        """
        return self._authorized_for_i_pen

    @authorized_for_i_pen.setter
    def authorized_for_i_pen(self, authorized_for_i_pen):
        """Sets the authorized_for_i_pen of this JurisdictionSummary.

          # noqa: E501

        :param authorized_for_i_pen: The authorized_for_i_pen of this JurisdictionSummary.  # noqa: E501
        :type: str
        """

        self._authorized_for_i_pen = authorized_for_i_pen

    @property
    def authorized_for_ron(self):
        """Gets the authorized_for_ron of this JurisdictionSummary.  # noqa: E501

          # noqa: E501

        :return: The authorized_for_ron of this JurisdictionSummary.  # noqa: E501
        :rtype: str
        """
        return self._authorized_for_ron

    @authorized_for_ron.setter
    def authorized_for_ron(self, authorized_for_ron):
        """Sets the authorized_for_ron of this JurisdictionSummary.

          # noqa: E501

        :param authorized_for_ron: The authorized_for_ron of this JurisdictionSummary.  # noqa: E501
        :type: str
        """

        self._authorized_for_ron = authorized_for_ron

    @property
    def jurisdiction_id(self):
        """Gets the jurisdiction_id of this JurisdictionSummary.  # noqa: E501

          # noqa: E501

        :return: The jurisdiction_id of this JurisdictionSummary.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction_id

    @jurisdiction_id.setter
    def jurisdiction_id(self, jurisdiction_id):
        """Sets the jurisdiction_id of this JurisdictionSummary.

          # noqa: E501

        :param jurisdiction_id: The jurisdiction_id of this JurisdictionSummary.  # noqa: E501
        :type: str
        """

        self._jurisdiction_id = jurisdiction_id

    @property
    def jurisdiction_name(self):
        """Gets the jurisdiction_name of this JurisdictionSummary.  # noqa: E501

          # noqa: E501

        :return: The jurisdiction_name of this JurisdictionSummary.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction_name

    @jurisdiction_name.setter
    def jurisdiction_name(self, jurisdiction_name):
        """Sets the jurisdiction_name of this JurisdictionSummary.

          # noqa: E501

        :param jurisdiction_name: The jurisdiction_name of this JurisdictionSummary.  # noqa: E501
        :type: str
        """

        self._jurisdiction_name = jurisdiction_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JurisdictionSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JurisdictionSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JurisdictionSummary):
            return True

        return self.to_dict() != other.to_dict()
