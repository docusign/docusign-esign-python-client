# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NotaryJournalMetaData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, comment=None, credible_witnesses=None, signature_image=None, signer_id_type=None):
        """
        NotaryJournalMetaData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'comment': 'str',
            'credible_witnesses': 'list[NotaryJournalCredibleWitness]',
            'signature_image': 'str',
            'signer_id_type': 'str'
        }

        self.attribute_map = {
            'comment': 'comment',
            'credible_witnesses': 'credibleWitnesses',
            'signature_image': 'signatureImage',
            'signer_id_type': 'signerIdType'
        }

        self._comment = comment
        self._credible_witnesses = credible_witnesses
        self._signature_image = signature_image
        self._signer_id_type = signer_id_type

    @property
    def comment(self):
        """
        Gets the comment of this NotaryJournalMetaData.
        

        :return: The comment of this NotaryJournalMetaData.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this NotaryJournalMetaData.
        

        :param comment: The comment of this NotaryJournalMetaData.
        :type: str
        """

        self._comment = comment

    @property
    def credible_witnesses(self):
        """
        Gets the credible_witnesses of this NotaryJournalMetaData.
        

        :return: The credible_witnesses of this NotaryJournalMetaData.
        :rtype: list[NotaryJournalCredibleWitness]
        """
        return self._credible_witnesses

    @credible_witnesses.setter
    def credible_witnesses(self, credible_witnesses):
        """
        Sets the credible_witnesses of this NotaryJournalMetaData.
        

        :param credible_witnesses: The credible_witnesses of this NotaryJournalMetaData.
        :type: list[NotaryJournalCredibleWitness]
        """

        self._credible_witnesses = credible_witnesses

    @property
    def signature_image(self):
        """
        Gets the signature_image of this NotaryJournalMetaData.
        

        :return: The signature_image of this NotaryJournalMetaData.
        :rtype: str
        """
        return self._signature_image

    @signature_image.setter
    def signature_image(self, signature_image):
        """
        Sets the signature_image of this NotaryJournalMetaData.
        

        :param signature_image: The signature_image of this NotaryJournalMetaData.
        :type: str
        """

        self._signature_image = signature_image

    @property
    def signer_id_type(self):
        """
        Gets the signer_id_type of this NotaryJournalMetaData.
        

        :return: The signer_id_type of this NotaryJournalMetaData.
        :rtype: str
        """
        return self._signer_id_type

    @signer_id_type.setter
    def signer_id_type(self, signer_id_type):
        """
        Sets the signer_id_type of this NotaryJournalMetaData.
        

        :param signer_id_type: The signer_id_type of this NotaryJournalMetaData.
        :type: str
        """

        self._signer_id_type = signer_id_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
