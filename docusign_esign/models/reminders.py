# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Reminders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reminder_delay': 'str',
        'reminder_enabled': 'str',
        'reminder_frequency': 'str'
    }

    attribute_map = {
        'reminder_delay': 'reminderDelay',
        'reminder_enabled': 'reminderEnabled',
        'reminder_frequency': 'reminderFrequency'
    }

    def __init__(self, reminder_delay=None, reminder_enabled=None, reminder_frequency=None):  # noqa: E501
        """Reminders - a model defined in Swagger"""  # noqa: E501

        self._reminder_delay = None
        self._reminder_enabled = None
        self._reminder_frequency = None
        self.discriminator = None

        if reminder_delay is not None:
            self.reminder_delay = reminder_delay
        if reminder_enabled is not None:
            self.reminder_enabled = reminder_enabled
        if reminder_frequency is not None:
            self.reminder_frequency = reminder_frequency

    @property
    def reminder_delay(self):
        """Gets the reminder_delay of this Reminders.  # noqa: E501

        An interger that sets the number of days after the recipient receives the envelope that reminder emails are sent to the recipient.  # noqa: E501

        :return: The reminder_delay of this Reminders.  # noqa: E501
        :rtype: str
        """
        return self._reminder_delay

    @reminder_delay.setter
    def reminder_delay(self, reminder_delay):
        """Sets the reminder_delay of this Reminders.

        An interger that sets the number of days after the recipient receives the envelope that reminder emails are sent to the recipient.  # noqa: E501

        :param reminder_delay: The reminder_delay of this Reminders.  # noqa: E501
        :type: str
        """

        self._reminder_delay = reminder_delay

    @property
    def reminder_enabled(self):
        """Gets the reminder_enabled of this Reminders.  # noqa: E501

        When set to **true**, the envelope expires (is no longer available for signing) in the set number of days. If false, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.  # noqa: E501

        :return: The reminder_enabled of this Reminders.  # noqa: E501
        :rtype: str
        """
        return self._reminder_enabled

    @reminder_enabled.setter
    def reminder_enabled(self, reminder_enabled):
        """Sets the reminder_enabled of this Reminders.

        When set to **true**, the envelope expires (is no longer available for signing) in the set number of days. If false, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used.  # noqa: E501

        :param reminder_enabled: The reminder_enabled of this Reminders.  # noqa: E501
        :type: str
        """

        self._reminder_enabled = reminder_enabled

    @property
    def reminder_frequency(self):
        """Gets the reminder_frequency of this Reminders.  # noqa: E501

        An interger that sets the interval, in days, between reminder emails.  # noqa: E501

        :return: The reminder_frequency of this Reminders.  # noqa: E501
        :rtype: str
        """
        return self._reminder_frequency

    @reminder_frequency.setter
    def reminder_frequency(self, reminder_frequency):
        """Sets the reminder_frequency of this Reminders.

        An interger that sets the interval, in days, between reminder emails.  # noqa: E501

        :param reminder_frequency: The reminder_frequency of this Reminders.  # noqa: E501
        :type: str
        """

        self._reminder_frequency = reminder_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reminders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reminders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
