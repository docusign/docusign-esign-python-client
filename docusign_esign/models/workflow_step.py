# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WorkflowStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'completed_date': 'str',
        'item_id': 'str',
        'recipient_routing': 'RecipientRouting',
        'status': 'str',
        'triggered_date': 'str',
        'trigger_on_item': 'str',
        'workflow_step_id': 'str'
    }

    attribute_map = {
        'action': 'action',
        'completed_date': 'completedDate',
        'item_id': 'itemId',
        'recipient_routing': 'recipientRouting',
        'status': 'status',
        'triggered_date': 'triggeredDate',
        'trigger_on_item': 'triggerOnItem',
        'workflow_step_id': 'workflowStepId'
    }

    def __init__(self, action=None, completed_date=None, item_id=None, recipient_routing=None, status=None, triggered_date=None, trigger_on_item=None, workflow_step_id=None):  # noqa: E501
        """WorkflowStep - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._completed_date = None
        self._item_id = None
        self._recipient_routing = None
        self._status = None
        self._triggered_date = None
        self._trigger_on_item = None
        self._workflow_step_id = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if completed_date is not None:
            self.completed_date = completed_date
        if item_id is not None:
            self.item_id = item_id
        if recipient_routing is not None:
            self.recipient_routing = recipient_routing
        if status is not None:
            self.status = status
        if triggered_date is not None:
            self.triggered_date = triggered_date
        if trigger_on_item is not None:
            self.trigger_on_item = trigger_on_item
        if workflow_step_id is not None:
            self.workflow_step_id = workflow_step_id

    @property
    def action(self):
        """Gets the action of this WorkflowStep.  # noqa: E501

          # noqa: E501

        :return: The action of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this WorkflowStep.

          # noqa: E501

        :param action: The action of this WorkflowStep.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def completed_date(self):
        """Gets the completed_date of this WorkflowStep.  # noqa: E501

          # noqa: E501

        :return: The completed_date of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this WorkflowStep.

          # noqa: E501

        :param completed_date: The completed_date of this WorkflowStep.  # noqa: E501
        :type: str
        """

        self._completed_date = completed_date

    @property
    def item_id(self):
        """Gets the item_id of this WorkflowStep.  # noqa: E501

          # noqa: E501

        :return: The item_id of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this WorkflowStep.

          # noqa: E501

        :param item_id: The item_id of this WorkflowStep.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def recipient_routing(self):
        """Gets the recipient_routing of this WorkflowStep.  # noqa: E501


        :return: The recipient_routing of this WorkflowStep.  # noqa: E501
        :rtype: RecipientRouting
        """
        return self._recipient_routing

    @recipient_routing.setter
    def recipient_routing(self, recipient_routing):
        """Sets the recipient_routing of this WorkflowStep.


        :param recipient_routing: The recipient_routing of this WorkflowStep.  # noqa: E501
        :type: RecipientRouting
        """

        self._recipient_routing = recipient_routing

    @property
    def status(self):
        """Gets the status of this WorkflowStep.  # noqa: E501

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :return: The status of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowStep.

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :param status: The status of this WorkflowStep.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def triggered_date(self):
        """Gets the triggered_date of this WorkflowStep.  # noqa: E501

          # noqa: E501

        :return: The triggered_date of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._triggered_date

    @triggered_date.setter
    def triggered_date(self, triggered_date):
        """Sets the triggered_date of this WorkflowStep.

          # noqa: E501

        :param triggered_date: The triggered_date of this WorkflowStep.  # noqa: E501
        :type: str
        """

        self._triggered_date = triggered_date

    @property
    def trigger_on_item(self):
        """Gets the trigger_on_item of this WorkflowStep.  # noqa: E501

          # noqa: E501

        :return: The trigger_on_item of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._trigger_on_item

    @trigger_on_item.setter
    def trigger_on_item(self, trigger_on_item):
        """Sets the trigger_on_item of this WorkflowStep.

          # noqa: E501

        :param trigger_on_item: The trigger_on_item of this WorkflowStep.  # noqa: E501
        :type: str
        """

        self._trigger_on_item = trigger_on_item

    @property
    def workflow_step_id(self):
        """Gets the workflow_step_id of this WorkflowStep.  # noqa: E501

          # noqa: E501

        :return: The workflow_step_id of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._workflow_step_id

    @workflow_step_id.setter
    def workflow_step_id(self, workflow_step_id):
        """Sets the workflow_step_id of this WorkflowStep.

          # noqa: E501

        :param workflow_step_id: The workflow_step_id of this WorkflowStep.  # noqa: E501
        :type: str
        """

        self._workflow_step_id = workflow_step_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
