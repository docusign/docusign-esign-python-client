# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class NotificationDefaultSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender_email_notifications': 'SenderEmailNotifications',
        'signer_email_notifications': 'SignerEmailNotifications'
    }

    attribute_map = {
        'sender_email_notifications': 'senderEmailNotifications',
        'signer_email_notifications': 'signerEmailNotifications'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """NotificationDefaultSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sender_email_notifications = None
        self._signer_email_notifications = None
        self.discriminator = None

        setattr(self, "_{}".format('sender_email_notifications'), kwargs.get('sender_email_notifications', None))
        setattr(self, "_{}".format('signer_email_notifications'), kwargs.get('signer_email_notifications', None))

    @property
    def sender_email_notifications(self):
        """Gets the sender_email_notifications of this NotificationDefaultSettings.  # noqa: E501

          An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed     # noqa: E501

        :return: The sender_email_notifications of this NotificationDefaultSettings.  # noqa: E501
        :rtype: SenderEmailNotifications
        """
        return self._sender_email_notifications

    @sender_email_notifications.setter
    def sender_email_notifications(self, sender_email_notifications):
        """Sets the sender_email_notifications of this NotificationDefaultSettings.

          An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed     # noqa: E501

        :param sender_email_notifications: The sender_email_notifications of this NotificationDefaultSettings.  # noqa: E501
        :type: SenderEmailNotifications
        """

        self._sender_email_notifications = sender_email_notifications

    @property
    def signer_email_notifications(self):
        """Gets the signer_email_notifications of this NotificationDefaultSettings.  # noqa: E501

        An array of email notifications that specifies the email the user receives when they are a recipient. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account email notification settings when the user is created.   # noqa: E501

        :return: The signer_email_notifications of this NotificationDefaultSettings.  # noqa: E501
        :rtype: SignerEmailNotifications
        """
        return self._signer_email_notifications

    @signer_email_notifications.setter
    def signer_email_notifications(self, signer_email_notifications):
        """Sets the signer_email_notifications of this NotificationDefaultSettings.

        An array of email notifications that specifies the email the user receives when they are a recipient. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account email notification settings when the user is created.   # noqa: E501

        :param signer_email_notifications: The signer_email_notifications of this NotificationDefaultSettings.  # noqa: E501
        :type: SignerEmailNotifications
        """

        self._signer_email_notifications = signer_email_notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationDefaultSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationDefaultSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationDefaultSettings):
            return True

        return self.to_dict() != other.to_dict()
