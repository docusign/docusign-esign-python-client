# coding: utf-8

"""
    Docusign eSignature REST API

    The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class ConnectedData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_name': 'str',
        'supported_operation': 'str',
        'supported_uri': 'str',
        'type_name': 'str',
        'type_system_namespace': 'str'
    }

    attribute_map = {
        'property_name': 'propertyName',
        'supported_operation': 'supportedOperation',
        'supported_uri': 'supportedUri',
        'type_name': 'typeName',
        'type_system_namespace': 'typeSystemNamespace'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ConnectedData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._property_name = None
        self._supported_operation = None
        self._supported_uri = None
        self._type_name = None
        self._type_system_namespace = None
        self.discriminator = None

        setattr(self, "_{}".format('property_name'), kwargs.get('property_name', None))
        setattr(self, "_{}".format('supported_operation'), kwargs.get('supported_operation', None))
        setattr(self, "_{}".format('supported_uri'), kwargs.get('supported_uri', None))
        setattr(self, "_{}".format('type_name'), kwargs.get('type_name', None))
        setattr(self, "_{}".format('type_system_namespace'), kwargs.get('type_system_namespace', None))

    @property
    def property_name(self):
        """Gets the property_name of this ConnectedData.  # noqa: E501

          # noqa: E501

        :return: The property_name of this ConnectedData.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this ConnectedData.

          # noqa: E501

        :param property_name: The property_name of this ConnectedData.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def supported_operation(self):
        """Gets the supported_operation of this ConnectedData.  # noqa: E501

          # noqa: E501

        :return: The supported_operation of this ConnectedData.  # noqa: E501
        :rtype: str
        """
        return self._supported_operation

    @supported_operation.setter
    def supported_operation(self, supported_operation):
        """Sets the supported_operation of this ConnectedData.

          # noqa: E501

        :param supported_operation: The supported_operation of this ConnectedData.  # noqa: E501
        :type: str
        """

        self._supported_operation = supported_operation

    @property
    def supported_uri(self):
        """Gets the supported_uri of this ConnectedData.  # noqa: E501

          # noqa: E501

        :return: The supported_uri of this ConnectedData.  # noqa: E501
        :rtype: str
        """
        return self._supported_uri

    @supported_uri.setter
    def supported_uri(self, supported_uri):
        """Sets the supported_uri of this ConnectedData.

          # noqa: E501

        :param supported_uri: The supported_uri of this ConnectedData.  # noqa: E501
        :type: str
        """

        self._supported_uri = supported_uri

    @property
    def type_name(self):
        """Gets the type_name of this ConnectedData.  # noqa: E501

          # noqa: E501

        :return: The type_name of this ConnectedData.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ConnectedData.

          # noqa: E501

        :param type_name: The type_name of this ConnectedData.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def type_system_namespace(self):
        """Gets the type_system_namespace of this ConnectedData.  # noqa: E501

          # noqa: E501

        :return: The type_system_namespace of this ConnectedData.  # noqa: E501
        :rtype: str
        """
        return self._type_system_namespace

    @type_system_namespace.setter
    def type_system_namespace(self, type_system_namespace):
        """Sets the type_system_namespace of this ConnectedData.

          # noqa: E501

        :param type_system_namespace: The type_system_namespace of this ConnectedData.  # noqa: E501
        :type: str
        """

        self._type_system_namespace = type_system_namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectedData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectedData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectedData):
            return True

        return self.to_dict() != other.to_dict()
