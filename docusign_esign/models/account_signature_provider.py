# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountSignatureProvider(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_required=None, priority=None, signature_provider_display_name=None, signature_provider_id=None, signature_provider_name=None, signature_provider_options_metadata=None, signature_provider_required_options=None):
        """
        AccountSignatureProvider - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_required': 'str',
            'priority': 'str',
            'signature_provider_display_name': 'str',
            'signature_provider_id': 'str',
            'signature_provider_name': 'str',
            'signature_provider_options_metadata': 'list[AccountSignatureProviderOption]',
            'signature_provider_required_options': 'list[SignatureProviderRequiredOption]'
        }

        self.attribute_map = {
            'is_required': 'isRequired',
            'priority': 'priority',
            'signature_provider_display_name': 'signatureProviderDisplayName',
            'signature_provider_id': 'signatureProviderId',
            'signature_provider_name': 'signatureProviderName',
            'signature_provider_options_metadata': 'signatureProviderOptionsMetadata',
            'signature_provider_required_options': 'signatureProviderRequiredOptions'
        }

        self._is_required = is_required
        self._priority = priority
        self._signature_provider_display_name = signature_provider_display_name
        self._signature_provider_id = signature_provider_id
        self._signature_provider_name = signature_provider_name
        self._signature_provider_options_metadata = signature_provider_options_metadata
        self._signature_provider_required_options = signature_provider_required_options

    @property
    def is_required(self):
        """
        Gets the is_required of this AccountSignatureProvider.
        

        :return: The is_required of this AccountSignatureProvider.
        :rtype: str
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """
        Sets the is_required of this AccountSignatureProvider.
        

        :param is_required: The is_required of this AccountSignatureProvider.
        :type: str
        """

        self._is_required = is_required

    @property
    def priority(self):
        """
        Gets the priority of this AccountSignatureProvider.
        

        :return: The priority of this AccountSignatureProvider.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this AccountSignatureProvider.
        

        :param priority: The priority of this AccountSignatureProvider.
        :type: str
        """

        self._priority = priority

    @property
    def signature_provider_display_name(self):
        """
        Gets the signature_provider_display_name of this AccountSignatureProvider.
        

        :return: The signature_provider_display_name of this AccountSignatureProvider.
        :rtype: str
        """
        return self._signature_provider_display_name

    @signature_provider_display_name.setter
    def signature_provider_display_name(self, signature_provider_display_name):
        """
        Sets the signature_provider_display_name of this AccountSignatureProvider.
        

        :param signature_provider_display_name: The signature_provider_display_name of this AccountSignatureProvider.
        :type: str
        """

        self._signature_provider_display_name = signature_provider_display_name

    @property
    def signature_provider_id(self):
        """
        Gets the signature_provider_id of this AccountSignatureProvider.
        

        :return: The signature_provider_id of this AccountSignatureProvider.
        :rtype: str
        """
        return self._signature_provider_id

    @signature_provider_id.setter
    def signature_provider_id(self, signature_provider_id):
        """
        Sets the signature_provider_id of this AccountSignatureProvider.
        

        :param signature_provider_id: The signature_provider_id of this AccountSignatureProvider.
        :type: str
        """

        self._signature_provider_id = signature_provider_id

    @property
    def signature_provider_name(self):
        """
        Gets the signature_provider_name of this AccountSignatureProvider.
        

        :return: The signature_provider_name of this AccountSignatureProvider.
        :rtype: str
        """
        return self._signature_provider_name

    @signature_provider_name.setter
    def signature_provider_name(self, signature_provider_name):
        """
        Sets the signature_provider_name of this AccountSignatureProvider.
        

        :param signature_provider_name: The signature_provider_name of this AccountSignatureProvider.
        :type: str
        """

        self._signature_provider_name = signature_provider_name

    @property
    def signature_provider_options_metadata(self):
        """
        Gets the signature_provider_options_metadata of this AccountSignatureProvider.
        

        :return: The signature_provider_options_metadata of this AccountSignatureProvider.
        :rtype: list[AccountSignatureProviderOption]
        """
        return self._signature_provider_options_metadata

    @signature_provider_options_metadata.setter
    def signature_provider_options_metadata(self, signature_provider_options_metadata):
        """
        Sets the signature_provider_options_metadata of this AccountSignatureProvider.
        

        :param signature_provider_options_metadata: The signature_provider_options_metadata of this AccountSignatureProvider.
        :type: list[AccountSignatureProviderOption]
        """

        self._signature_provider_options_metadata = signature_provider_options_metadata

    @property
    def signature_provider_required_options(self):
        """
        Gets the signature_provider_required_options of this AccountSignatureProvider.
        

        :return: The signature_provider_required_options of this AccountSignatureProvider.
        :rtype: list[SignatureProviderRequiredOption]
        """
        return self._signature_provider_required_options

    @signature_provider_required_options.setter
    def signature_provider_required_options(self, signature_provider_required_options):
        """
        Sets the signature_provider_required_options of this AccountSignatureProvider.
        

        :param signature_provider_required_options: The signature_provider_required_options of this AccountSignatureProvider.
        :type: list[SignatureProviderRequiredOption]
        """

        self._signature_provider_required_options = signature_provider_required_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
