# coding: utf-8

"""
    Docusign eSignature REST API

    The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class AccountSignatureProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_required': 'str',
        'priority': 'str',
        'signature_provider_display_name': 'str',
        'signature_provider_id': 'str',
        'signature_provider_name': 'str',
        'signature_provider_options_metadata': 'list[AccountSignatureProviderOption]',
        'signature_provider_required_options': 'list[SignatureProviderRequiredOption]'
    }

    attribute_map = {
        'is_required': 'isRequired',
        'priority': 'priority',
        'signature_provider_display_name': 'signatureProviderDisplayName',
        'signature_provider_id': 'signatureProviderId',
        'signature_provider_name': 'signatureProviderName',
        'signature_provider_options_metadata': 'signatureProviderOptionsMetadata',
        'signature_provider_required_options': 'signatureProviderRequiredOptions'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AccountSignatureProvider - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_required = None
        self._priority = None
        self._signature_provider_display_name = None
        self._signature_provider_id = None
        self._signature_provider_name = None
        self._signature_provider_options_metadata = None
        self._signature_provider_required_options = None
        self.discriminator = None

        setattr(self, "_{}".format('is_required'), kwargs.get('is_required', None))
        setattr(self, "_{}".format('priority'), kwargs.get('priority', None))
        setattr(self, "_{}".format('signature_provider_display_name'), kwargs.get('signature_provider_display_name', None))
        setattr(self, "_{}".format('signature_provider_id'), kwargs.get('signature_provider_id', None))
        setattr(self, "_{}".format('signature_provider_name'), kwargs.get('signature_provider_name', None))
        setattr(self, "_{}".format('signature_provider_options_metadata'), kwargs.get('signature_provider_options_metadata', None))
        setattr(self, "_{}".format('signature_provider_required_options'), kwargs.get('signature_provider_required_options', None))

    @property
    def is_required(self):
        """Gets the is_required of this AccountSignatureProvider.  # noqa: E501

          # noqa: E501

        :return: The is_required of this AccountSignatureProvider.  # noqa: E501
        :rtype: str
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this AccountSignatureProvider.

          # noqa: E501

        :param is_required: The is_required of this AccountSignatureProvider.  # noqa: E501
        :type: str
        """

        self._is_required = is_required

    @property
    def priority(self):
        """Gets the priority of this AccountSignatureProvider.  # noqa: E501

          # noqa: E501

        :return: The priority of this AccountSignatureProvider.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AccountSignatureProvider.

          # noqa: E501

        :param priority: The priority of this AccountSignatureProvider.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def signature_provider_display_name(self):
        """Gets the signature_provider_display_name of this AccountSignatureProvider.  # noqa: E501

          # noqa: E501

        :return: The signature_provider_display_name of this AccountSignatureProvider.  # noqa: E501
        :rtype: str
        """
        return self._signature_provider_display_name

    @signature_provider_display_name.setter
    def signature_provider_display_name(self, signature_provider_display_name):
        """Sets the signature_provider_display_name of this AccountSignatureProvider.

          # noqa: E501

        :param signature_provider_display_name: The signature_provider_display_name of this AccountSignatureProvider.  # noqa: E501
        :type: str
        """

        self._signature_provider_display_name = signature_provider_display_name

    @property
    def signature_provider_id(self):
        """Gets the signature_provider_id of this AccountSignatureProvider.  # noqa: E501

          # noqa: E501

        :return: The signature_provider_id of this AccountSignatureProvider.  # noqa: E501
        :rtype: str
        """
        return self._signature_provider_id

    @signature_provider_id.setter
    def signature_provider_id(self, signature_provider_id):
        """Sets the signature_provider_id of this AccountSignatureProvider.

          # noqa: E501

        :param signature_provider_id: The signature_provider_id of this AccountSignatureProvider.  # noqa: E501
        :type: str
        """

        self._signature_provider_id = signature_provider_id

    @property
    def signature_provider_name(self):
        """Gets the signature_provider_name of this AccountSignatureProvider.  # noqa: E501

          # noqa: E501

        :return: The signature_provider_name of this AccountSignatureProvider.  # noqa: E501
        :rtype: str
        """
        return self._signature_provider_name

    @signature_provider_name.setter
    def signature_provider_name(self, signature_provider_name):
        """Sets the signature_provider_name of this AccountSignatureProvider.

          # noqa: E501

        :param signature_provider_name: The signature_provider_name of this AccountSignatureProvider.  # noqa: E501
        :type: str
        """

        self._signature_provider_name = signature_provider_name

    @property
    def signature_provider_options_metadata(self):
        """Gets the signature_provider_options_metadata of this AccountSignatureProvider.  # noqa: E501

          # noqa: E501

        :return: The signature_provider_options_metadata of this AccountSignatureProvider.  # noqa: E501
        :rtype: list[AccountSignatureProviderOption]
        """
        return self._signature_provider_options_metadata

    @signature_provider_options_metadata.setter
    def signature_provider_options_metadata(self, signature_provider_options_metadata):
        """Sets the signature_provider_options_metadata of this AccountSignatureProvider.

          # noqa: E501

        :param signature_provider_options_metadata: The signature_provider_options_metadata of this AccountSignatureProvider.  # noqa: E501
        :type: list[AccountSignatureProviderOption]
        """

        self._signature_provider_options_metadata = signature_provider_options_metadata

    @property
    def signature_provider_required_options(self):
        """Gets the signature_provider_required_options of this AccountSignatureProvider.  # noqa: E501

          # noqa: E501

        :return: The signature_provider_required_options of this AccountSignatureProvider.  # noqa: E501
        :rtype: list[SignatureProviderRequiredOption]
        """
        return self._signature_provider_required_options

    @signature_provider_required_options.setter
    def signature_provider_required_options(self, signature_provider_required_options):
        """Sets the signature_provider_required_options of this AccountSignatureProvider.

          # noqa: E501

        :param signature_provider_required_options: The signature_provider_required_options of this AccountSignatureProvider.  # noqa: E501
        :type: list[SignatureProviderRequiredOption]
        """

        self._signature_provider_required_options = signature_provider_required_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSignatureProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSignatureProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountSignatureProvider):
            return True

        return self.to_dict() != other.to_dict()
