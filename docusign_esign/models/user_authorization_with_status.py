# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class UserAuthorizationWithStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization': 'UserAuthorization',
        'error_message': 'str',
        'success': 'str'
    }

    attribute_map = {
        'authorization': 'authorization',
        'error_message': 'errorMessage',
        'success': 'success'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """UserAuthorizationWithStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorization = None
        self._error_message = None
        self._success = None
        self.discriminator = None

        setattr(self, "_{}".format('authorization'), kwargs.get('authorization', None))
        setattr(self, "_{}".format('error_message'), kwargs.get('error_message', None))
        setattr(self, "_{}".format('success'), kwargs.get('success', None))

    @property
    def authorization(self):
        """Gets the authorization of this UserAuthorizationWithStatus.  # noqa: E501

          # noqa: E501

        :return: The authorization of this UserAuthorizationWithStatus.  # noqa: E501
        :rtype: UserAuthorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this UserAuthorizationWithStatus.

          # noqa: E501

        :param authorization: The authorization of this UserAuthorizationWithStatus.  # noqa: E501
        :type: UserAuthorization
        """

        self._authorization = authorization

    @property
    def error_message(self):
        """Gets the error_message of this UserAuthorizationWithStatus.  # noqa: E501

          # noqa: E501

        :return: The error_message of this UserAuthorizationWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this UserAuthorizationWithStatus.

          # noqa: E501

        :param error_message: The error_message of this UserAuthorizationWithStatus.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def success(self):
        """Gets the success of this UserAuthorizationWithStatus.  # noqa: E501

          # noqa: E501

        :return: The success of this UserAuthorizationWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this UserAuthorizationWithStatus.

          # noqa: E501

        :param success: The success of this UserAuthorizationWithStatus.  # noqa: E501
        :type: str
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAuthorizationWithStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAuthorizationWithStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAuthorizationWithStatus):
            return True

        return self.to_dict() != other.to_dict()
