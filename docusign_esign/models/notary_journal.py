# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NotaryJournal(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_date=None, document_name=None, jurisdiction=None, notary_journal_id=None, notary_journal_meta_data=None, signer_name=None):
        """
        NotaryJournal - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_date': 'str',
            'document_name': 'str',
            'jurisdiction': 'Jurisdiction',
            'notary_journal_id': 'str',
            'notary_journal_meta_data': 'NotaryJournalMetaData',
            'signer_name': 'str'
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'document_name': 'documentName',
            'jurisdiction': 'jurisdiction',
            'notary_journal_id': 'notaryJournalId',
            'notary_journal_meta_data': 'notaryJournalMetaData',
            'signer_name': 'signerName'
        }

        self._created_date = created_date
        self._document_name = document_name
        self._jurisdiction = jurisdiction
        self._notary_journal_id = notary_journal_id
        self._notary_journal_meta_data = notary_journal_meta_data
        self._signer_name = signer_name

    @property
    def created_date(self):
        """
        Gets the created_date of this NotaryJournal.
        

        :return: The created_date of this NotaryJournal.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this NotaryJournal.
        

        :param created_date: The created_date of this NotaryJournal.
        :type: str
        """

        self._created_date = created_date

    @property
    def document_name(self):
        """
        Gets the document_name of this NotaryJournal.
        

        :return: The document_name of this NotaryJournal.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """
        Sets the document_name of this NotaryJournal.
        

        :param document_name: The document_name of this NotaryJournal.
        :type: str
        """

        self._document_name = document_name

    @property
    def jurisdiction(self):
        """
        Gets the jurisdiction of this NotaryJournal.

        :return: The jurisdiction of this NotaryJournal.
        :rtype: Jurisdiction
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """
        Sets the jurisdiction of this NotaryJournal.

        :param jurisdiction: The jurisdiction of this NotaryJournal.
        :type: Jurisdiction
        """

        self._jurisdiction = jurisdiction

    @property
    def notary_journal_id(self):
        """
        Gets the notary_journal_id of this NotaryJournal.
        

        :return: The notary_journal_id of this NotaryJournal.
        :rtype: str
        """
        return self._notary_journal_id

    @notary_journal_id.setter
    def notary_journal_id(self, notary_journal_id):
        """
        Sets the notary_journal_id of this NotaryJournal.
        

        :param notary_journal_id: The notary_journal_id of this NotaryJournal.
        :type: str
        """

        self._notary_journal_id = notary_journal_id

    @property
    def notary_journal_meta_data(self):
        """
        Gets the notary_journal_meta_data of this NotaryJournal.

        :return: The notary_journal_meta_data of this NotaryJournal.
        :rtype: NotaryJournalMetaData
        """
        return self._notary_journal_meta_data

    @notary_journal_meta_data.setter
    def notary_journal_meta_data(self, notary_journal_meta_data):
        """
        Sets the notary_journal_meta_data of this NotaryJournal.

        :param notary_journal_meta_data: The notary_journal_meta_data of this NotaryJournal.
        :type: NotaryJournalMetaData
        """

        self._notary_journal_meta_data = notary_journal_meta_data

    @property
    def signer_name(self):
        """
        Gets the signer_name of this NotaryJournal.
        

        :return: The signer_name of this NotaryJournal.
        :rtype: str
        """
        return self._signer_name

    @signer_name.setter
    def signer_name(self, signer_name):
        """
        Sets the signer_name of this NotaryJournal.
        

        :param signer_name: The signer_name of this NotaryJournal.
        :type: str
        """

        self._signer_name = signer_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
