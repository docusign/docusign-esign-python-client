# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class NotaryJournal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'str',
        'document_name': 'str',
        'jurisdiction': 'Jurisdiction',
        'notary_journal_id': 'str',
        'notary_journal_meta_data': 'NotaryJournalMetaData',
        'signer_name': 'str'
    }

    attribute_map = {
        'created_date': 'createdDate',
        'document_name': 'documentName',
        'jurisdiction': 'jurisdiction',
        'notary_journal_id': 'notaryJournalId',
        'notary_journal_meta_data': 'notaryJournalMetaData',
        'signer_name': 'signerName'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """NotaryJournal - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_date = None
        self._document_name = None
        self._jurisdiction = None
        self._notary_journal_id = None
        self._notary_journal_meta_data = None
        self._signer_name = None
        self.discriminator = None

        setattr(self, "_{}".format('created_date'), kwargs.get('created_date', None))
        setattr(self, "_{}".format('document_name'), kwargs.get('document_name', None))
        setattr(self, "_{}".format('jurisdiction'), kwargs.get('jurisdiction', None))
        setattr(self, "_{}".format('notary_journal_id'), kwargs.get('notary_journal_id', None))
        setattr(self, "_{}".format('notary_journal_meta_data'), kwargs.get('notary_journal_meta_data', None))
        setattr(self, "_{}".format('signer_name'), kwargs.get('signer_name', None))

    @property
    def created_date(self):
        """Gets the created_date of this NotaryJournal.  # noqa: E501

          # noqa: E501

        :return: The created_date of this NotaryJournal.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this NotaryJournal.

          # noqa: E501

        :param created_date: The created_date of this NotaryJournal.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def document_name(self):
        """Gets the document_name of this NotaryJournal.  # noqa: E501

          # noqa: E501

        :return: The document_name of this NotaryJournal.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this NotaryJournal.

          # noqa: E501

        :param document_name: The document_name of this NotaryJournal.  # noqa: E501
        :type: str
        """

        self._document_name = document_name

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this NotaryJournal.  # noqa: E501

        The notary's jurisdiction.   # noqa: E501

        :return: The jurisdiction of this NotaryJournal.  # noqa: E501
        :rtype: Jurisdiction
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this NotaryJournal.

        The notary's jurisdiction.   # noqa: E501

        :param jurisdiction: The jurisdiction of this NotaryJournal.  # noqa: E501
        :type: Jurisdiction
        """

        self._jurisdiction = jurisdiction

    @property
    def notary_journal_id(self):
        """Gets the notary_journal_id of this NotaryJournal.  # noqa: E501

          # noqa: E501

        :return: The notary_journal_id of this NotaryJournal.  # noqa: E501
        :rtype: str
        """
        return self._notary_journal_id

    @notary_journal_id.setter
    def notary_journal_id(self, notary_journal_id):
        """Sets the notary_journal_id of this NotaryJournal.

          # noqa: E501

        :param notary_journal_id: The notary_journal_id of this NotaryJournal.  # noqa: E501
        :type: str
        """

        self._notary_journal_id = notary_journal_id

    @property
    def notary_journal_meta_data(self):
        """Gets the notary_journal_meta_data of this NotaryJournal.  # noqa: E501

        Additional journal data such as the witness list and signature image.  # noqa: E501

        :return: The notary_journal_meta_data of this NotaryJournal.  # noqa: E501
        :rtype: NotaryJournalMetaData
        """
        return self._notary_journal_meta_data

    @notary_journal_meta_data.setter
    def notary_journal_meta_data(self, notary_journal_meta_data):
        """Sets the notary_journal_meta_data of this NotaryJournal.

        Additional journal data such as the witness list and signature image.  # noqa: E501

        :param notary_journal_meta_data: The notary_journal_meta_data of this NotaryJournal.  # noqa: E501
        :type: NotaryJournalMetaData
        """

        self._notary_journal_meta_data = notary_journal_meta_data

    @property
    def signer_name(self):
        """Gets the signer_name of this NotaryJournal.  # noqa: E501

          # noqa: E501

        :return: The signer_name of this NotaryJournal.  # noqa: E501
        :rtype: str
        """
        return self._signer_name

    @signer_name.setter
    def signer_name(self, signer_name):
        """Sets the signer_name of this NotaryJournal.

          # noqa: E501

        :param signer_name: The signer_name of this NotaryJournal.  # noqa: E501
        :type: str
        """

        self._signer_name = signer_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotaryJournal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotaryJournal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotaryJournal):
            return True

        return self.to_dict() != other.to_dict()
