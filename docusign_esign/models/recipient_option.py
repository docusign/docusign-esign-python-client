# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecipientOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'name': 'str',
        'recipient_label': 'str',
        'role_name': 'str',
        'signing_group_id': 'str'
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'recipient_label': 'recipientLabel',
        'role_name': 'roleName',
        'signing_group_id': 'signingGroupId'
    }

    def __init__(self, email=None, name=None, recipient_label=None, role_name=None, signing_group_id=None):  # noqa: E501
        """RecipientOption - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._name = None
        self._recipient_label = None
        self._role_name = None
        self._signing_group_id = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if recipient_label is not None:
            self.recipient_label = recipient_label
        if role_name is not None:
            self.role_name = role_name
        if signing_group_id is not None:
            self.signing_group_id = signing_group_id

    @property
    def email(self):
        """Gets the email of this RecipientOption.  # noqa: E501

          # noqa: E501

        :return: The email of this RecipientOption.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RecipientOption.

          # noqa: E501

        :param email: The email of this RecipientOption.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this RecipientOption.  # noqa: E501

          # noqa: E501

        :return: The name of this RecipientOption.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecipientOption.

          # noqa: E501

        :param name: The name of this RecipientOption.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def recipient_label(self):
        """Gets the recipient_label of this RecipientOption.  # noqa: E501

          # noqa: E501

        :return: The recipient_label of this RecipientOption.  # noqa: E501
        :rtype: str
        """
        return self._recipient_label

    @recipient_label.setter
    def recipient_label(self, recipient_label):
        """Sets the recipient_label of this RecipientOption.

          # noqa: E501

        :param recipient_label: The recipient_label of this RecipientOption.  # noqa: E501
        :type: str
        """

        self._recipient_label = recipient_label

    @property
    def role_name(self):
        """Gets the role_name of this RecipientOption.  # noqa: E501

        Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.  # noqa: E501

        :return: The role_name of this RecipientOption.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this RecipientOption.

        Optional element. Specifies the role name associated with the recipient.<br/><br/>This is required when working with template recipients.  # noqa: E501

        :param role_name: The role_name of this RecipientOption.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def signing_group_id(self):
        """Gets the signing_group_id of this RecipientOption.  # noqa: E501

        When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).  # noqa: E501

        :return: The signing_group_id of this RecipientOption.  # noqa: E501
        :rtype: str
        """
        return self._signing_group_id

    @signing_group_id.setter
    def signing_group_id(self, signing_group_id):
        """Sets the signing_group_id of this RecipientOption.

        When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).  # noqa: E501

        :param signing_group_id: The signing_group_id of this RecipientOption.  # noqa: E501
        :type: str
        """

        self._signing_group_id = signing_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecipientOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipientOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
