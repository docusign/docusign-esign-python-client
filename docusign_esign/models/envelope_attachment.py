# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvelopeAttachment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_control=None, attachment_id=None, attachment_type=None, error_details=None, label=None, name=None):
        """
        EnvelopeAttachment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_control': 'str',
            'attachment_id': 'str',
            'attachment_type': 'str',
            'error_details': 'ErrorDetails',
            'label': 'str',
            'name': 'str'
        }

        self.attribute_map = {
            'access_control': 'accessControl',
            'attachment_id': 'attachmentId',
            'attachment_type': 'attachmentType',
            'error_details': 'errorDetails',
            'label': 'label',
            'name': 'name'
        }

        self._access_control = access_control
        self._attachment_id = attachment_id
        self._attachment_type = attachment_type
        self._error_details = error_details
        self._label = label
        self._name = name

    @property
    def access_control(self):
        """
        Gets the access_control of this EnvelopeAttachment.
        

        :return: The access_control of this EnvelopeAttachment.
        :rtype: str
        """
        return self._access_control

    @access_control.setter
    def access_control(self, access_control):
        """
        Sets the access_control of this EnvelopeAttachment.
        

        :param access_control: The access_control of this EnvelopeAttachment.
        :type: str
        """

        self._access_control = access_control

    @property
    def attachment_id(self):
        """
        Gets the attachment_id of this EnvelopeAttachment.
        

        :return: The attachment_id of this EnvelopeAttachment.
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """
        Sets the attachment_id of this EnvelopeAttachment.
        

        :param attachment_id: The attachment_id of this EnvelopeAttachment.
        :type: str
        """

        self._attachment_id = attachment_id

    @property
    def attachment_type(self):
        """
        Gets the attachment_type of this EnvelopeAttachment.
        

        :return: The attachment_type of this EnvelopeAttachment.
        :rtype: str
        """
        return self._attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):
        """
        Sets the attachment_type of this EnvelopeAttachment.
        

        :param attachment_type: The attachment_type of this EnvelopeAttachment.
        :type: str
        """

        self._attachment_type = attachment_type

    @property
    def error_details(self):
        """
        Gets the error_details of this EnvelopeAttachment.

        :return: The error_details of this EnvelopeAttachment.
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """
        Sets the error_details of this EnvelopeAttachment.

        :param error_details: The error_details of this EnvelopeAttachment.
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def label(self):
        """
        Gets the label of this EnvelopeAttachment.
        

        :return: The label of this EnvelopeAttachment.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this EnvelopeAttachment.
        

        :param label: The label of this EnvelopeAttachment.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this EnvelopeAttachment.
        

        :return: The name of this EnvelopeAttachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnvelopeAttachment.
        

        :param name: The name of this EnvelopeAttachment.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
