# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SignerEmailNotifications(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, agent_notification=None, carbon_copy_notification=None, certified_delivery_notification=None, comments_only_private_and_mention=None, comments_receive_all=None, document_markup_activation=None, envelope_activation=None, envelope_complete=None, envelope_corrected=None, envelope_declined=None, envelope_voided=None, fax_received=None, offline_signing_failed=None, purge_documents=None, reassigned_signer=None, when_signing_group_member=None):
        """
        SignerEmailNotifications - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'agent_notification': 'str',
            'carbon_copy_notification': 'str',
            'certified_delivery_notification': 'str',
            'comments_only_private_and_mention': 'str',
            'comments_receive_all': 'str',
            'document_markup_activation': 'str',
            'envelope_activation': 'str',
            'envelope_complete': 'str',
            'envelope_corrected': 'str',
            'envelope_declined': 'str',
            'envelope_voided': 'str',
            'fax_received': 'str',
            'offline_signing_failed': 'str',
            'purge_documents': 'str',
            'reassigned_signer': 'str',
            'when_signing_group_member': 'str'
        }

        self.attribute_map = {
            'agent_notification': 'agentNotification',
            'carbon_copy_notification': 'carbonCopyNotification',
            'certified_delivery_notification': 'certifiedDeliveryNotification',
            'comments_only_private_and_mention': 'commentsOnlyPrivateAndMention',
            'comments_receive_all': 'commentsReceiveAll',
            'document_markup_activation': 'documentMarkupActivation',
            'envelope_activation': 'envelopeActivation',
            'envelope_complete': 'envelopeComplete',
            'envelope_corrected': 'envelopeCorrected',
            'envelope_declined': 'envelopeDeclined',
            'envelope_voided': 'envelopeVoided',
            'fax_received': 'faxReceived',
            'offline_signing_failed': 'offlineSigningFailed',
            'purge_documents': 'purgeDocuments',
            'reassigned_signer': 'reassignedSigner',
            'when_signing_group_member': 'whenSigningGroupMember'
        }

        self._agent_notification = agent_notification
        self._carbon_copy_notification = carbon_copy_notification
        self._certified_delivery_notification = certified_delivery_notification
        self._comments_only_private_and_mention = comments_only_private_and_mention
        self._comments_receive_all = comments_receive_all
        self._document_markup_activation = document_markup_activation
        self._envelope_activation = envelope_activation
        self._envelope_complete = envelope_complete
        self._envelope_corrected = envelope_corrected
        self._envelope_declined = envelope_declined
        self._envelope_voided = envelope_voided
        self._fax_received = fax_received
        self._offline_signing_failed = offline_signing_failed
        self._purge_documents = purge_documents
        self._reassigned_signer = reassigned_signer
        self._when_signing_group_member = when_signing_group_member

    @property
    def agent_notification(self):
        """
        Gets the agent_notification of this SignerEmailNotifications.
        When set to **true**, the user receives agent notification emails.

        :return: The agent_notification of this SignerEmailNotifications.
        :rtype: str
        """
        return self._agent_notification

    @agent_notification.setter
    def agent_notification(self, agent_notification):
        """
        Sets the agent_notification of this SignerEmailNotifications.
        When set to **true**, the user receives agent notification emails.

        :param agent_notification: The agent_notification of this SignerEmailNotifications.
        :type: str
        """

        self._agent_notification = agent_notification

    @property
    def carbon_copy_notification(self):
        """
        Gets the carbon_copy_notification of this SignerEmailNotifications.
        When set to **true**, the user receives notifications of carbon copy deliveries.

        :return: The carbon_copy_notification of this SignerEmailNotifications.
        :rtype: str
        """
        return self._carbon_copy_notification

    @carbon_copy_notification.setter
    def carbon_copy_notification(self, carbon_copy_notification):
        """
        Sets the carbon_copy_notification of this SignerEmailNotifications.
        When set to **true**, the user receives notifications of carbon copy deliveries.

        :param carbon_copy_notification: The carbon_copy_notification of this SignerEmailNotifications.
        :type: str
        """

        self._carbon_copy_notification = carbon_copy_notification

    @property
    def certified_delivery_notification(self):
        """
        Gets the certified_delivery_notification of this SignerEmailNotifications.
        When set to **true**, the user receives notifications of certified deliveries.

        :return: The certified_delivery_notification of this SignerEmailNotifications.
        :rtype: str
        """
        return self._certified_delivery_notification

    @certified_delivery_notification.setter
    def certified_delivery_notification(self, certified_delivery_notification):
        """
        Sets the certified_delivery_notification of this SignerEmailNotifications.
        When set to **true**, the user receives notifications of certified deliveries.

        :param certified_delivery_notification: The certified_delivery_notification of this SignerEmailNotifications.
        :type: str
        """

        self._certified_delivery_notification = certified_delivery_notification

    @property
    def comments_only_private_and_mention(self):
        """
        Gets the comments_only_private_and_mention of this SignerEmailNotifications.
        

        :return: The comments_only_private_and_mention of this SignerEmailNotifications.
        :rtype: str
        """
        return self._comments_only_private_and_mention

    @comments_only_private_and_mention.setter
    def comments_only_private_and_mention(self, comments_only_private_and_mention):
        """
        Sets the comments_only_private_and_mention of this SignerEmailNotifications.
        

        :param comments_only_private_and_mention: The comments_only_private_and_mention of this SignerEmailNotifications.
        :type: str
        """

        self._comments_only_private_and_mention = comments_only_private_and_mention

    @property
    def comments_receive_all(self):
        """
        Gets the comments_receive_all of this SignerEmailNotifications.
        

        :return: The comments_receive_all of this SignerEmailNotifications.
        :rtype: str
        """
        return self._comments_receive_all

    @comments_receive_all.setter
    def comments_receive_all(self, comments_receive_all):
        """
        Sets the comments_receive_all of this SignerEmailNotifications.
        

        :param comments_receive_all: The comments_receive_all of this SignerEmailNotifications.
        :type: str
        """

        self._comments_receive_all = comments_receive_all

    @property
    def document_markup_activation(self):
        """
        Gets the document_markup_activation of this SignerEmailNotifications.
        When set to **true**, the user receives notification that document markup has been activated.

        :return: The document_markup_activation of this SignerEmailNotifications.
        :rtype: str
        """
        return self._document_markup_activation

    @document_markup_activation.setter
    def document_markup_activation(self, document_markup_activation):
        """
        Sets the document_markup_activation of this SignerEmailNotifications.
        When set to **true**, the user receives notification that document markup has been activated.

        :param document_markup_activation: The document_markup_activation of this SignerEmailNotifications.
        :type: str
        """

        self._document_markup_activation = document_markup_activation

    @property
    def envelope_activation(self):
        """
        Gets the envelope_activation of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been activated.

        :return: The envelope_activation of this SignerEmailNotifications.
        :rtype: str
        """
        return self._envelope_activation

    @envelope_activation.setter
    def envelope_activation(self, envelope_activation):
        """
        Sets the envelope_activation of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been activated.

        :param envelope_activation: The envelope_activation of this SignerEmailNotifications.
        :type: str
        """

        self._envelope_activation = envelope_activation

    @property
    def envelope_complete(self):
        """
        Gets the envelope_complete of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been completed.

        :return: The envelope_complete of this SignerEmailNotifications.
        :rtype: str
        """
        return self._envelope_complete

    @envelope_complete.setter
    def envelope_complete(self, envelope_complete):
        """
        Sets the envelope_complete of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been completed.

        :param envelope_complete: The envelope_complete of this SignerEmailNotifications.
        :type: str
        """

        self._envelope_complete = envelope_complete

    @property
    def envelope_corrected(self):
        """
        Gets the envelope_corrected of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been corrected.

        :return: The envelope_corrected of this SignerEmailNotifications.
        :rtype: str
        """
        return self._envelope_corrected

    @envelope_corrected.setter
    def envelope_corrected(self, envelope_corrected):
        """
        Sets the envelope_corrected of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been corrected.

        :param envelope_corrected: The envelope_corrected of this SignerEmailNotifications.
        :type: str
        """

        self._envelope_corrected = envelope_corrected

    @property
    def envelope_declined(self):
        """
        Gets the envelope_declined of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been declined.

        :return: The envelope_declined of this SignerEmailNotifications.
        :rtype: str
        """
        return self._envelope_declined

    @envelope_declined.setter
    def envelope_declined(self, envelope_declined):
        """
        Sets the envelope_declined of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been declined.

        :param envelope_declined: The envelope_declined of this SignerEmailNotifications.
        :type: str
        """

        self._envelope_declined = envelope_declined

    @property
    def envelope_voided(self):
        """
        Gets the envelope_voided of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been voided.

        :return: The envelope_voided of this SignerEmailNotifications.
        :rtype: str
        """
        return self._envelope_voided

    @envelope_voided.setter
    def envelope_voided(self, envelope_voided):
        """
        Sets the envelope_voided of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been voided.

        :param envelope_voided: The envelope_voided of this SignerEmailNotifications.
        :type: str
        """

        self._envelope_voided = envelope_voided

    @property
    def fax_received(self):
        """
        Gets the fax_received of this SignerEmailNotifications.
        Reserved:

        :return: The fax_received of this SignerEmailNotifications.
        :rtype: str
        """
        return self._fax_received

    @fax_received.setter
    def fax_received(self, fax_received):
        """
        Sets the fax_received of this SignerEmailNotifications.
        Reserved:

        :param fax_received: The fax_received of this SignerEmailNotifications.
        :type: str
        """

        self._fax_received = fax_received

    @property
    def offline_signing_failed(self):
        """
        Gets the offline_signing_failed of this SignerEmailNotifications.
        When set to **true**, the user receives notification if the offline signing failed.

        :return: The offline_signing_failed of this SignerEmailNotifications.
        :rtype: str
        """
        return self._offline_signing_failed

    @offline_signing_failed.setter
    def offline_signing_failed(self, offline_signing_failed):
        """
        Sets the offline_signing_failed of this SignerEmailNotifications.
        When set to **true**, the user receives notification if the offline signing failed.

        :param offline_signing_failed: The offline_signing_failed of this SignerEmailNotifications.
        :type: str
        """

        self._offline_signing_failed = offline_signing_failed

    @property
    def purge_documents(self):
        """
        Gets the purge_documents of this SignerEmailNotifications.
        When set to **true**, the user receives notification of document purges.

        :return: The purge_documents of this SignerEmailNotifications.
        :rtype: str
        """
        return self._purge_documents

    @purge_documents.setter
    def purge_documents(self, purge_documents):
        """
        Sets the purge_documents of this SignerEmailNotifications.
        When set to **true**, the user receives notification of document purges.

        :param purge_documents: The purge_documents of this SignerEmailNotifications.
        :type: str
        """

        self._purge_documents = purge_documents

    @property
    def reassigned_signer(self):
        """
        Gets the reassigned_signer of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been reassigned.

        :return: The reassigned_signer of this SignerEmailNotifications.
        :rtype: str
        """
        return self._reassigned_signer

    @reassigned_signer.setter
    def reassigned_signer(self, reassigned_signer):
        """
        Sets the reassigned_signer of this SignerEmailNotifications.
        When set to **true**, the user receives notification that the envelope has been reassigned.

        :param reassigned_signer: The reassigned_signer of this SignerEmailNotifications.
        :type: str
        """

        self._reassigned_signer = reassigned_signer

    @property
    def when_signing_group_member(self):
        """
        Gets the when_signing_group_member of this SignerEmailNotifications.
        

        :return: The when_signing_group_member of this SignerEmailNotifications.
        :rtype: str
        """
        return self._when_signing_group_member

    @when_signing_group_member.setter
    def when_signing_group_member(self, when_signing_group_member):
        """
        Sets the when_signing_group_member of this SignerEmailNotifications.
        

        :param when_signing_group_member: The when_signing_group_member of this SignerEmailNotifications.
        :type: str
        """

        self._when_signing_group_member = when_signing_group_member

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
