# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RecipientSignatureProvider(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, seal_documents_with_tabs_only=None, seal_name=None, signature_provider_name=None, signature_provider_name_metadata=None, signature_provider_options=None):
        """
        RecipientSignatureProvider - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'seal_documents_with_tabs_only': 'str',
            'seal_name': 'str',
            'signature_provider_name': 'str',
            'signature_provider_name_metadata': 'PropertyMetadata',
            'signature_provider_options': 'RecipientSignatureProviderOptions'
        }

        self.attribute_map = {
            'seal_documents_with_tabs_only': 'sealDocumentsWithTabsOnly',
            'seal_name': 'sealName',
            'signature_provider_name': 'signatureProviderName',
            'signature_provider_name_metadata': 'signatureProviderNameMetadata',
            'signature_provider_options': 'signatureProviderOptions'
        }

        self._seal_documents_with_tabs_only = seal_documents_with_tabs_only
        self._seal_name = seal_name
        self._signature_provider_name = signature_provider_name
        self._signature_provider_name_metadata = signature_provider_name_metadata
        self._signature_provider_options = signature_provider_options

    @property
    def seal_documents_with_tabs_only(self):
        """
        Gets the seal_documents_with_tabs_only of this RecipientSignatureProvider.
        

        :return: The seal_documents_with_tabs_only of this RecipientSignatureProvider.
        :rtype: str
        """
        return self._seal_documents_with_tabs_only

    @seal_documents_with_tabs_only.setter
    def seal_documents_with_tabs_only(self, seal_documents_with_tabs_only):
        """
        Sets the seal_documents_with_tabs_only of this RecipientSignatureProvider.
        

        :param seal_documents_with_tabs_only: The seal_documents_with_tabs_only of this RecipientSignatureProvider.
        :type: str
        """

        self._seal_documents_with_tabs_only = seal_documents_with_tabs_only

    @property
    def seal_name(self):
        """
        Gets the seal_name of this RecipientSignatureProvider.
        

        :return: The seal_name of this RecipientSignatureProvider.
        :rtype: str
        """
        return self._seal_name

    @seal_name.setter
    def seal_name(self, seal_name):
        """
        Sets the seal_name of this RecipientSignatureProvider.
        

        :param seal_name: The seal_name of this RecipientSignatureProvider.
        :type: str
        """

        self._seal_name = seal_name

    @property
    def signature_provider_name(self):
        """
        Gets the signature_provider_name of this RecipientSignatureProvider.
        

        :return: The signature_provider_name of this RecipientSignatureProvider.
        :rtype: str
        """
        return self._signature_provider_name

    @signature_provider_name.setter
    def signature_provider_name(self, signature_provider_name):
        """
        Sets the signature_provider_name of this RecipientSignatureProvider.
        

        :param signature_provider_name: The signature_provider_name of this RecipientSignatureProvider.
        :type: str
        """

        self._signature_provider_name = signature_provider_name

    @property
    def signature_provider_name_metadata(self):
        """
        Gets the signature_provider_name_metadata of this RecipientSignatureProvider.

        :return: The signature_provider_name_metadata of this RecipientSignatureProvider.
        :rtype: PropertyMetadata
        """
        return self._signature_provider_name_metadata

    @signature_provider_name_metadata.setter
    def signature_provider_name_metadata(self, signature_provider_name_metadata):
        """
        Sets the signature_provider_name_metadata of this RecipientSignatureProvider.

        :param signature_provider_name_metadata: The signature_provider_name_metadata of this RecipientSignatureProvider.
        :type: PropertyMetadata
        """

        self._signature_provider_name_metadata = signature_provider_name_metadata

    @property
    def signature_provider_options(self):
        """
        Gets the signature_provider_options of this RecipientSignatureProvider.

        :return: The signature_provider_options of this RecipientSignatureProvider.
        :rtype: RecipientSignatureProviderOptions
        """
        return self._signature_provider_options

    @signature_provider_options.setter
    def signature_provider_options(self, signature_provider_options):
        """
        Sets the signature_provider_options of this RecipientSignatureProvider.

        :param signature_provider_options: The signature_provider_options of this RecipientSignatureProvider.
        :type: RecipientSignatureProviderOptions
        """

        self._signature_provider_options = signature_provider_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
