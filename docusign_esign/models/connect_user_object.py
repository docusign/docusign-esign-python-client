# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConnectUserObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, configurationtype=None, connect_id=None, enabled=None, has_access=None, sender_searchable_items=None):
        """
        ConnectUserObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'configurationtype': 'str',
            'connect_id': 'str',
            'enabled': 'str',
            'has_access': 'str',
            'sender_searchable_items': 'list[str]'
        }

        self.attribute_map = {
            'configurationtype': 'configurationtype',
            'connect_id': 'connectId',
            'enabled': 'enabled',
            'has_access': 'hasAccess',
            'sender_searchable_items': 'senderSearchableItems'
        }

        self._configurationtype = configurationtype
        self._connect_id = connect_id
        self._enabled = enabled
        self._has_access = has_access
        self._sender_searchable_items = sender_searchable_items

    @property
    def configurationtype(self):
        """
        Gets the configurationtype of this ConnectUserObject.
        If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.

        :return: The configurationtype of this ConnectUserObject.
        :rtype: str
        """
        return self._configurationtype

    @configurationtype.setter
    def configurationtype(self, configurationtype):
        """
        Sets the configurationtype of this ConnectUserObject.
        If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.

        :param configurationtype: The configurationtype of this ConnectUserObject.
        :type: str
        """

        self._configurationtype = configurationtype

    @property
    def connect_id(self):
        """
        Gets the connect_id of this ConnectUserObject.
        

        :return: The connect_id of this ConnectUserObject.
        :rtype: str
        """
        return self._connect_id

    @connect_id.setter
    def connect_id(self, connect_id):
        """
        Sets the connect_id of this ConnectUserObject.
        

        :param connect_id: The connect_id of this ConnectUserObject.
        :type: str
        """

        self._connect_id = connect_id

    @property
    def enabled(self):
        """
        Gets the enabled of this ConnectUserObject.
        

        :return: The enabled of this ConnectUserObject.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ConnectUserObject.
        

        :param enabled: The enabled of this ConnectUserObject.
        :type: str
        """

        self._enabled = enabled

    @property
    def has_access(self):
        """
        Gets the has_access of this ConnectUserObject.
        

        :return: The has_access of this ConnectUserObject.
        :rtype: str
        """
        return self._has_access

    @has_access.setter
    def has_access(self, has_access):
        """
        Sets the has_access of this ConnectUserObject.
        

        :param has_access: The has_access of this ConnectUserObject.
        :type: str
        """

        self._has_access = has_access

    @property
    def sender_searchable_items(self):
        """
        Gets the sender_searchable_items of this ConnectUserObject.
        

        :return: The sender_searchable_items of this ConnectUserObject.
        :rtype: list[str]
        """
        return self._sender_searchable_items

    @sender_searchable_items.setter
    def sender_searchable_items(self, sender_searchable_items):
        """
        Sets the sender_searchable_items of this ConnectUserObject.
        

        :param sender_searchable_items: The sender_searchable_items of this ConnectUserObject.
        :type: list[str]
        """

        self._sender_searchable_items = sender_searchable_items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
