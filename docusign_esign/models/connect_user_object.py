# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectUserObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configurationtype': 'str',
        'connect_id': 'str',
        'enabled': 'str',
        'has_access': 'str',
        'sender_searchable_items': 'list[str]'
    }

    attribute_map = {
        'configurationtype': 'configurationtype',
        'connect_id': 'connectId',
        'enabled': 'enabled',
        'has_access': 'hasAccess',
        'sender_searchable_items': 'senderSearchableItems'
    }

    def __init__(self, configurationtype=None, connect_id=None, enabled=None, has_access=None, sender_searchable_items=None):  # noqa: E501
        """ConnectUserObject - a model defined in Swagger"""  # noqa: E501

        self._configurationtype = None
        self._connect_id = None
        self._enabled = None
        self._has_access = None
        self._sender_searchable_items = None
        self.discriminator = None

        if configurationtype is not None:
            self.configurationtype = configurationtype
        if connect_id is not None:
            self.connect_id = connect_id
        if enabled is not None:
            self.enabled = enabled
        if has_access is not None:
            self.has_access = has_access
        if sender_searchable_items is not None:
            self.sender_searchable_items = sender_searchable_items

    @property
    def configurationtype(self):
        """Gets the configurationtype of this ConnectUserObject.  # noqa: E501

        If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.  # noqa: E501

        :return: The configurationtype of this ConnectUserObject.  # noqa: E501
        :rtype: str
        """
        return self._configurationtype

    @configurationtype.setter
    def configurationtype(self, configurationtype):
        """Sets the configurationtype of this ConnectUserObject.

        If merge field's are being used, specifies the type of the merge field. The only  supported value is **salesforce**.  # noqa: E501

        :param configurationtype: The configurationtype of this ConnectUserObject.  # noqa: E501
        :type: str
        """

        self._configurationtype = configurationtype

    @property
    def connect_id(self):
        """Gets the connect_id of this ConnectUserObject.  # noqa: E501

          # noqa: E501

        :return: The connect_id of this ConnectUserObject.  # noqa: E501
        :rtype: str
        """
        return self._connect_id

    @connect_id.setter
    def connect_id(self, connect_id):
        """Sets the connect_id of this ConnectUserObject.

          # noqa: E501

        :param connect_id: The connect_id of this ConnectUserObject.  # noqa: E501
        :type: str
        """

        self._connect_id = connect_id

    @property
    def enabled(self):
        """Gets the enabled of this ConnectUserObject.  # noqa: E501

          # noqa: E501

        :return: The enabled of this ConnectUserObject.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConnectUserObject.

          # noqa: E501

        :param enabled: The enabled of this ConnectUserObject.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def has_access(self):
        """Gets the has_access of this ConnectUserObject.  # noqa: E501

          # noqa: E501

        :return: The has_access of this ConnectUserObject.  # noqa: E501
        :rtype: str
        """
        return self._has_access

    @has_access.setter
    def has_access(self, has_access):
        """Sets the has_access of this ConnectUserObject.

          # noqa: E501

        :param has_access: The has_access of this ConnectUserObject.  # noqa: E501
        :type: str
        """

        self._has_access = has_access

    @property
    def sender_searchable_items(self):
        """Gets the sender_searchable_items of this ConnectUserObject.  # noqa: E501

          # noqa: E501

        :return: The sender_searchable_items of this ConnectUserObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._sender_searchable_items

    @sender_searchable_items.setter
    def sender_searchable_items(self, sender_searchable_items):
        """Sets the sender_searchable_items of this ConnectUserObject.

          # noqa: E501

        :param sender_searchable_items: The sender_searchable_items of this ConnectUserObject.  # noqa: E501
        :type: list[str]
        """

        self._sender_searchable_items = sender_searchable_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectUserObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectUserObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
