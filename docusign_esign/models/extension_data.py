# coding: utf-8

"""
    Docusign eSignature REST API

    The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class ExtensionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_contract': 'str',
        'action_input_key': 'str',
        'action_name': 'str',
        'application_id': 'str',
        'application_name': 'str',
        'connected_fields_data': 'ConnectedData',
        'connection_instances': 'list[ConnectionInstance]',
        'extension_contract': 'str',
        'extension_group_id': 'str',
        'extension_name': 'str',
        'extension_policy': 'str',
        'publisher_name': 'str',
        'required_for_extension': 'str'
    }

    attribute_map = {
        'action_contract': 'actionContract',
        'action_input_key': 'actionInputKey',
        'action_name': 'actionName',
        'application_id': 'applicationId',
        'application_name': 'applicationName',
        'connected_fields_data': 'connectedFieldsData',
        'connection_instances': 'connectionInstances',
        'extension_contract': 'extensionContract',
        'extension_group_id': 'extensionGroupId',
        'extension_name': 'extensionName',
        'extension_policy': 'extensionPolicy',
        'publisher_name': 'publisherName',
        'required_for_extension': 'requiredForExtension'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ExtensionData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action_contract = None
        self._action_input_key = None
        self._action_name = None
        self._application_id = None
        self._application_name = None
        self._connected_fields_data = None
        self._connection_instances = None
        self._extension_contract = None
        self._extension_group_id = None
        self._extension_name = None
        self._extension_policy = None
        self._publisher_name = None
        self._required_for_extension = None
        self.discriminator = None

        setattr(self, "_{}".format('action_contract'), kwargs.get('action_contract', None))
        setattr(self, "_{}".format('action_input_key'), kwargs.get('action_input_key', None))
        setattr(self, "_{}".format('action_name'), kwargs.get('action_name', None))
        setattr(self, "_{}".format('application_id'), kwargs.get('application_id', None))
        setattr(self, "_{}".format('application_name'), kwargs.get('application_name', None))
        setattr(self, "_{}".format('connected_fields_data'), kwargs.get('connected_fields_data', None))
        setattr(self, "_{}".format('connection_instances'), kwargs.get('connection_instances', None))
        setattr(self, "_{}".format('extension_contract'), kwargs.get('extension_contract', None))
        setattr(self, "_{}".format('extension_group_id'), kwargs.get('extension_group_id', None))
        setattr(self, "_{}".format('extension_name'), kwargs.get('extension_name', None))
        setattr(self, "_{}".format('extension_policy'), kwargs.get('extension_policy', None))
        setattr(self, "_{}".format('publisher_name'), kwargs.get('publisher_name', None))
        setattr(self, "_{}".format('required_for_extension'), kwargs.get('required_for_extension', None))

    @property
    def action_contract(self):
        """Gets the action_contract of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The action_contract of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._action_contract

    @action_contract.setter
    def action_contract(self, action_contract):
        """Sets the action_contract of this ExtensionData.

          # noqa: E501

        :param action_contract: The action_contract of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._action_contract = action_contract

    @property
    def action_input_key(self):
        """Gets the action_input_key of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The action_input_key of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._action_input_key

    @action_input_key.setter
    def action_input_key(self, action_input_key):
        """Sets the action_input_key of this ExtensionData.

          # noqa: E501

        :param action_input_key: The action_input_key of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._action_input_key = action_input_key

    @property
    def action_name(self):
        """Gets the action_name of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The action_name of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this ExtensionData.

          # noqa: E501

        :param action_name: The action_name of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._action_name = action_name

    @property
    def application_id(self):
        """Gets the application_id of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The application_id of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ExtensionData.

          # noqa: E501

        :param application_id: The application_id of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def application_name(self):
        """Gets the application_name of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The application_name of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ExtensionData.

          # noqa: E501

        :param application_name: The application_name of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def connected_fields_data(self):
        """Gets the connected_fields_data of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The connected_fields_data of this ExtensionData.  # noqa: E501
        :rtype: ConnectedData
        """
        return self._connected_fields_data

    @connected_fields_data.setter
    def connected_fields_data(self, connected_fields_data):
        """Sets the connected_fields_data of this ExtensionData.

          # noqa: E501

        :param connected_fields_data: The connected_fields_data of this ExtensionData.  # noqa: E501
        :type: ConnectedData
        """

        self._connected_fields_data = connected_fields_data

    @property
    def connection_instances(self):
        """Gets the connection_instances of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The connection_instances of this ExtensionData.  # noqa: E501
        :rtype: list[ConnectionInstance]
        """
        return self._connection_instances

    @connection_instances.setter
    def connection_instances(self, connection_instances):
        """Sets the connection_instances of this ExtensionData.

          # noqa: E501

        :param connection_instances: The connection_instances of this ExtensionData.  # noqa: E501
        :type: list[ConnectionInstance]
        """

        self._connection_instances = connection_instances

    @property
    def extension_contract(self):
        """Gets the extension_contract of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The extension_contract of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._extension_contract

    @extension_contract.setter
    def extension_contract(self, extension_contract):
        """Sets the extension_contract of this ExtensionData.

          # noqa: E501

        :param extension_contract: The extension_contract of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._extension_contract = extension_contract

    @property
    def extension_group_id(self):
        """Gets the extension_group_id of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The extension_group_id of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._extension_group_id

    @extension_group_id.setter
    def extension_group_id(self, extension_group_id):
        """Sets the extension_group_id of this ExtensionData.

          # noqa: E501

        :param extension_group_id: The extension_group_id of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._extension_group_id = extension_group_id

    @property
    def extension_name(self):
        """Gets the extension_name of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The extension_name of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._extension_name

    @extension_name.setter
    def extension_name(self, extension_name):
        """Sets the extension_name of this ExtensionData.

          # noqa: E501

        :param extension_name: The extension_name of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._extension_name = extension_name

    @property
    def extension_policy(self):
        """Gets the extension_policy of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The extension_policy of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._extension_policy

    @extension_policy.setter
    def extension_policy(self, extension_policy):
        """Sets the extension_policy of this ExtensionData.

          # noqa: E501

        :param extension_policy: The extension_policy of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._extension_policy = extension_policy

    @property
    def publisher_name(self):
        """Gets the publisher_name of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The publisher_name of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this ExtensionData.

          # noqa: E501

        :param publisher_name: The publisher_name of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._publisher_name = publisher_name

    @property
    def required_for_extension(self):
        """Gets the required_for_extension of this ExtensionData.  # noqa: E501

          # noqa: E501

        :return: The required_for_extension of this ExtensionData.  # noqa: E501
        :rtype: str
        """
        return self._required_for_extension

    @required_for_extension.setter
    def required_for_extension(self, required_for_extension):
        """Sets the required_for_extension of this ExtensionData.

          # noqa: E501

        :param required_for_extension: The required_for_extension of this ExtensionData.  # noqa: E501
        :type: str
        """

        self._required_for_extension = required_for_extension

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtensionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtensionData):
            return True

        return self.to_dict() != other.to_dict()
