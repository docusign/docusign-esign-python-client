# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class WorkspaceUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_name': 'str',
        'active_since': 'str',
        'created': 'str',
        'created_by_id': 'str',
        'email': 'str',
        'error_details': 'ErrorDetails',
        'invitation_email_blurb': 'str',
        'invitation_email_subject': 'str',
        'last_modified': 'str',
        'last_modified_by_id': 'str',
        'status': 'str',
        'type': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'workspace_id': 'str',
        'workspace_user_base_url': 'str',
        'workspace_user_id': 'str',
        'workspace_user_uri': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_name': 'accountName',
        'active_since': 'activeSince',
        'created': 'created',
        'created_by_id': 'createdById',
        'email': 'email',
        'error_details': 'errorDetails',
        'invitation_email_blurb': 'invitationEmailBlurb',
        'invitation_email_subject': 'invitationEmailSubject',
        'last_modified': 'lastModified',
        'last_modified_by_id': 'lastModifiedById',
        'status': 'status',
        'type': 'type',
        'user_id': 'userId',
        'user_name': 'userName',
        'workspace_id': 'workspaceId',
        'workspace_user_base_url': 'workspaceUserBaseUrl',
        'workspace_user_id': 'workspaceUserId',
        'workspace_user_uri': 'workspaceUserUri'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """WorkspaceUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._account_name = None
        self._active_since = None
        self._created = None
        self._created_by_id = None
        self._email = None
        self._error_details = None
        self._invitation_email_blurb = None
        self._invitation_email_subject = None
        self._last_modified = None
        self._last_modified_by_id = None
        self._status = None
        self._type = None
        self._user_id = None
        self._user_name = None
        self._workspace_id = None
        self._workspace_user_base_url = None
        self._workspace_user_id = None
        self._workspace_user_uri = None
        self.discriminator = None

        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('account_name'), kwargs.get('account_name', None))
        setattr(self, "_{}".format('active_since'), kwargs.get('active_since', None))
        setattr(self, "_{}".format('created'), kwargs.get('created', None))
        setattr(self, "_{}".format('created_by_id'), kwargs.get('created_by_id', None))
        setattr(self, "_{}".format('email'), kwargs.get('email', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('invitation_email_blurb'), kwargs.get('invitation_email_blurb', None))
        setattr(self, "_{}".format('invitation_email_subject'), kwargs.get('invitation_email_subject', None))
        setattr(self, "_{}".format('last_modified'), kwargs.get('last_modified', None))
        setattr(self, "_{}".format('last_modified_by_id'), kwargs.get('last_modified_by_id', None))
        setattr(self, "_{}".format('status'), kwargs.get('status', None))
        setattr(self, "_{}".format('type'), kwargs.get('type', None))
        setattr(self, "_{}".format('user_id'), kwargs.get('user_id', None))
        setattr(self, "_{}".format('user_name'), kwargs.get('user_name', None))
        setattr(self, "_{}".format('workspace_id'), kwargs.get('workspace_id', None))
        setattr(self, "_{}".format('workspace_user_base_url'), kwargs.get('workspace_user_base_url', None))
        setattr(self, "_{}".format('workspace_user_id'), kwargs.get('workspace_user_id', None))
        setattr(self, "_{}".format('workspace_user_uri'), kwargs.get('workspace_user_uri', None))

    @property
    def account_id(self):
        """Gets the account_id of this WorkspaceUser.  # noqa: E501

        The account ID associated with the envelope.  # noqa: E501

        :return: The account_id of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this WorkspaceUser.

        The account ID associated with the envelope.  # noqa: E501

        :param account_id: The account_id of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this WorkspaceUser.  # noqa: E501

        The name of the account that the workspace user belongs to.  # noqa: E501

        :return: The account_name of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this WorkspaceUser.

        The name of the account that the workspace user belongs to.  # noqa: E501

        :param account_name: The account_name of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def active_since(self):
        """Gets the active_since of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The active_since of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._active_since

    @active_since.setter
    def active_since(self, active_since):
        """Sets the active_since of this WorkspaceUser.

          # noqa: E501

        :param active_since: The active_since of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._active_since = active_since

    @property
    def created(self):
        """Gets the created of this WorkspaceUser.  # noqa: E501

        The UTC DateTime when the workspace user was created.  # noqa: E501

        :return: The created of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WorkspaceUser.

        The UTC DateTime when the workspace user was created.  # noqa: E501

        :param created: The created of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def created_by_id(self):
        """Gets the created_by_id of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The created_by_id of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this WorkspaceUser.

          # noqa: E501

        :param created_by_id: The created_by_id of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def email(self):
        """Gets the email of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The email of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this WorkspaceUser.

          # noqa: E501

        :param email: The email of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def error_details(self):
        """Gets the error_details of this WorkspaceUser.  # noqa: E501

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :return: The error_details of this WorkspaceUser.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this WorkspaceUser.

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :param error_details: The error_details of this WorkspaceUser.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def invitation_email_blurb(self):
        """Gets the invitation_email_blurb of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The invitation_email_blurb of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._invitation_email_blurb

    @invitation_email_blurb.setter
    def invitation_email_blurb(self, invitation_email_blurb):
        """Sets the invitation_email_blurb of this WorkspaceUser.

          # noqa: E501

        :param invitation_email_blurb: The invitation_email_blurb of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._invitation_email_blurb = invitation_email_blurb

    @property
    def invitation_email_subject(self):
        """Gets the invitation_email_subject of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The invitation_email_subject of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._invitation_email_subject

    @invitation_email_subject.setter
    def invitation_email_subject(self, invitation_email_subject):
        """Sets the invitation_email_subject of this WorkspaceUser.

          # noqa: E501

        :param invitation_email_subject: The invitation_email_subject of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._invitation_email_subject = invitation_email_subject

    @property
    def last_modified(self):
        """Gets the last_modified of this WorkspaceUser.  # noqa: E501

        Utc date and time the comment was last updated (can only be done by creator.)  # noqa: E501

        :return: The last_modified of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this WorkspaceUser.

        Utc date and time the comment was last updated (can only be done by creator.)  # noqa: E501

        :param last_modified: The last_modified of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def last_modified_by_id(self):
        """Gets the last_modified_by_id of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The last_modified_by_id of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_id

    @last_modified_by_id.setter
    def last_modified_by_id(self, last_modified_by_id):
        """Sets the last_modified_by_id of this WorkspaceUser.

          # noqa: E501

        :param last_modified_by_id: The last_modified_by_id of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._last_modified_by_id = last_modified_by_id

    @property
    def status(self):
        """Gets the status of this WorkspaceUser.  # noqa: E501

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :return: The status of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkspaceUser.

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :param status: The status of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this WorkspaceUser.  # noqa: E501

        Type of the user. Valid values: type_owner, type_participant.  # noqa: E501

        :return: The type of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkspaceUser.

        Type of the user. Valid values: type_owner, type_participant.  # noqa: E501

        :param type: The type of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The user_id of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WorkspaceUser.

          # noqa: E501

        :param user_id: The user_id of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The user_name of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this WorkspaceUser.

          # noqa: E501

        :param user_name: The user_name of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The workspace_id of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceUser.

          # noqa: E501

        :param workspace_id: The workspace_id of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def workspace_user_base_url(self):
        """Gets the workspace_user_base_url of this WorkspaceUser.  # noqa: E501

        The relative URI that may be used to access a workspace user.  # noqa: E501

        :return: The workspace_user_base_url of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._workspace_user_base_url

    @workspace_user_base_url.setter
    def workspace_user_base_url(self, workspace_user_base_url):
        """Sets the workspace_user_base_url of this WorkspaceUser.

        The relative URI that may be used to access a workspace user.  # noqa: E501

        :param workspace_user_base_url: The workspace_user_base_url of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._workspace_user_base_url = workspace_user_base_url

    @property
    def workspace_user_id(self):
        """Gets the workspace_user_id of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The workspace_user_id of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._workspace_user_id

    @workspace_user_id.setter
    def workspace_user_id(self, workspace_user_id):
        """Sets the workspace_user_id of this WorkspaceUser.

          # noqa: E501

        :param workspace_user_id: The workspace_user_id of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._workspace_user_id = workspace_user_id

    @property
    def workspace_user_uri(self):
        """Gets the workspace_user_uri of this WorkspaceUser.  # noqa: E501

          # noqa: E501

        :return: The workspace_user_uri of this WorkspaceUser.  # noqa: E501
        :rtype: str
        """
        return self._workspace_user_uri

    @workspace_user_uri.setter
    def workspace_user_uri(self, workspace_user_uri):
        """Sets the workspace_user_uri of this WorkspaceUser.

          # noqa: E501

        :param workspace_user_uri: The workspace_user_uri of this WorkspaceUser.  # noqa: E501
        :type: str
        """

        self._workspace_user_uri = workspace_user_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkspaceUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceUser):
            return True

        return self.to_dict() != other.to_dict()
