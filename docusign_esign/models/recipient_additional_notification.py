# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecipientAdditionalNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_number': 'RecipientPhoneNumber',
        'secondary_delivery_method': 'str',
        'secondary_delivery_method_metadata': 'PropertyMetadata',
        'secondary_delivery_status': 'str'
    }

    attribute_map = {
        'phone_number': 'phoneNumber',
        'secondary_delivery_method': 'secondaryDeliveryMethod',
        'secondary_delivery_method_metadata': 'secondaryDeliveryMethodMetadata',
        'secondary_delivery_status': 'secondaryDeliveryStatus'
    }

    def __init__(self, phone_number=None, secondary_delivery_method=None, secondary_delivery_method_metadata=None, secondary_delivery_status=None):  # noqa: E501
        """RecipientAdditionalNotification - a model defined in Swagger"""  # noqa: E501

        self._phone_number = None
        self._secondary_delivery_method = None
        self._secondary_delivery_method_metadata = None
        self._secondary_delivery_status = None
        self.discriminator = None

        if phone_number is not None:
            self.phone_number = phone_number
        if secondary_delivery_method is not None:
            self.secondary_delivery_method = secondary_delivery_method
        if secondary_delivery_method_metadata is not None:
            self.secondary_delivery_method_metadata = secondary_delivery_method_metadata
        if secondary_delivery_status is not None:
            self.secondary_delivery_status = secondary_delivery_status

    @property
    def phone_number(self):
        """Gets the phone_number of this RecipientAdditionalNotification.  # noqa: E501


        :return: The phone_number of this RecipientAdditionalNotification.  # noqa: E501
        :rtype: RecipientPhoneNumber
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this RecipientAdditionalNotification.


        :param phone_number: The phone_number of this RecipientAdditionalNotification.  # noqa: E501
        :type: RecipientPhoneNumber
        """

        self._phone_number = phone_number

    @property
    def secondary_delivery_method(self):
        """Gets the secondary_delivery_method of this RecipientAdditionalNotification.  # noqa: E501

          # noqa: E501

        :return: The secondary_delivery_method of this RecipientAdditionalNotification.  # noqa: E501
        :rtype: str
        """
        return self._secondary_delivery_method

    @secondary_delivery_method.setter
    def secondary_delivery_method(self, secondary_delivery_method):
        """Sets the secondary_delivery_method of this RecipientAdditionalNotification.

          # noqa: E501

        :param secondary_delivery_method: The secondary_delivery_method of this RecipientAdditionalNotification.  # noqa: E501
        :type: str
        """

        self._secondary_delivery_method = secondary_delivery_method

    @property
    def secondary_delivery_method_metadata(self):
        """Gets the secondary_delivery_method_metadata of this RecipientAdditionalNotification.  # noqa: E501


        :return: The secondary_delivery_method_metadata of this RecipientAdditionalNotification.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._secondary_delivery_method_metadata

    @secondary_delivery_method_metadata.setter
    def secondary_delivery_method_metadata(self, secondary_delivery_method_metadata):
        """Sets the secondary_delivery_method_metadata of this RecipientAdditionalNotification.


        :param secondary_delivery_method_metadata: The secondary_delivery_method_metadata of this RecipientAdditionalNotification.  # noqa: E501
        :type: PropertyMetadata
        """

        self._secondary_delivery_method_metadata = secondary_delivery_method_metadata

    @property
    def secondary_delivery_status(self):
        """Gets the secondary_delivery_status of this RecipientAdditionalNotification.  # noqa: E501

          # noqa: E501

        :return: The secondary_delivery_status of this RecipientAdditionalNotification.  # noqa: E501
        :rtype: str
        """
        return self._secondary_delivery_status

    @secondary_delivery_status.setter
    def secondary_delivery_status(self, secondary_delivery_status):
        """Sets the secondary_delivery_status of this RecipientAdditionalNotification.

          # noqa: E501

        :param secondary_delivery_status: The secondary_delivery_status of this RecipientAdditionalNotification.  # noqa: E501
        :type: str
        """

        self._secondary_delivery_status = secondary_delivery_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecipientAdditionalNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipientAdditionalNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
