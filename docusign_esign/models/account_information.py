# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class AccountInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id_guid': 'str',
        'account_name': 'str',
        'account_settings': 'AccountSettingsInformation',
        'allow_transaction_rooms': 'str',
        'billing_period_days_remaining': 'str',
        'billing_period_end_date': 'str',
        'billing_period_envelopes_allowed': 'str',
        'billing_period_envelopes_sent': 'str',
        'billing_period_start_date': 'str',
        'billing_profile': 'str',
        'brands': 'BrandsResponse',
        'can_upgrade': 'str',
        'connect_permission': 'str',
        'created_date': 'str',
        'currency_code': 'str',
        'current_plan_id': 'str',
        'display_appliance_start_url': 'str',
        'display_appliance_url': 'str',
        'distributor_code': 'str',
        'docu_sign_landing_url': 'str',
        'dss_values': 'dict(str, str)',
        'envelope_sending_blocked': 'str',
        'envelope_unit_price': 'str',
        'external_account_id': 'str',
        'forgotten_password_questions_count': 'str',
        'is_downgrade': 'str',
        'payment_method': 'str',
        'plan_classification': 'str',
        'plan_end_date': 'str',
        'plan_name': 'str',
        'plan_start_date': 'str',
        'recipient_domains': 'list[RecipientDomain]',
        'seats_allowed': 'str',
        'seats_in_use': 'str',
        'status21_cfr_part11': 'str',
        'suspension_date': 'str',
        'suspension_status': 'str',
        'use_display_appliance': 'bool'
    }

    attribute_map = {
        'account_id_guid': 'accountIdGuid',
        'account_name': 'accountName',
        'account_settings': 'accountSettings',
        'allow_transaction_rooms': 'allowTransactionRooms',
        'billing_period_days_remaining': 'billingPeriodDaysRemaining',
        'billing_period_end_date': 'billingPeriodEndDate',
        'billing_period_envelopes_allowed': 'billingPeriodEnvelopesAllowed',
        'billing_period_envelopes_sent': 'billingPeriodEnvelopesSent',
        'billing_period_start_date': 'billingPeriodStartDate',
        'billing_profile': 'billingProfile',
        'brands': 'brands',
        'can_upgrade': 'canUpgrade',
        'connect_permission': 'connectPermission',
        'created_date': 'createdDate',
        'currency_code': 'currencyCode',
        'current_plan_id': 'currentPlanId',
        'display_appliance_start_url': 'displayApplianceStartUrl',
        'display_appliance_url': 'displayApplianceUrl',
        'distributor_code': 'distributorCode',
        'docu_sign_landing_url': 'docuSignLandingUrl',
        'dss_values': 'dssValues',
        'envelope_sending_blocked': 'envelopeSendingBlocked',
        'envelope_unit_price': 'envelopeUnitPrice',
        'external_account_id': 'externalAccountId',
        'forgotten_password_questions_count': 'forgottenPasswordQuestionsCount',
        'is_downgrade': 'isDowngrade',
        'payment_method': 'paymentMethod',
        'plan_classification': 'planClassification',
        'plan_end_date': 'planEndDate',
        'plan_name': 'planName',
        'plan_start_date': 'planStartDate',
        'recipient_domains': 'recipientDomains',
        'seats_allowed': 'seatsAllowed',
        'seats_in_use': 'seatsInUse',
        'status21_cfr_part11': 'status21CFRPart11',
        'suspension_date': 'suspensionDate',
        'suspension_status': 'suspensionStatus',
        'use_display_appliance': 'useDisplayAppliance'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AccountInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id_guid = None
        self._account_name = None
        self._account_settings = None
        self._allow_transaction_rooms = None
        self._billing_period_days_remaining = None
        self._billing_period_end_date = None
        self._billing_period_envelopes_allowed = None
        self._billing_period_envelopes_sent = None
        self._billing_period_start_date = None
        self._billing_profile = None
        self._brands = None
        self._can_upgrade = None
        self._connect_permission = None
        self._created_date = None
        self._currency_code = None
        self._current_plan_id = None
        self._display_appliance_start_url = None
        self._display_appliance_url = None
        self._distributor_code = None
        self._docu_sign_landing_url = None
        self._dss_values = None
        self._envelope_sending_blocked = None
        self._envelope_unit_price = None
        self._external_account_id = None
        self._forgotten_password_questions_count = None
        self._is_downgrade = None
        self._payment_method = None
        self._plan_classification = None
        self._plan_end_date = None
        self._plan_name = None
        self._plan_start_date = None
        self._recipient_domains = None
        self._seats_allowed = None
        self._seats_in_use = None
        self._status21_cfr_part11 = None
        self._suspension_date = None
        self._suspension_status = None
        self._use_display_appliance = None
        self.discriminator = None

        setattr(self, "_{}".format('account_id_guid'), kwargs.get('account_id_guid', None))
        setattr(self, "_{}".format('account_name'), kwargs.get('account_name', None))
        setattr(self, "_{}".format('account_settings'), kwargs.get('account_settings', None))
        setattr(self, "_{}".format('allow_transaction_rooms'), kwargs.get('allow_transaction_rooms', None))
        setattr(self, "_{}".format('billing_period_days_remaining'), kwargs.get('billing_period_days_remaining', None))
        setattr(self, "_{}".format('billing_period_end_date'), kwargs.get('billing_period_end_date', None))
        setattr(self, "_{}".format('billing_period_envelopes_allowed'), kwargs.get('billing_period_envelopes_allowed', None))
        setattr(self, "_{}".format('billing_period_envelopes_sent'), kwargs.get('billing_period_envelopes_sent', None))
        setattr(self, "_{}".format('billing_period_start_date'), kwargs.get('billing_period_start_date', None))
        setattr(self, "_{}".format('billing_profile'), kwargs.get('billing_profile', None))
        setattr(self, "_{}".format('brands'), kwargs.get('brands', None))
        setattr(self, "_{}".format('can_upgrade'), kwargs.get('can_upgrade', None))
        setattr(self, "_{}".format('connect_permission'), kwargs.get('connect_permission', None))
        setattr(self, "_{}".format('created_date'), kwargs.get('created_date', None))
        setattr(self, "_{}".format('currency_code'), kwargs.get('currency_code', None))
        setattr(self, "_{}".format('current_plan_id'), kwargs.get('current_plan_id', None))
        setattr(self, "_{}".format('display_appliance_start_url'), kwargs.get('display_appliance_start_url', None))
        setattr(self, "_{}".format('display_appliance_url'), kwargs.get('display_appliance_url', None))
        setattr(self, "_{}".format('distributor_code'), kwargs.get('distributor_code', None))
        setattr(self, "_{}".format('docu_sign_landing_url'), kwargs.get('docu_sign_landing_url', None))
        setattr(self, "_{}".format('dss_values'), kwargs.get('dss_values', None))
        setattr(self, "_{}".format('envelope_sending_blocked'), kwargs.get('envelope_sending_blocked', None))
        setattr(self, "_{}".format('envelope_unit_price'), kwargs.get('envelope_unit_price', None))
        setattr(self, "_{}".format('external_account_id'), kwargs.get('external_account_id', None))
        setattr(self, "_{}".format('forgotten_password_questions_count'), kwargs.get('forgotten_password_questions_count', None))
        setattr(self, "_{}".format('is_downgrade'), kwargs.get('is_downgrade', None))
        setattr(self, "_{}".format('payment_method'), kwargs.get('payment_method', None))
        setattr(self, "_{}".format('plan_classification'), kwargs.get('plan_classification', None))
        setattr(self, "_{}".format('plan_end_date'), kwargs.get('plan_end_date', None))
        setattr(self, "_{}".format('plan_name'), kwargs.get('plan_name', None))
        setattr(self, "_{}".format('plan_start_date'), kwargs.get('plan_start_date', None))
        setattr(self, "_{}".format('recipient_domains'), kwargs.get('recipient_domains', None))
        setattr(self, "_{}".format('seats_allowed'), kwargs.get('seats_allowed', None))
        setattr(self, "_{}".format('seats_in_use'), kwargs.get('seats_in_use', None))
        setattr(self, "_{}".format('status21_cfr_part11'), kwargs.get('status21_cfr_part11', None))
        setattr(self, "_{}".format('suspension_date'), kwargs.get('suspension_date', None))
        setattr(self, "_{}".format('suspension_status'), kwargs.get('suspension_status', None))
        setattr(self, "_{}".format('use_display_appliance'), kwargs.get('use_display_appliance', None))

    @property
    def account_id_guid(self):
        """Gets the account_id_guid of this AccountInformation.  # noqa: E501

        The GUID associated with the account ID.  # noqa: E501

        :return: The account_id_guid of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._account_id_guid

    @account_id_guid.setter
    def account_id_guid(self, account_id_guid):
        """Sets the account_id_guid of this AccountInformation.

        The GUID associated with the account ID.  # noqa: E501

        :param account_id_guid: The account_id_guid of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._account_id_guid = account_id_guid

    @property
    def account_name(self):
        """Gets the account_name of this AccountInformation.  # noqa: E501

        The name of the current account.  # noqa: E501

        :return: The account_name of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountInformation.

        The name of the current account.  # noqa: E501

        :param account_name: The account_name of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_settings(self):
        """Gets the account_settings of this AccountInformation.  # noqa: E501

        The list of account settings accountsettings that determine the features available for the account. Note that some features are determined by the plan used to create the account and cannot be overridden.    # noqa: E501

        :return: The account_settings of this AccountInformation.  # noqa: E501
        :rtype: AccountSettingsInformation
        """
        return self._account_settings

    @account_settings.setter
    def account_settings(self, account_settings):
        """Sets the account_settings of this AccountInformation.

        The list of account settings accountsettings that determine the features available for the account. Note that some features are determined by the plan used to create the account and cannot be overridden.    # noqa: E501

        :param account_settings: The account_settings of this AccountInformation.  # noqa: E501
        :type: AccountSettingsInformation
        """

        self._account_settings = account_settings

    @property
    def allow_transaction_rooms(self):
        """Gets the allow_transaction_rooms of this AccountInformation.  # noqa: E501

        When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.  # noqa: E501

        :return: The allow_transaction_rooms of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._allow_transaction_rooms

    @allow_transaction_rooms.setter
    def allow_transaction_rooms(self, allow_transaction_rooms):
        """Sets the allow_transaction_rooms of this AccountInformation.

        When set to **true**, the transaction rooms feature exposed through the Workspaces API is enabled.  # noqa: E501

        :param allow_transaction_rooms: The allow_transaction_rooms of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._allow_transaction_rooms = allow_transaction_rooms

    @property
    def billing_period_days_remaining(self):
        """Gets the billing_period_days_remaining of this AccountInformation.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The billing_period_days_remaining of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_days_remaining

    @billing_period_days_remaining.setter
    def billing_period_days_remaining(self, billing_period_days_remaining):
        """Sets the billing_period_days_remaining of this AccountInformation.

        Reserved: TBD  # noqa: E501

        :param billing_period_days_remaining: The billing_period_days_remaining of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._billing_period_days_remaining = billing_period_days_remaining

    @property
    def billing_period_end_date(self):
        """Gets the billing_period_end_date of this AccountInformation.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The billing_period_end_date of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_end_date

    @billing_period_end_date.setter
    def billing_period_end_date(self, billing_period_end_date):
        """Sets the billing_period_end_date of this AccountInformation.

        Reserved: TBD  # noqa: E501

        :param billing_period_end_date: The billing_period_end_date of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._billing_period_end_date = billing_period_end_date

    @property
    def billing_period_envelopes_allowed(self):
        """Gets the billing_period_envelopes_allowed of this AccountInformation.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The billing_period_envelopes_allowed of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_envelopes_allowed

    @billing_period_envelopes_allowed.setter
    def billing_period_envelopes_allowed(self, billing_period_envelopes_allowed):
        """Sets the billing_period_envelopes_allowed of this AccountInformation.

        Reserved: TBD  # noqa: E501

        :param billing_period_envelopes_allowed: The billing_period_envelopes_allowed of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._billing_period_envelopes_allowed = billing_period_envelopes_allowed

    @property
    def billing_period_envelopes_sent(self):
        """Gets the billing_period_envelopes_sent of this AccountInformation.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The billing_period_envelopes_sent of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_envelopes_sent

    @billing_period_envelopes_sent.setter
    def billing_period_envelopes_sent(self, billing_period_envelopes_sent):
        """Sets the billing_period_envelopes_sent of this AccountInformation.

        Reserved: TBD  # noqa: E501

        :param billing_period_envelopes_sent: The billing_period_envelopes_sent of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._billing_period_envelopes_sent = billing_period_envelopes_sent

    @property
    def billing_period_start_date(self):
        """Gets the billing_period_start_date of this AccountInformation.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The billing_period_start_date of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_start_date

    @billing_period_start_date.setter
    def billing_period_start_date(self, billing_period_start_date):
        """Sets the billing_period_start_date of this AccountInformation.

        Reserved: TBD  # noqa: E501

        :param billing_period_start_date: The billing_period_start_date of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._billing_period_start_date = billing_period_start_date

    @property
    def billing_profile(self):
        """Gets the billing_profile of this AccountInformation.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The billing_profile of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._billing_profile

    @billing_profile.setter
    def billing_profile(self, billing_profile):
        """Sets the billing_profile of this AccountInformation.

        Reserved: TBD  # noqa: E501

        :param billing_profile: The billing_profile of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._billing_profile = billing_profile

    @property
    def brands(self):
        """Gets the brands of this AccountInformation.  # noqa: E501


        :return: The brands of this AccountInformation.  # noqa: E501
        :rtype: BrandsResponse
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this AccountInformation.


        :param brands: The brands of this AccountInformation.  # noqa: E501
        :type: BrandsResponse
        """

        self._brands = brands

    @property
    def can_upgrade(self):
        """Gets the can_upgrade of this AccountInformation.  # noqa: E501

        When set to **true**, specifies that you can upgrade the account through the API.  # noqa: E501

        :return: The can_upgrade of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._can_upgrade

    @can_upgrade.setter
    def can_upgrade(self, can_upgrade):
        """Sets the can_upgrade of this AccountInformation.

        When set to **true**, specifies that you can upgrade the account through the API.  # noqa: E501

        :param can_upgrade: The can_upgrade of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._can_upgrade = can_upgrade

    @property
    def connect_permission(self):
        """Gets the connect_permission of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The connect_permission of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._connect_permission

    @connect_permission.setter
    def connect_permission(self, connect_permission):
        """Sets the connect_permission of this AccountInformation.

          # noqa: E501

        :param connect_permission: The connect_permission of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._connect_permission = connect_permission

    @property
    def created_date(self):
        """Gets the created_date of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The created_date of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AccountInformation.

          # noqa: E501

        :param created_date: The created_date of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def currency_code(self):
        """Gets the currency_code of this AccountInformation.  # noqa: E501

        Specifies the ISO currency code for the account.  # noqa: E501

        :return: The currency_code of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AccountInformation.

        Specifies the ISO currency code for the account.  # noqa: E501

        :param currency_code: The currency_code of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def current_plan_id(self):
        """Gets the current_plan_id of this AccountInformation.  # noqa: E501

        Identifies the plan that was used create this account.  # noqa: E501

        :return: The current_plan_id of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._current_plan_id

    @current_plan_id.setter
    def current_plan_id(self, current_plan_id):
        """Sets the current_plan_id of this AccountInformation.

        Identifies the plan that was used create this account.  # noqa: E501

        :param current_plan_id: The current_plan_id of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._current_plan_id = current_plan_id

    @property
    def display_appliance_start_url(self):
        """Gets the display_appliance_start_url of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The display_appliance_start_url of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._display_appliance_start_url

    @display_appliance_start_url.setter
    def display_appliance_start_url(self, display_appliance_start_url):
        """Sets the display_appliance_start_url of this AccountInformation.

          # noqa: E501

        :param display_appliance_start_url: The display_appliance_start_url of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._display_appliance_start_url = display_appliance_start_url

    @property
    def display_appliance_url(self):
        """Gets the display_appliance_url of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The display_appliance_url of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._display_appliance_url

    @display_appliance_url.setter
    def display_appliance_url(self, display_appliance_url):
        """Sets the display_appliance_url of this AccountInformation.

          # noqa: E501

        :param display_appliance_url: The display_appliance_url of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._display_appliance_url = display_appliance_url

    @property
    def distributor_code(self):
        """Gets the distributor_code of this AccountInformation.  # noqa: E501

        The code that identifies the billing plan groups and plans for the new account.  # noqa: E501

        :return: The distributor_code of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._distributor_code

    @distributor_code.setter
    def distributor_code(self, distributor_code):
        """Sets the distributor_code of this AccountInformation.

        The code that identifies the billing plan groups and plans for the new account.  # noqa: E501

        :param distributor_code: The distributor_code of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._distributor_code = distributor_code

    @property
    def docu_sign_landing_url(self):
        """Gets the docu_sign_landing_url of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The docu_sign_landing_url of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._docu_sign_landing_url

    @docu_sign_landing_url.setter
    def docu_sign_landing_url(self, docu_sign_landing_url):
        """Sets the docu_sign_landing_url of this AccountInformation.

          # noqa: E501

        :param docu_sign_landing_url: The docu_sign_landing_url of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._docu_sign_landing_url = docu_sign_landing_url

    @property
    def dss_values(self):
        """Gets the dss_values of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The dss_values of this AccountInformation.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dss_values

    @dss_values.setter
    def dss_values(self, dss_values):
        """Sets the dss_values of this AccountInformation.

          # noqa: E501

        :param dss_values: The dss_values of this AccountInformation.  # noqa: E501
        :type: dict(str, str)
        """

        self._dss_values = dss_values

    @property
    def envelope_sending_blocked(self):
        """Gets the envelope_sending_blocked of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The envelope_sending_blocked of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._envelope_sending_blocked

    @envelope_sending_blocked.setter
    def envelope_sending_blocked(self, envelope_sending_blocked):
        """Sets the envelope_sending_blocked of this AccountInformation.

          # noqa: E501

        :param envelope_sending_blocked: The envelope_sending_blocked of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._envelope_sending_blocked = envelope_sending_blocked

    @property
    def envelope_unit_price(self):
        """Gets the envelope_unit_price of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The envelope_unit_price of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._envelope_unit_price

    @envelope_unit_price.setter
    def envelope_unit_price(self, envelope_unit_price):
        """Sets the envelope_unit_price of this AccountInformation.

          # noqa: E501

        :param envelope_unit_price: The envelope_unit_price of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._envelope_unit_price = envelope_unit_price

    @property
    def external_account_id(self):
        """Gets the external_account_id of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The external_account_id of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this AccountInformation.

          # noqa: E501

        :param external_account_id: The external_account_id of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._external_account_id = external_account_id

    @property
    def forgotten_password_questions_count(self):
        """Gets the forgotten_password_questions_count of this AccountInformation.  # noqa: E501

         A complex element that contains up to four Question/Answer pairs for forgotten password information for a user.  # noqa: E501

        :return: The forgotten_password_questions_count of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._forgotten_password_questions_count

    @forgotten_password_questions_count.setter
    def forgotten_password_questions_count(self, forgotten_password_questions_count):
        """Sets the forgotten_password_questions_count of this AccountInformation.

         A complex element that contains up to four Question/Answer pairs for forgotten password information for a user.  # noqa: E501

        :param forgotten_password_questions_count: The forgotten_password_questions_count of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._forgotten_password_questions_count = forgotten_password_questions_count

    @property
    def is_downgrade(self):
        """Gets the is_downgrade of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The is_downgrade of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._is_downgrade

    @is_downgrade.setter
    def is_downgrade(self, is_downgrade):
        """Sets the is_downgrade of this AccountInformation.

          # noqa: E501

        :param is_downgrade: The is_downgrade of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._is_downgrade = is_downgrade

    @property
    def payment_method(self):
        """Gets the payment_method of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The payment_method of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this AccountInformation.

          # noqa: E501

        :param payment_method: The payment_method of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def plan_classification(self):
        """Gets the plan_classification of this AccountInformation.  # noqa: E501

        Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.  # noqa: E501

        :return: The plan_classification of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._plan_classification

    @plan_classification.setter
    def plan_classification(self, plan_classification):
        """Sets the plan_classification of this AccountInformation.

        Identifies the type of plan. Examples include Business, Corporate, Enterprise, Free.  # noqa: E501

        :param plan_classification: The plan_classification of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._plan_classification = plan_classification

    @property
    def plan_end_date(self):
        """Gets the plan_end_date of this AccountInformation.  # noqa: E501

        The date that the current plan will end.  # noqa: E501

        :return: The plan_end_date of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._plan_end_date

    @plan_end_date.setter
    def plan_end_date(self, plan_end_date):
        """Sets the plan_end_date of this AccountInformation.

        The date that the current plan will end.  # noqa: E501

        :param plan_end_date: The plan_end_date of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._plan_end_date = plan_end_date

    @property
    def plan_name(self):
        """Gets the plan_name of this AccountInformation.  # noqa: E501

        The name of the Billing Plan.  # noqa: E501

        :return: The plan_name of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this AccountInformation.

        The name of the Billing Plan.  # noqa: E501

        :param plan_name: The plan_name of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._plan_name = plan_name

    @property
    def plan_start_date(self):
        """Gets the plan_start_date of this AccountInformation.  # noqa: E501

        The date that the Account started using the current plan.  # noqa: E501

        :return: The plan_start_date of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._plan_start_date

    @plan_start_date.setter
    def plan_start_date(self, plan_start_date):
        """Sets the plan_start_date of this AccountInformation.

        The date that the Account started using the current plan.  # noqa: E501

        :param plan_start_date: The plan_start_date of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._plan_start_date = plan_start_date

    @property
    def recipient_domains(self):
        """Gets the recipient_domains of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The recipient_domains of this AccountInformation.  # noqa: E501
        :rtype: list[RecipientDomain]
        """
        return self._recipient_domains

    @recipient_domains.setter
    def recipient_domains(self, recipient_domains):
        """Sets the recipient_domains of this AccountInformation.

          # noqa: E501

        :param recipient_domains: The recipient_domains of this AccountInformation.  # noqa: E501
        :type: list[RecipientDomain]
        """

        self._recipient_domains = recipient_domains

    @property
    def seats_allowed(self):
        """Gets the seats_allowed of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The seats_allowed of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._seats_allowed

    @seats_allowed.setter
    def seats_allowed(self, seats_allowed):
        """Sets the seats_allowed of this AccountInformation.

          # noqa: E501

        :param seats_allowed: The seats_allowed of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._seats_allowed = seats_allowed

    @property
    def seats_in_use(self):
        """Gets the seats_in_use of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The seats_in_use of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._seats_in_use

    @seats_in_use.setter
    def seats_in_use(self, seats_in_use):
        """Sets the seats_in_use of this AccountInformation.

          # noqa: E501

        :param seats_in_use: The seats_in_use of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._seats_in_use = seats_in_use

    @property
    def status21_cfr_part11(self):
        """Gets the status21_cfr_part11 of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The status21_cfr_part11 of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._status21_cfr_part11

    @status21_cfr_part11.setter
    def status21_cfr_part11(self, status21_cfr_part11):
        """Sets the status21_cfr_part11 of this AccountInformation.

          # noqa: E501

        :param status21_cfr_part11: The status21_cfr_part11 of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._status21_cfr_part11 = status21_cfr_part11

    @property
    def suspension_date(self):
        """Gets the suspension_date of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The suspension_date of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._suspension_date

    @suspension_date.setter
    def suspension_date(self, suspension_date):
        """Sets the suspension_date of this AccountInformation.

          # noqa: E501

        :param suspension_date: The suspension_date of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._suspension_date = suspension_date

    @property
    def suspension_status(self):
        """Gets the suspension_status of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The suspension_status of this AccountInformation.  # noqa: E501
        :rtype: str
        """
        return self._suspension_status

    @suspension_status.setter
    def suspension_status(self, suspension_status):
        """Sets the suspension_status of this AccountInformation.

          # noqa: E501

        :param suspension_status: The suspension_status of this AccountInformation.  # noqa: E501
        :type: str
        """

        self._suspension_status = suspension_status

    @property
    def use_display_appliance(self):
        """Gets the use_display_appliance of this AccountInformation.  # noqa: E501

          # noqa: E501

        :return: The use_display_appliance of this AccountInformation.  # noqa: E501
        :rtype: bool
        """
        return self._use_display_appliance

    @use_display_appliance.setter
    def use_display_appliance(self, use_display_appliance):
        """Sets the use_display_appliance of this AccountInformation.

          # noqa: E501

        :param use_display_appliance: The use_display_appliance of this AccountInformation.  # noqa: E501
        :type: bool
        """

        self._use_display_appliance = use_display_appliance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountInformation):
            return True

        return self.to_dict() != other.to_dict()
