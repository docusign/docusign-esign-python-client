# coding: utf-8

"""
    Docusign eSignature REST API

    The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class AccountAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'country': 'str',
        'email': 'str',
        'fax': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'postal_code': 'str',
        'state': 'str',
        'supported_countries': 'list[Country]'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'country': 'country',
        'email': 'email',
        'fax': 'fax',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone': 'phone',
        'postal_code': 'postalCode',
        'state': 'state',
        'supported_countries': 'supportedCountries'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AccountAddress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address1 = None
        self._address2 = None
        self._city = None
        self._country = None
        self._email = None
        self._fax = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._postal_code = None
        self._state = None
        self._supported_countries = None
        self.discriminator = None

        setattr(self, "_{}".format('address1'), kwargs.get('address1', None))
        setattr(self, "_{}".format('address2'), kwargs.get('address2', None))
        setattr(self, "_{}".format('city'), kwargs.get('city', None))
        setattr(self, "_{}".format('country'), kwargs.get('country', None))
        setattr(self, "_{}".format('email'), kwargs.get('email', None))
        setattr(self, "_{}".format('fax'), kwargs.get('fax', None))
        setattr(self, "_{}".format('first_name'), kwargs.get('first_name', None))
        setattr(self, "_{}".format('last_name'), kwargs.get('last_name', None))
        setattr(self, "_{}".format('phone'), kwargs.get('phone', None))
        setattr(self, "_{}".format('postal_code'), kwargs.get('postal_code', None))
        setattr(self, "_{}".format('state'), kwargs.get('state', None))
        setattr(self, "_{}".format('supported_countries'), kwargs.get('supported_countries', None))

    @property
    def address1(self):
        """Gets the address1 of this AccountAddress.  # noqa: E501

        First Line of the address. Maximum length: 100 characters.  # noqa: E501

        :return: The address1 of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this AccountAddress.

        First Line of the address. Maximum length: 100 characters.  # noqa: E501

        :param address1: The address1 of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this AccountAddress.  # noqa: E501

        Second Line of the address. Maximum length: 100 characters.  # noqa: E501

        :return: The address2 of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this AccountAddress.

        Second Line of the address. Maximum length: 100 characters.  # noqa: E501

        :param address2: The address2 of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this AccountAddress.  # noqa: E501

        The city value of the address.  # noqa: E501

        :return: The city of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountAddress.

        The city value of the address.  # noqa: E501

        :param city: The city of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this AccountAddress.  # noqa: E501

        Specifies the country associated with the address.  # noqa: E501

        :return: The country of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AccountAddress.

        Specifies the country associated with the address.  # noqa: E501

        :param country: The country of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this AccountAddress.  # noqa: E501

          # noqa: E501

        :return: The email of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountAddress.

          # noqa: E501

        :param email: The email of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this AccountAddress.  # noqa: E501

          # noqa: E501

        :return: The fax of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this AccountAddress.

          # noqa: E501

        :param fax: The fax of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this AccountAddress.  # noqa: E501

        The user's first name.  Maximum Length: 50 characters.  # noqa: E501

        :return: The first_name of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AccountAddress.

        The user's first name.  Maximum Length: 50 characters.  # noqa: E501

        :param first_name: The first_name of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AccountAddress.  # noqa: E501

          # noqa: E501

        :return: The last_name of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AccountAddress.

          # noqa: E501

        :param last_name: The last_name of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this AccountAddress.  # noqa: E501

          # noqa: E501

        :return: The phone of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AccountAddress.

          # noqa: E501

        :param phone: The phone of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this AccountAddress.  # noqa: E501

          # noqa: E501

        :return: The postal_code of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AccountAddress.

          # noqa: E501

        :param postal_code: The postal_code of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this AccountAddress.  # noqa: E501

        The state or province associated with the address.  # noqa: E501

        :return: The state of this AccountAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccountAddress.

        The state or province associated with the address.  # noqa: E501

        :param state: The state of this AccountAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def supported_countries(self):
        """Gets the supported_countries of this AccountAddress.  # noqa: E501

        Contains an array of countries supported by the billing plan.  # noqa: E501

        :return: The supported_countries of this AccountAddress.  # noqa: E501
        :rtype: list[Country]
        """
        return self._supported_countries

    @supported_countries.setter
    def supported_countries(self, supported_countries):
        """Sets the supported_countries of this AccountAddress.

        Contains an array of countries supported by the billing plan.  # noqa: E501

        :param supported_countries: The supported_countries of this AccountAddress.  # noqa: E501
        :type: list[Country]
        """

        self._supported_countries = supported_countries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountAddress):
            return True

        return self.to_dict() != other.to_dict()
