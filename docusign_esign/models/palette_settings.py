# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class PaletteSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'PaletteItemSettings',
        'custom': 'PaletteItemSettings',
        'merge': 'PaletteItemSettings',
        'notary': 'PaletteItemSettings',
        'seals': 'PaletteItemSettings',
        'smart_contracts': 'PaletteItemSettings',
        'smart_sections': 'PaletteItemSettings'
    }

    attribute_map = {
        'annotations': 'annotations',
        'custom': 'custom',
        'merge': 'merge',
        'notary': 'notary',
        'seals': 'seals',
        'smart_contracts': 'smartContracts',
        'smart_sections': 'smartSections'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """PaletteSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._annotations = None
        self._custom = None
        self._merge = None
        self._notary = None
        self._seals = None
        self._smart_contracts = None
        self._smart_sections = None
        self.discriminator = None

        setattr(self, "_{}".format('annotations'), kwargs.get('annotations', None))
        setattr(self, "_{}".format('custom'), kwargs.get('custom', None))
        setattr(self, "_{}".format('merge'), kwargs.get('merge', None))
        setattr(self, "_{}".format('notary'), kwargs.get('notary', None))
        setattr(self, "_{}".format('seals'), kwargs.get('seals', None))
        setattr(self, "_{}".format('smart_contracts'), kwargs.get('smart_contracts', None))
        setattr(self, "_{}".format('smart_sections'), kwargs.get('smart_sections', None))

    @property
    def annotations(self):
        """Gets the annotations of this PaletteSettings.  # noqa: E501

          # noqa: E501

        :return: The annotations of this PaletteSettings.  # noqa: E501
        :rtype: PaletteItemSettings
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this PaletteSettings.

          # noqa: E501

        :param annotations: The annotations of this PaletteSettings.  # noqa: E501
        :type: PaletteItemSettings
        """

        self._annotations = annotations

    @property
    def custom(self):
        """Gets the custom of this PaletteSettings.  # noqa: E501

          # noqa: E501

        :return: The custom of this PaletteSettings.  # noqa: E501
        :rtype: PaletteItemSettings
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this PaletteSettings.

          # noqa: E501

        :param custom: The custom of this PaletteSettings.  # noqa: E501
        :type: PaletteItemSettings
        """

        self._custom = custom

    @property
    def merge(self):
        """Gets the merge of this PaletteSettings.  # noqa: E501

          # noqa: E501

        :return: The merge of this PaletteSettings.  # noqa: E501
        :rtype: PaletteItemSettings
        """
        return self._merge

    @merge.setter
    def merge(self, merge):
        """Sets the merge of this PaletteSettings.

          # noqa: E501

        :param merge: The merge of this PaletteSettings.  # noqa: E501
        :type: PaletteItemSettings
        """

        self._merge = merge

    @property
    def notary(self):
        """Gets the notary of this PaletteSettings.  # noqa: E501

          # noqa: E501

        :return: The notary of this PaletteSettings.  # noqa: E501
        :rtype: PaletteItemSettings
        """
        return self._notary

    @notary.setter
    def notary(self, notary):
        """Sets the notary of this PaletteSettings.

          # noqa: E501

        :param notary: The notary of this PaletteSettings.  # noqa: E501
        :type: PaletteItemSettings
        """

        self._notary = notary

    @property
    def seals(self):
        """Gets the seals of this PaletteSettings.  # noqa: E501

          # noqa: E501

        :return: The seals of this PaletteSettings.  # noqa: E501
        :rtype: PaletteItemSettings
        """
        return self._seals

    @seals.setter
    def seals(self, seals):
        """Sets the seals of this PaletteSettings.

          # noqa: E501

        :param seals: The seals of this PaletteSettings.  # noqa: E501
        :type: PaletteItemSettings
        """

        self._seals = seals

    @property
    def smart_contracts(self):
        """Gets the smart_contracts of this PaletteSettings.  # noqa: E501

          # noqa: E501

        :return: The smart_contracts of this PaletteSettings.  # noqa: E501
        :rtype: PaletteItemSettings
        """
        return self._smart_contracts

    @smart_contracts.setter
    def smart_contracts(self, smart_contracts):
        """Sets the smart_contracts of this PaletteSettings.

          # noqa: E501

        :param smart_contracts: The smart_contracts of this PaletteSettings.  # noqa: E501
        :type: PaletteItemSettings
        """

        self._smart_contracts = smart_contracts

    @property
    def smart_sections(self):
        """Gets the smart_sections of this PaletteSettings.  # noqa: E501

          # noqa: E501

        :return: The smart_sections of this PaletteSettings.  # noqa: E501
        :rtype: PaletteItemSettings
        """
        return self._smart_sections

    @smart_sections.setter
    def smart_sections(self, smart_sections):
        """Sets the smart_sections of this PaletteSettings.

          # noqa: E501

        :param smart_sections: The smart_sections of this PaletteSettings.  # noqa: E501
        :type: PaletteItemSettings
        """

        self._smart_sections = smart_sections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaletteSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaletteSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaletteSettings):
            return True

        return self.to_dict() != other.to_dict()
