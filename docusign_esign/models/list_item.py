# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class ListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'selected': 'str',
        'selected_metadata': 'PropertyMetadata',
        'text': 'str',
        'text_metadata': 'PropertyMetadata',
        'value': 'str',
        'value_metadata': 'PropertyMetadata'
    }

    attribute_map = {
        'selected': 'selected',
        'selected_metadata': 'selectedMetadata',
        'text': 'text',
        'text_metadata': 'textMetadata',
        'value': 'value',
        'value_metadata': 'valueMetadata'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ListItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._selected = None
        self._selected_metadata = None
        self._text = None
        self._text_metadata = None
        self._value = None
        self._value_metadata = None
        self.discriminator = None

        setattr(self, "_{}".format('selected'), kwargs.get('selected', None))
        setattr(self, "_{}".format('selected_metadata'), kwargs.get('selected_metadata', None))
        setattr(self, "_{}".format('text'), kwargs.get('text', None))
        setattr(self, "_{}".format('text_metadata'), kwargs.get('text_metadata', None))
        setattr(self, "_{}".format('value'), kwargs.get('value', None))
        setattr(self, "_{}".format('value_metadata'), kwargs.get('value_metadata', None))

    @property
    def selected(self):
        """Gets the selected of this ListItem.  # noqa: E501

        When set to **true**, indicates that this item is the default selection shown to a signer.   Only one selection can be set as the default.  # noqa: E501

        :return: The selected of this ListItem.  # noqa: E501
        :rtype: str
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this ListItem.

        When set to **true**, indicates that this item is the default selection shown to a signer.   Only one selection can be set as the default.  # noqa: E501

        :param selected: The selected of this ListItem.  # noqa: E501
        :type: str
        """

        self._selected = selected

    @property
    def selected_metadata(self):
        """Gets the selected_metadata of this ListItem.  # noqa: E501

        Metadata that indicates whether the `selected` property is editable.  # noqa: E501

        :return: The selected_metadata of this ListItem.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._selected_metadata

    @selected_metadata.setter
    def selected_metadata(self, selected_metadata):
        """Sets the selected_metadata of this ListItem.

        Metadata that indicates whether the `selected` property is editable.  # noqa: E501

        :param selected_metadata: The selected_metadata of this ListItem.  # noqa: E501
        :type: PropertyMetadata
        """

        self._selected_metadata = selected_metadata

    @property
    def text(self):
        """Gets the text of this ListItem.  # noqa: E501

        Specifies the text that is shown in the dropdown list.   # noqa: E501

        :return: The text of this ListItem.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ListItem.

        Specifies the text that is shown in the dropdown list.   # noqa: E501

        :param text: The text of this ListItem.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def text_metadata(self):
        """Gets the text_metadata of this ListItem.  # noqa: E501

          # noqa: E501

        :return: The text_metadata of this ListItem.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._text_metadata

    @text_metadata.setter
    def text_metadata(self, text_metadata):
        """Sets the text_metadata of this ListItem.

          # noqa: E501

        :param text_metadata: The text_metadata of this ListItem.  # noqa: E501
        :type: PropertyMetadata
        """

        self._text_metadata = text_metadata

    @property
    def value(self):
        """Gets the value of this ListItem.  # noqa: E501

        Specifies the value that is used when the list item is selected.  # noqa: E501

        :return: The value of this ListItem.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ListItem.

        Specifies the value that is used when the list item is selected.  # noqa: E501

        :param value: The value of this ListItem.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_metadata(self):
        """Gets the value_metadata of this ListItem.  # noqa: E501

        Metadata that indicates whether the `value` property is editable.  # noqa: E501

        :return: The value_metadata of this ListItem.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._value_metadata

    @value_metadata.setter
    def value_metadata(self, value_metadata):
        """Sets the value_metadata of this ListItem.

        Metadata that indicates whether the `value` property is editable.  # noqa: E501

        :param value_metadata: The value_metadata of this ListItem.  # noqa: E501
        :type: PropertyMetadata
        """

        self._value_metadata = value_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListItem):
            return True

        return self.to_dict() != other.to_dict()
