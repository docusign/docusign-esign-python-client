# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class UserPasswordInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_password': 'str',
        'email': 'str',
        'forgotten_password_info': 'ForgottenPasswordInformation',
        'new_password': 'str'
    }

    attribute_map = {
        'current_password': 'currentPassword',
        'email': 'email',
        'forgotten_password_info': 'forgottenPasswordInfo',
        'new_password': 'newPassword'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """UserPasswordInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_password = None
        self._email = None
        self._forgotten_password_info = None
        self._new_password = None
        self.discriminator = None

        setattr(self, "_{}".format('current_password'), kwargs.get('current_password', None))
        setattr(self, "_{}".format('email'), kwargs.get('email', None))
        setattr(self, "_{}".format('forgotten_password_info'), kwargs.get('forgotten_password_info', None))
        setattr(self, "_{}".format('new_password'), kwargs.get('new_password', None))

    @property
    def current_password(self):
        """Gets the current_password of this UserPasswordInformation.  # noqa: E501

        The user's current password to be changed.  # noqa: E501

        :return: The current_password of this UserPasswordInformation.  # noqa: E501
        :rtype: str
        """
        return self._current_password

    @current_password.setter
    def current_password(self, current_password):
        """Sets the current_password of this UserPasswordInformation.

        The user's current password to be changed.  # noqa: E501

        :param current_password: The current_password of this UserPasswordInformation.  # noqa: E501
        :type: str
        """

        self._current_password = current_password

    @property
    def email(self):
        """Gets the email of this UserPasswordInformation.  # noqa: E501

        The user's email address for the associated account.  # noqa: E501

        :return: The email of this UserPasswordInformation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserPasswordInformation.

        The user's email address for the associated account.  # noqa: E501

        :param email: The email of this UserPasswordInformation.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def forgotten_password_info(self):
        """Gets the forgotten_password_info of this UserPasswordInformation.  # noqa: E501

        A complex element containing up to four Question/Answer pairs for forgotten password information.  # noqa: E501

        :return: The forgotten_password_info of this UserPasswordInformation.  # noqa: E501
        :rtype: ForgottenPasswordInformation
        """
        return self._forgotten_password_info

    @forgotten_password_info.setter
    def forgotten_password_info(self, forgotten_password_info):
        """Sets the forgotten_password_info of this UserPasswordInformation.

        A complex element containing up to four Question/Answer pairs for forgotten password information.  # noqa: E501

        :param forgotten_password_info: The forgotten_password_info of this UserPasswordInformation.  # noqa: E501
        :type: ForgottenPasswordInformation
        """

        self._forgotten_password_info = forgotten_password_info

    @property
    def new_password(self):
        """Gets the new_password of this UserPasswordInformation.  # noqa: E501

        The user's new password.  # noqa: E501

        :return: The new_password of this UserPasswordInformation.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this UserPasswordInformation.

        The user's new password.  # noqa: E501

        :param new_password: The new_password of this UserPasswordInformation.  # noqa: E501
        :type: str
        """

        self._new_password = new_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPasswordInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPasswordInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserPasswordInformation):
            return True

        return self.to_dict() != other.to_dict()
