# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IdCheckInformationInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_information_input': 'AddressInformationInput',
        'dob_information_input': 'DobInformationInput',
        'ssn4_information_input': 'Ssn4InformationInput',
        'ssn9_information_input': 'Ssn9InformationInput'
    }

    attribute_map = {
        'address_information_input': 'addressInformationInput',
        'dob_information_input': 'dobInformationInput',
        'ssn4_information_input': 'ssn4InformationInput',
        'ssn9_information_input': 'ssn9InformationInput'
    }

    def __init__(self, address_information_input=None, dob_information_input=None, ssn4_information_input=None, ssn9_information_input=None):  # noqa: E501
        """IdCheckInformationInput - a model defined in Swagger"""  # noqa: E501

        self._address_information_input = None
        self._dob_information_input = None
        self._ssn4_information_input = None
        self._ssn9_information_input = None
        self.discriminator = None

        if address_information_input is not None:
            self.address_information_input = address_information_input
        if dob_information_input is not None:
            self.dob_information_input = dob_information_input
        if ssn4_information_input is not None:
            self.ssn4_information_input = ssn4_information_input
        if ssn9_information_input is not None:
            self.ssn9_information_input = ssn9_information_input

    @property
    def address_information_input(self):
        """Gets the address_information_input of this IdCheckInformationInput.  # noqa: E501


        :return: The address_information_input of this IdCheckInformationInput.  # noqa: E501
        :rtype: AddressInformationInput
        """
        return self._address_information_input

    @address_information_input.setter
    def address_information_input(self, address_information_input):
        """Sets the address_information_input of this IdCheckInformationInput.


        :param address_information_input: The address_information_input of this IdCheckInformationInput.  # noqa: E501
        :type: AddressInformationInput
        """

        self._address_information_input = address_information_input

    @property
    def dob_information_input(self):
        """Gets the dob_information_input of this IdCheckInformationInput.  # noqa: E501


        :return: The dob_information_input of this IdCheckInformationInput.  # noqa: E501
        :rtype: DobInformationInput
        """
        return self._dob_information_input

    @dob_information_input.setter
    def dob_information_input(self, dob_information_input):
        """Sets the dob_information_input of this IdCheckInformationInput.


        :param dob_information_input: The dob_information_input of this IdCheckInformationInput.  # noqa: E501
        :type: DobInformationInput
        """

        self._dob_information_input = dob_information_input

    @property
    def ssn4_information_input(self):
        """Gets the ssn4_information_input of this IdCheckInformationInput.  # noqa: E501


        :return: The ssn4_information_input of this IdCheckInformationInput.  # noqa: E501
        :rtype: Ssn4InformationInput
        """
        return self._ssn4_information_input

    @ssn4_information_input.setter
    def ssn4_information_input(self, ssn4_information_input):
        """Sets the ssn4_information_input of this IdCheckInformationInput.


        :param ssn4_information_input: The ssn4_information_input of this IdCheckInformationInput.  # noqa: E501
        :type: Ssn4InformationInput
        """

        self._ssn4_information_input = ssn4_information_input

    @property
    def ssn9_information_input(self):
        """Gets the ssn9_information_input of this IdCheckInformationInput.  # noqa: E501


        :return: The ssn9_information_input of this IdCheckInformationInput.  # noqa: E501
        :rtype: Ssn9InformationInput
        """
        return self._ssn9_information_input

    @ssn9_information_input.setter
    def ssn9_information_input(self, ssn9_information_input):
        """Sets the ssn9_information_input of this IdCheckInformationInput.


        :param ssn9_information_input: The ssn9_information_input of this IdCheckInformationInput.  # noqa: E501
        :type: Ssn9InformationInput
        """

        self._ssn9_information_input = ssn9_information_input

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdCheckInformationInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdCheckInformationInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
