# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class ConnectOAuthConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_server_url': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'scope': 'str'
    }

    attribute_map = {
        'authorization_server_url': 'authorizationServerUrl',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'scope': 'scope'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ConnectOAuthConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorization_server_url = None
        self._client_id = None
        self._client_secret = None
        self._scope = None
        self.discriminator = None

        setattr(self, "_{}".format('authorization_server_url'), kwargs.get('authorization_server_url', None))
        setattr(self, "_{}".format('client_id'), kwargs.get('client_id', None))
        setattr(self, "_{}".format('client_secret'), kwargs.get('client_secret', None))
        setattr(self, "_{}".format('scope'), kwargs.get('scope', None))

    @property
    def authorization_server_url(self):
        """Gets the authorization_server_url of this ConnectOAuthConfig.  # noqa: E501

          # noqa: E501

        :return: The authorization_server_url of this ConnectOAuthConfig.  # noqa: E501
        :rtype: str
        """
        return self._authorization_server_url

    @authorization_server_url.setter
    def authorization_server_url(self, authorization_server_url):
        """Sets the authorization_server_url of this ConnectOAuthConfig.

          # noqa: E501

        :param authorization_server_url: The authorization_server_url of this ConnectOAuthConfig.  # noqa: E501
        :type: str
        """

        self._authorization_server_url = authorization_server_url

    @property
    def client_id(self):
        """Gets the client_id of this ConnectOAuthConfig.  # noqa: E501

          # noqa: E501

        :return: The client_id of this ConnectOAuthConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ConnectOAuthConfig.

          # noqa: E501

        :param client_id: The client_id of this ConnectOAuthConfig.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ConnectOAuthConfig.  # noqa: E501

          # noqa: E501

        :return: The client_secret of this ConnectOAuthConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ConnectOAuthConfig.

          # noqa: E501

        :param client_secret: The client_secret of this ConnectOAuthConfig.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def scope(self):
        """Gets the scope of this ConnectOAuthConfig.  # noqa: E501

          # noqa: E501

        :return: The scope of this ConnectOAuthConfig.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ConnectOAuthConfig.

          # noqa: E501

        :param scope: The scope of this ConnectOAuthConfig.  # noqa: E501
        :type: str
        """

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectOAuthConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectOAuthConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectOAuthConfig):
            return True

        return self.to_dict() != other.to_dict()
