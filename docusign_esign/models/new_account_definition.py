# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class NewAccountDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'account_settings': 'AccountSettingsInformation',
        'address_information': 'AccountAddress',
        'credit_card_information': 'CreditCardInformation',
        'direct_debit_processor_information': 'DirectDebitProcessorInformation',
        'distributor_code': 'str',
        'distributor_password': 'str',
        'enable_pre_auth': 'str',
        'envelope_partition_id': 'str',
        'initial_user': 'UserInformation',
        'payment_method': 'str',
        'payment_processor': 'str',
        'payment_processor_information': 'PaymentProcessorInformation',
        'plan_information': 'PlanInformation',
        'process_payment': 'str',
        'referral_information': 'ReferralInformation',
        'social_account_information': 'SocialAccountInformation',
        'tax_exempt_id': 'str'
    }

    attribute_map = {
        'account_name': 'accountName',
        'account_settings': 'accountSettings',
        'address_information': 'addressInformation',
        'credit_card_information': 'creditCardInformation',
        'direct_debit_processor_information': 'directDebitProcessorInformation',
        'distributor_code': 'distributorCode',
        'distributor_password': 'distributorPassword',
        'enable_pre_auth': 'enablePreAuth',
        'envelope_partition_id': 'envelopePartitionId',
        'initial_user': 'initialUser',
        'payment_method': 'paymentMethod',
        'payment_processor': 'paymentProcessor',
        'payment_processor_information': 'paymentProcessorInformation',
        'plan_information': 'planInformation',
        'process_payment': 'processPayment',
        'referral_information': 'referralInformation',
        'social_account_information': 'socialAccountInformation',
        'tax_exempt_id': 'taxExemptId'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """NewAccountDefinition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_name = None
        self._account_settings = None
        self._address_information = None
        self._credit_card_information = None
        self._direct_debit_processor_information = None
        self._distributor_code = None
        self._distributor_password = None
        self._enable_pre_auth = None
        self._envelope_partition_id = None
        self._initial_user = None
        self._payment_method = None
        self._payment_processor = None
        self._payment_processor_information = None
        self._plan_information = None
        self._process_payment = None
        self._referral_information = None
        self._social_account_information = None
        self._tax_exempt_id = None
        self.discriminator = None

        setattr(self, "_{}".format('account_name'), kwargs.get('account_name', None))
        setattr(self, "_{}".format('account_settings'), kwargs.get('account_settings', None))
        setattr(self, "_{}".format('address_information'), kwargs.get('address_information', None))
        setattr(self, "_{}".format('credit_card_information'), kwargs.get('credit_card_information', None))
        setattr(self, "_{}".format('direct_debit_processor_information'), kwargs.get('direct_debit_processor_information', None))
        setattr(self, "_{}".format('distributor_code'), kwargs.get('distributor_code', None))
        setattr(self, "_{}".format('distributor_password'), kwargs.get('distributor_password', None))
        setattr(self, "_{}".format('enable_pre_auth'), kwargs.get('enable_pre_auth', None))
        setattr(self, "_{}".format('envelope_partition_id'), kwargs.get('envelope_partition_id', None))
        setattr(self, "_{}".format('initial_user'), kwargs.get('initial_user', None))
        setattr(self, "_{}".format('payment_method'), kwargs.get('payment_method', None))
        setattr(self, "_{}".format('payment_processor'), kwargs.get('payment_processor', None))
        setattr(self, "_{}".format('payment_processor_information'), kwargs.get('payment_processor_information', None))
        setattr(self, "_{}".format('plan_information'), kwargs.get('plan_information', None))
        setattr(self, "_{}".format('process_payment'), kwargs.get('process_payment', None))
        setattr(self, "_{}".format('referral_information'), kwargs.get('referral_information', None))
        setattr(self, "_{}".format('social_account_information'), kwargs.get('social_account_information', None))
        setattr(self, "_{}".format('tax_exempt_id'), kwargs.get('tax_exempt_id', None))

    @property
    def account_name(self):
        """Gets the account_name of this NewAccountDefinition.  # noqa: E501

        The account name for the new account.  # noqa: E501

        :return: The account_name of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this NewAccountDefinition.

        The account name for the new account.  # noqa: E501

        :param account_name: The account_name of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_settings(self):
        """Gets the account_settings of this NewAccountDefinition.  # noqa: E501

        The list of account settings accountsettings that determine the features available for the account. Note that some features are determined by the plan used to create the account and cannot be overridden.    # noqa: E501

        :return: The account_settings of this NewAccountDefinition.  # noqa: E501
        :rtype: AccountSettingsInformation
        """
        return self._account_settings

    @account_settings.setter
    def account_settings(self, account_settings):
        """Sets the account_settings of this NewAccountDefinition.

        The list of account settings accountsettings that determine the features available for the account. Note that some features are determined by the plan used to create the account and cannot be overridden.    # noqa: E501

        :param account_settings: The account_settings of this NewAccountDefinition.  # noqa: E501
        :type: AccountSettingsInformation
        """

        self._account_settings = account_settings

    @property
    def address_information(self):
        """Gets the address_information of this NewAccountDefinition.  # noqa: E501

        A complex type that contains the following information for the new account: `Street1`, `Street2`, `City`, `State`, `Zip`, `Phone`, and `Fax`.  # noqa: E501

        :return: The address_information of this NewAccountDefinition.  # noqa: E501
        :rtype: AccountAddress
        """
        return self._address_information

    @address_information.setter
    def address_information(self, address_information):
        """Sets the address_information of this NewAccountDefinition.

        A complex type that contains the following information for the new account: `Street1`, `Street2`, `City`, `State`, `Zip`, `Phone`, and `Fax`.  # noqa: E501

        :param address_information: The address_information of this NewAccountDefinition.  # noqa: E501
        :type: AccountAddress
        """

        self._address_information = address_information

    @property
    def credit_card_information(self):
        """Gets the credit_card_information of this NewAccountDefinition.  # noqa: E501

        A complex type that has information about the credit card used to pay for this account.  # noqa: E501

        :return: The credit_card_information of this NewAccountDefinition.  # noqa: E501
        :rtype: CreditCardInformation
        """
        return self._credit_card_information

    @credit_card_information.setter
    def credit_card_information(self, credit_card_information):
        """Sets the credit_card_information of this NewAccountDefinition.

        A complex type that has information about the credit card used to pay for this account.  # noqa: E501

        :param credit_card_information: The credit_card_information of this NewAccountDefinition.  # noqa: E501
        :type: CreditCardInformation
        """

        self._credit_card_information = credit_card_information

    @property
    def direct_debit_processor_information(self):
        """Gets the direct_debit_processor_information of this NewAccountDefinition.  # noqa: E501

        Information about the bank that processes direct debits for the payment plan.  # noqa: E501

        :return: The direct_debit_processor_information of this NewAccountDefinition.  # noqa: E501
        :rtype: DirectDebitProcessorInformation
        """
        return self._direct_debit_processor_information

    @direct_debit_processor_information.setter
    def direct_debit_processor_information(self, direct_debit_processor_information):
        """Sets the direct_debit_processor_information of this NewAccountDefinition.

        Information about the bank that processes direct debits for the payment plan.  # noqa: E501

        :param direct_debit_processor_information: The direct_debit_processor_information of this NewAccountDefinition.  # noqa: E501
        :type: DirectDebitProcessorInformation
        """

        self._direct_debit_processor_information = direct_debit_processor_information

    @property
    def distributor_code(self):
        """Gets the distributor_code of this NewAccountDefinition.  # noqa: E501

        The code that identifies the billing plan groups and plans for the new account.  # noqa: E501

        :return: The distributor_code of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._distributor_code

    @distributor_code.setter
    def distributor_code(self, distributor_code):
        """Sets the distributor_code of this NewAccountDefinition.

        The code that identifies the billing plan groups and plans for the new account.  # noqa: E501

        :param distributor_code: The distributor_code of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._distributor_code = distributor_code

    @property
    def distributor_password(self):
        """Gets the distributor_password of this NewAccountDefinition.  # noqa: E501

        The password for the distributorCode.  # noqa: E501

        :return: The distributor_password of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._distributor_password

    @distributor_password.setter
    def distributor_password(self, distributor_password):
        """Sets the distributor_password of this NewAccountDefinition.

        The password for the distributorCode.  # noqa: E501

        :param distributor_password: The distributor_password of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._distributor_password = distributor_password

    @property
    def enable_pre_auth(self):
        """Gets the enable_pre_auth of this NewAccountDefinition.  # noqa: E501

          # noqa: E501

        :return: The enable_pre_auth of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._enable_pre_auth

    @enable_pre_auth.setter
    def enable_pre_auth(self, enable_pre_auth):
        """Sets the enable_pre_auth of this NewAccountDefinition.

          # noqa: E501

        :param enable_pre_auth: The enable_pre_auth of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._enable_pre_auth = enable_pre_auth

    @property
    def envelope_partition_id(self):
        """Gets the envelope_partition_id of this NewAccountDefinition.  # noqa: E501

          # noqa: E501

        :return: The envelope_partition_id of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._envelope_partition_id

    @envelope_partition_id.setter
    def envelope_partition_id(self, envelope_partition_id):
        """Sets the envelope_partition_id of this NewAccountDefinition.

          # noqa: E501

        :param envelope_partition_id: The envelope_partition_id of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._envelope_partition_id = envelope_partition_id

    @property
    def initial_user(self):
        """Gets the initial_user of this NewAccountDefinition.  # noqa: E501

        A complex type with the initial user information for the new account. Note that some user information is set internally based on the plan and cannot be overridden.  # noqa: E501

        :return: The initial_user of this NewAccountDefinition.  # noqa: E501
        :rtype: UserInformation
        """
        return self._initial_user

    @initial_user.setter
    def initial_user(self, initial_user):
        """Sets the initial_user of this NewAccountDefinition.

        A complex type with the initial user information for the new account. Note that some user information is set internally based on the plan and cannot be overridden.  # noqa: E501

        :param initial_user: The initial_user of this NewAccountDefinition.  # noqa: E501
        :type: UserInformation
        """

        self._initial_user = initial_user

    @property
    def payment_method(self):
        """Gets the payment_method of this NewAccountDefinition.  # noqa: E501

          # noqa: E501

        :return: The payment_method of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this NewAccountDefinition.

          # noqa: E501

        :param payment_method: The payment_method of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def payment_processor(self):
        """Gets the payment_processor of this NewAccountDefinition.  # noqa: E501

          # noqa: E501

        :return: The payment_processor of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._payment_processor

    @payment_processor.setter
    def payment_processor(self, payment_processor):
        """Sets the payment_processor of this NewAccountDefinition.

          # noqa: E501

        :param payment_processor: The payment_processor of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._payment_processor = payment_processor

    @property
    def payment_processor_information(self):
        """Gets the payment_processor_information of this NewAccountDefinition.  # noqa: E501

        Information about the entity that processes payments for the billing plan.  # noqa: E501

        :return: The payment_processor_information of this NewAccountDefinition.  # noqa: E501
        :rtype: PaymentProcessorInformation
        """
        return self._payment_processor_information

    @payment_processor_information.setter
    def payment_processor_information(self, payment_processor_information):
        """Sets the payment_processor_information of this NewAccountDefinition.

        Information about the entity that processes payments for the billing plan.  # noqa: E501

        :param payment_processor_information: The payment_processor_information of this NewAccountDefinition.  # noqa: E501
        :type: PaymentProcessorInformation
        """

        self._payment_processor_information = payment_processor_information

    @property
    def plan_information(self):
        """Gets the plan_information of this NewAccountDefinition.  # noqa: E501

        An object used to identify the features and attributes of the account being created.  # noqa: E501

        :return: The plan_information of this NewAccountDefinition.  # noqa: E501
        :rtype: PlanInformation
        """
        return self._plan_information

    @plan_information.setter
    def plan_information(self, plan_information):
        """Sets the plan_information of this NewAccountDefinition.

        An object used to identify the features and attributes of the account being created.  # noqa: E501

        :param plan_information: The plan_information of this NewAccountDefinition.  # noqa: E501
        :type: PlanInformation
        """

        self._plan_information = plan_information

    @property
    def process_payment(self):
        """Gets the process_payment of this NewAccountDefinition.  # noqa: E501

          # noqa: E501

        :return: The process_payment of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._process_payment

    @process_payment.setter
    def process_payment(self, process_payment):
        """Sets the process_payment of this NewAccountDefinition.

          # noqa: E501

        :param process_payment: The process_payment of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._process_payment = process_payment

    @property
    def referral_information(self):
        """Gets the referral_information of this NewAccountDefinition.  # noqa: E501

        A complex type that contains properties for entering referral and discount information.  # noqa: E501

        :return: The referral_information of this NewAccountDefinition.  # noqa: E501
        :rtype: ReferralInformation
        """
        return self._referral_information

    @referral_information.setter
    def referral_information(self, referral_information):
        """Sets the referral_information of this NewAccountDefinition.

        A complex type that contains properties for entering referral and discount information.  # noqa: E501

        :param referral_information: The referral_information of this NewAccountDefinition.  # noqa: E501
        :type: ReferralInformation
        """

        self._referral_information = referral_information

    @property
    def social_account_information(self):
        """Gets the social_account_information of this NewAccountDefinition.  # noqa: E501

        Contains properties that map a DocuSign user to a social account such as Facebook or Yahoo.  # noqa: E501

        :return: The social_account_information of this NewAccountDefinition.  # noqa: E501
        :rtype: SocialAccountInformation
        """
        return self._social_account_information

    @social_account_information.setter
    def social_account_information(self, social_account_information):
        """Sets the social_account_information of this NewAccountDefinition.

        Contains properties that map a DocuSign user to a social account such as Facebook or Yahoo.  # noqa: E501

        :param social_account_information: The social_account_information of this NewAccountDefinition.  # noqa: E501
        :type: SocialAccountInformation
        """

        self._social_account_information = social_account_information

    @property
    def tax_exempt_id(self):
        """Gets the tax_exempt_id of this NewAccountDefinition.  # noqa: E501

          # noqa: E501

        :return: The tax_exempt_id of this NewAccountDefinition.  # noqa: E501
        :rtype: str
        """
        return self._tax_exempt_id

    @tax_exempt_id.setter
    def tax_exempt_id(self, tax_exempt_id):
        """Sets the tax_exempt_id of this NewAccountDefinition.

          # noqa: E501

        :param tax_exempt_id: The tax_exempt_id of this NewAccountDefinition.  # noqa: E501
        :type: str
        """

        self._tax_exempt_id = tax_exempt_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewAccountDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewAccountDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewAccountDefinition):
            return True

        return self.to_dict() != other.to_dict()
