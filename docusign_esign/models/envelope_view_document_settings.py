# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class EnvelopeViewDocumentSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_edit_documents': 'str',
        'show_edit_document_visibility': 'str',
        'show_edit_pages': 'str',
        'show_save_as_document_custom_field': 'str'
    }

    attribute_map = {
        'show_edit_documents': 'showEditDocuments',
        'show_edit_document_visibility': 'showEditDocumentVisibility',
        'show_edit_pages': 'showEditPages',
        'show_save_as_document_custom_field': 'showSaveAsDocumentCustomField'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """EnvelopeViewDocumentSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._show_edit_documents = None
        self._show_edit_document_visibility = None
        self._show_edit_pages = None
        self._show_save_as_document_custom_field = None
        self.discriminator = None

        setattr(self, "_{}".format('show_edit_documents'), kwargs.get('show_edit_documents', None))
        setattr(self, "_{}".format('show_edit_document_visibility'), kwargs.get('show_edit_document_visibility', None))
        setattr(self, "_{}".format('show_edit_pages'), kwargs.get('show_edit_pages', None))
        setattr(self, "_{}".format('show_save_as_document_custom_field'), kwargs.get('show_save_as_document_custom_field', None))

    @property
    def show_edit_documents(self):
        """Gets the show_edit_documents of this EnvelopeViewDocumentSettings.  # noqa: E501

          # noqa: E501

        :return: The show_edit_documents of this EnvelopeViewDocumentSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_edit_documents

    @show_edit_documents.setter
    def show_edit_documents(self, show_edit_documents):
        """Sets the show_edit_documents of this EnvelopeViewDocumentSettings.

          # noqa: E501

        :param show_edit_documents: The show_edit_documents of this EnvelopeViewDocumentSettings.  # noqa: E501
        :type: str
        """

        self._show_edit_documents = show_edit_documents

    @property
    def show_edit_document_visibility(self):
        """Gets the show_edit_document_visibility of this EnvelopeViewDocumentSettings.  # noqa: E501

          # noqa: E501

        :return: The show_edit_document_visibility of this EnvelopeViewDocumentSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_edit_document_visibility

    @show_edit_document_visibility.setter
    def show_edit_document_visibility(self, show_edit_document_visibility):
        """Sets the show_edit_document_visibility of this EnvelopeViewDocumentSettings.

          # noqa: E501

        :param show_edit_document_visibility: The show_edit_document_visibility of this EnvelopeViewDocumentSettings.  # noqa: E501
        :type: str
        """

        self._show_edit_document_visibility = show_edit_document_visibility

    @property
    def show_edit_pages(self):
        """Gets the show_edit_pages of this EnvelopeViewDocumentSettings.  # noqa: E501

          # noqa: E501

        :return: The show_edit_pages of this EnvelopeViewDocumentSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_edit_pages

    @show_edit_pages.setter
    def show_edit_pages(self, show_edit_pages):
        """Sets the show_edit_pages of this EnvelopeViewDocumentSettings.

          # noqa: E501

        :param show_edit_pages: The show_edit_pages of this EnvelopeViewDocumentSettings.  # noqa: E501
        :type: str
        """

        self._show_edit_pages = show_edit_pages

    @property
    def show_save_as_document_custom_field(self):
        """Gets the show_save_as_document_custom_field of this EnvelopeViewDocumentSettings.  # noqa: E501

          # noqa: E501

        :return: The show_save_as_document_custom_field of this EnvelopeViewDocumentSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_save_as_document_custom_field

    @show_save_as_document_custom_field.setter
    def show_save_as_document_custom_field(self, show_save_as_document_custom_field):
        """Sets the show_save_as_document_custom_field of this EnvelopeViewDocumentSettings.

          # noqa: E501

        :param show_save_as_document_custom_field: The show_save_as_document_custom_field of this EnvelopeViewDocumentSettings.  # noqa: E501
        :type: str
        """

        self._show_save_as_document_custom_field = show_save_as_document_custom_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvelopeViewDocumentSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvelopeViewDocumentSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvelopeViewDocumentSettings):
            return True

        return self.to_dict() != other.to_dict()
