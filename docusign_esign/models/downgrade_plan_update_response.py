# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DowngradePlanUpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_payment_method': 'str',
        'downgrade_effective_date': 'str',
        'downgrade_payment_cycle': 'str',
        'downgrade_plan_id': 'str',
        'downgrade_plan_name': 'str',
        'downgrade_request_status': 'str',
        'message': 'str'
    }

    attribute_map = {
        'account_payment_method': 'accountPaymentMethod',
        'downgrade_effective_date': 'downgradeEffectiveDate',
        'downgrade_payment_cycle': 'downgradePaymentCycle',
        'downgrade_plan_id': 'downgradePlanId',
        'downgrade_plan_name': 'downgradePlanName',
        'downgrade_request_status': 'downgradeRequestStatus',
        'message': 'message'
    }

    def __init__(self, account_payment_method=None, downgrade_effective_date=None, downgrade_payment_cycle=None, downgrade_plan_id=None, downgrade_plan_name=None, downgrade_request_status=None, message=None):  # noqa: E501
        """DowngradePlanUpdateResponse - a model defined in Swagger"""  # noqa: E501

        self._account_payment_method = None
        self._downgrade_effective_date = None
        self._downgrade_payment_cycle = None
        self._downgrade_plan_id = None
        self._downgrade_plan_name = None
        self._downgrade_request_status = None
        self._message = None
        self.discriminator = None

        if account_payment_method is not None:
            self.account_payment_method = account_payment_method
        if downgrade_effective_date is not None:
            self.downgrade_effective_date = downgrade_effective_date
        if downgrade_payment_cycle is not None:
            self.downgrade_payment_cycle = downgrade_payment_cycle
        if downgrade_plan_id is not None:
            self.downgrade_plan_id = downgrade_plan_id
        if downgrade_plan_name is not None:
            self.downgrade_plan_name = downgrade_plan_name
        if downgrade_request_status is not None:
            self.downgrade_request_status = downgrade_request_status
        if message is not None:
            self.message = message

    @property
    def account_payment_method(self):
        """Gets the account_payment_method of this DowngradePlanUpdateResponse.  # noqa: E501

          # noqa: E501

        :return: The account_payment_method of this DowngradePlanUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_payment_method

    @account_payment_method.setter
    def account_payment_method(self, account_payment_method):
        """Sets the account_payment_method of this DowngradePlanUpdateResponse.

          # noqa: E501

        :param account_payment_method: The account_payment_method of this DowngradePlanUpdateResponse.  # noqa: E501
        :type: str
        """

        self._account_payment_method = account_payment_method

    @property
    def downgrade_effective_date(self):
        """Gets the downgrade_effective_date of this DowngradePlanUpdateResponse.  # noqa: E501

          # noqa: E501

        :return: The downgrade_effective_date of this DowngradePlanUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_effective_date

    @downgrade_effective_date.setter
    def downgrade_effective_date(self, downgrade_effective_date):
        """Sets the downgrade_effective_date of this DowngradePlanUpdateResponse.

          # noqa: E501

        :param downgrade_effective_date: The downgrade_effective_date of this DowngradePlanUpdateResponse.  # noqa: E501
        :type: str
        """

        self._downgrade_effective_date = downgrade_effective_date

    @property
    def downgrade_payment_cycle(self):
        """Gets the downgrade_payment_cycle of this DowngradePlanUpdateResponse.  # noqa: E501

          # noqa: E501

        :return: The downgrade_payment_cycle of this DowngradePlanUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_payment_cycle

    @downgrade_payment_cycle.setter
    def downgrade_payment_cycle(self, downgrade_payment_cycle):
        """Sets the downgrade_payment_cycle of this DowngradePlanUpdateResponse.

          # noqa: E501

        :param downgrade_payment_cycle: The downgrade_payment_cycle of this DowngradePlanUpdateResponse.  # noqa: E501
        :type: str
        """

        self._downgrade_payment_cycle = downgrade_payment_cycle

    @property
    def downgrade_plan_id(self):
        """Gets the downgrade_plan_id of this DowngradePlanUpdateResponse.  # noqa: E501

          # noqa: E501

        :return: The downgrade_plan_id of this DowngradePlanUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_plan_id

    @downgrade_plan_id.setter
    def downgrade_plan_id(self, downgrade_plan_id):
        """Sets the downgrade_plan_id of this DowngradePlanUpdateResponse.

          # noqa: E501

        :param downgrade_plan_id: The downgrade_plan_id of this DowngradePlanUpdateResponse.  # noqa: E501
        :type: str
        """

        self._downgrade_plan_id = downgrade_plan_id

    @property
    def downgrade_plan_name(self):
        """Gets the downgrade_plan_name of this DowngradePlanUpdateResponse.  # noqa: E501

          # noqa: E501

        :return: The downgrade_plan_name of this DowngradePlanUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_plan_name

    @downgrade_plan_name.setter
    def downgrade_plan_name(self, downgrade_plan_name):
        """Sets the downgrade_plan_name of this DowngradePlanUpdateResponse.

          # noqa: E501

        :param downgrade_plan_name: The downgrade_plan_name of this DowngradePlanUpdateResponse.  # noqa: E501
        :type: str
        """

        self._downgrade_plan_name = downgrade_plan_name

    @property
    def downgrade_request_status(self):
        """Gets the downgrade_request_status of this DowngradePlanUpdateResponse.  # noqa: E501

          # noqa: E501

        :return: The downgrade_request_status of this DowngradePlanUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_request_status

    @downgrade_request_status.setter
    def downgrade_request_status(self, downgrade_request_status):
        """Sets the downgrade_request_status of this DowngradePlanUpdateResponse.

          # noqa: E501

        :param downgrade_request_status: The downgrade_request_status of this DowngradePlanUpdateResponse.  # noqa: E501
        :type: str
        """

        self._downgrade_request_status = downgrade_request_status

    @property
    def message(self):
        """Gets the message of this DowngradePlanUpdateResponse.  # noqa: E501

          # noqa: E501

        :return: The message of this DowngradePlanUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DowngradePlanUpdateResponse.

          # noqa: E501

        :param message: The message of this DowngradePlanUpdateResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DowngradePlanUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DowngradePlanUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
