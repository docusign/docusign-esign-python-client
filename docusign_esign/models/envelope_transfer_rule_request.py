# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvelopeTransferRuleRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, carbon_copy_original_owner=None, enabled=None, envelope_transfer_rule_id=None, event_type=None, from_groups=None, from_users=None, modified_date=None, modified_user=None, to_folder=None, to_user=None):
        """
        EnvelopeTransferRuleRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'carbon_copy_original_owner': 'str',
            'enabled': 'str',
            'envelope_transfer_rule_id': 'str',
            'event_type': 'str',
            'from_groups': 'list[Group]',
            'from_users': 'list[UserInformation]',
            'modified_date': 'str',
            'modified_user': 'UserInformation',
            'to_folder': 'Folder',
            'to_user': 'UserInformation'
        }

        self.attribute_map = {
            'carbon_copy_original_owner': 'carbonCopyOriginalOwner',
            'enabled': 'enabled',
            'envelope_transfer_rule_id': 'envelopeTransferRuleId',
            'event_type': 'eventType',
            'from_groups': 'fromGroups',
            'from_users': 'fromUsers',
            'modified_date': 'modifiedDate',
            'modified_user': 'modifiedUser',
            'to_folder': 'toFolder',
            'to_user': 'toUser'
        }

        self._carbon_copy_original_owner = carbon_copy_original_owner
        self._enabled = enabled
        self._envelope_transfer_rule_id = envelope_transfer_rule_id
        self._event_type = event_type
        self._from_groups = from_groups
        self._from_users = from_users
        self._modified_date = modified_date
        self._modified_user = modified_user
        self._to_folder = to_folder
        self._to_user = to_user

    @property
    def carbon_copy_original_owner(self):
        """
        Gets the carbon_copy_original_owner of this EnvelopeTransferRuleRequest.
        

        :return: The carbon_copy_original_owner of this EnvelopeTransferRuleRequest.
        :rtype: str
        """
        return self._carbon_copy_original_owner

    @carbon_copy_original_owner.setter
    def carbon_copy_original_owner(self, carbon_copy_original_owner):
        """
        Sets the carbon_copy_original_owner of this EnvelopeTransferRuleRequest.
        

        :param carbon_copy_original_owner: The carbon_copy_original_owner of this EnvelopeTransferRuleRequest.
        :type: str
        """

        self._carbon_copy_original_owner = carbon_copy_original_owner

    @property
    def enabled(self):
        """
        Gets the enabled of this EnvelopeTransferRuleRequest.
        

        :return: The enabled of this EnvelopeTransferRuleRequest.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this EnvelopeTransferRuleRequest.
        

        :param enabled: The enabled of this EnvelopeTransferRuleRequest.
        :type: str
        """

        self._enabled = enabled

    @property
    def envelope_transfer_rule_id(self):
        """
        Gets the envelope_transfer_rule_id of this EnvelopeTransferRuleRequest.
        

        :return: The envelope_transfer_rule_id of this EnvelopeTransferRuleRequest.
        :rtype: str
        """
        return self._envelope_transfer_rule_id

    @envelope_transfer_rule_id.setter
    def envelope_transfer_rule_id(self, envelope_transfer_rule_id):
        """
        Sets the envelope_transfer_rule_id of this EnvelopeTransferRuleRequest.
        

        :param envelope_transfer_rule_id: The envelope_transfer_rule_id of this EnvelopeTransferRuleRequest.
        :type: str
        """

        self._envelope_transfer_rule_id = envelope_transfer_rule_id

    @property
    def event_type(self):
        """
        Gets the event_type of this EnvelopeTransferRuleRequest.
        

        :return: The event_type of this EnvelopeTransferRuleRequest.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this EnvelopeTransferRuleRequest.
        

        :param event_type: The event_type of this EnvelopeTransferRuleRequest.
        :type: str
        """

        self._event_type = event_type

    @property
    def from_groups(self):
        """
        Gets the from_groups of this EnvelopeTransferRuleRequest.
        

        :return: The from_groups of this EnvelopeTransferRuleRequest.
        :rtype: list[Group]
        """
        return self._from_groups

    @from_groups.setter
    def from_groups(self, from_groups):
        """
        Sets the from_groups of this EnvelopeTransferRuleRequest.
        

        :param from_groups: The from_groups of this EnvelopeTransferRuleRequest.
        :type: list[Group]
        """

        self._from_groups = from_groups

    @property
    def from_users(self):
        """
        Gets the from_users of this EnvelopeTransferRuleRequest.
        

        :return: The from_users of this EnvelopeTransferRuleRequest.
        :rtype: list[UserInformation]
        """
        return self._from_users

    @from_users.setter
    def from_users(self, from_users):
        """
        Sets the from_users of this EnvelopeTransferRuleRequest.
        

        :param from_users: The from_users of this EnvelopeTransferRuleRequest.
        :type: list[UserInformation]
        """

        self._from_users = from_users

    @property
    def modified_date(self):
        """
        Gets the modified_date of this EnvelopeTransferRuleRequest.
        

        :return: The modified_date of this EnvelopeTransferRuleRequest.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """
        Sets the modified_date of this EnvelopeTransferRuleRequest.
        

        :param modified_date: The modified_date of this EnvelopeTransferRuleRequest.
        :type: str
        """

        self._modified_date = modified_date

    @property
    def modified_user(self):
        """
        Gets the modified_user of this EnvelopeTransferRuleRequest.

        :return: The modified_user of this EnvelopeTransferRuleRequest.
        :rtype: UserInformation
        """
        return self._modified_user

    @modified_user.setter
    def modified_user(self, modified_user):
        """
        Sets the modified_user of this EnvelopeTransferRuleRequest.

        :param modified_user: The modified_user of this EnvelopeTransferRuleRequest.
        :type: UserInformation
        """

        self._modified_user = modified_user

    @property
    def to_folder(self):
        """
        Gets the to_folder of this EnvelopeTransferRuleRequest.

        :return: The to_folder of this EnvelopeTransferRuleRequest.
        :rtype: Folder
        """
        return self._to_folder

    @to_folder.setter
    def to_folder(self, to_folder):
        """
        Sets the to_folder of this EnvelopeTransferRuleRequest.

        :param to_folder: The to_folder of this EnvelopeTransferRuleRequest.
        :type: Folder
        """

        self._to_folder = to_folder

    @property
    def to_user(self):
        """
        Gets the to_user of this EnvelopeTransferRuleRequest.

        :return: The to_user of this EnvelopeTransferRuleRequest.
        :rtype: UserInformation
        """
        return self._to_user

    @to_user.setter
    def to_user(self, to_user):
        """
        Sets the to_user of this EnvelopeTransferRuleRequest.

        :param to_user: The to_user of this EnvelopeTransferRuleRequest.
        :type: UserInformation
        """

        self._to_user = to_user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
