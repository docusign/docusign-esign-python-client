# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BillingInvoiceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_amount': 'str',
        'charge_name': 'str',
        'invoice_item_id': 'str',
        'quantity': 'str',
        'unit_price': 'str'
    }

    attribute_map = {
        'charge_amount': 'chargeAmount',
        'charge_name': 'chargeName',
        'invoice_item_id': 'invoiceItemId',
        'quantity': 'quantity',
        'unit_price': 'unitPrice'
    }

    def __init__(self, charge_amount=None, charge_name=None, invoice_item_id=None, quantity=None, unit_price=None):  # noqa: E501
        """BillingInvoiceItem - a model defined in Swagger"""  # noqa: E501

        self._charge_amount = None
        self._charge_name = None
        self._invoice_item_id = None
        self._quantity = None
        self._unit_price = None
        self.discriminator = None

        if charge_amount is not None:
            self.charge_amount = charge_amount
        if charge_name is not None:
            self.charge_name = charge_name
        if invoice_item_id is not None:
            self.invoice_item_id = invoice_item_id
        if quantity is not None:
            self.quantity = quantity
        if unit_price is not None:
            self.unit_price = unit_price

    @property
    def charge_amount(self):
        """Gets the charge_amount of this BillingInvoiceItem.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The charge_amount of this BillingInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this BillingInvoiceItem.

        Reserved: TBD  # noqa: E501

        :param charge_amount: The charge_amount of this BillingInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_amount = charge_amount

    @property
    def charge_name(self):
        """Gets the charge_name of this BillingInvoiceItem.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The charge_name of this BillingInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_name

    @charge_name.setter
    def charge_name(self, charge_name):
        """Sets the charge_name of this BillingInvoiceItem.

        Reserved: TBD  # noqa: E501

        :param charge_name: The charge_name of this BillingInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_name = charge_name

    @property
    def invoice_item_id(self):
        """Gets the invoice_item_id of this BillingInvoiceItem.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The invoice_item_id of this BillingInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_item_id

    @invoice_item_id.setter
    def invoice_item_id(self, invoice_item_id):
        """Sets the invoice_item_id of this BillingInvoiceItem.

        Reserved: TBD  # noqa: E501

        :param invoice_item_id: The invoice_item_id of this BillingInvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_item_id = invoice_item_id

    @property
    def quantity(self):
        """Gets the quantity of this BillingInvoiceItem.  # noqa: E501

          # noqa: E501

        :return: The quantity of this BillingInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BillingInvoiceItem.

          # noqa: E501

        :param quantity: The quantity of this BillingInvoiceItem.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this BillingInvoiceItem.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The unit_price of this BillingInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this BillingInvoiceItem.

        Reserved: TBD  # noqa: E501

        :param unit_price: The unit_price of this BillingInvoiceItem.  # noqa: E501
        :type: str
        """

        self._unit_price = unit_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingInvoiceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingInvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
