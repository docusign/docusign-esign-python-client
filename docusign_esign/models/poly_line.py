# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolyLine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, x1=None, x2=None, y1=None, y2=None):
        """
        PolyLine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'x1': 'str',
            'x2': 'str',
            'y1': 'str',
            'y2': 'str'
        }

        self.attribute_map = {
            'x1': 'x1',
            'x2': 'x2',
            'y1': 'y1',
            'y2': 'y2'
        }

        self._x1 = x1
        self._x2 = x2
        self._y1 = y1
        self._y2 = y2

    @property
    def x1(self):
        """
        Gets the x1 of this PolyLine.
        

        :return: The x1 of this PolyLine.
        :rtype: str
        """
        return self._x1

    @x1.setter
    def x1(self, x1):
        """
        Sets the x1 of this PolyLine.
        

        :param x1: The x1 of this PolyLine.
        :type: str
        """

        self._x1 = x1

    @property
    def x2(self):
        """
        Gets the x2 of this PolyLine.
        

        :return: The x2 of this PolyLine.
        :rtype: str
        """
        return self._x2

    @x2.setter
    def x2(self, x2):
        """
        Sets the x2 of this PolyLine.
        

        :param x2: The x2 of this PolyLine.
        :type: str
        """

        self._x2 = x2

    @property
    def y1(self):
        """
        Gets the y1 of this PolyLine.
        

        :return: The y1 of this PolyLine.
        :rtype: str
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """
        Sets the y1 of this PolyLine.
        

        :param y1: The y1 of this PolyLine.
        :type: str
        """

        self._y1 = y1

    @property
    def y2(self):
        """
        Gets the y2 of this PolyLine.
        

        :return: The y2 of this PolyLine.
        :rtype: str
        """
        return self._y2

    @y2.setter
    def y2(self, y2):
        """
        Sets the y2 of this PolyLine.
        

        :param y2: The y2 of this PolyLine.
        :type: str
        """

        self._y2 = y2

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
