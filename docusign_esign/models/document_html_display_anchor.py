# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentHtmlDisplayAnchor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'case_sensitive': 'bool',
        'display_settings': 'DocumentHtmlDisplaySettings',
        'end_anchor': 'str',
        'remove_end_anchor': 'bool',
        'remove_start_anchor': 'bool',
        'start_anchor': 'str'
    }

    attribute_map = {
        'case_sensitive': 'caseSensitive',
        'display_settings': 'displaySettings',
        'end_anchor': 'endAnchor',
        'remove_end_anchor': 'removeEndAnchor',
        'remove_start_anchor': 'removeStartAnchor',
        'start_anchor': 'startAnchor'
    }

    def __init__(self, case_sensitive=None, display_settings=None, end_anchor=None, remove_end_anchor=None, remove_start_anchor=None, start_anchor=None):  # noqa: E501
        """DocumentHtmlDisplayAnchor - a model defined in Swagger"""  # noqa: E501

        self._case_sensitive = None
        self._display_settings = None
        self._end_anchor = None
        self._remove_end_anchor = None
        self._remove_start_anchor = None
        self._start_anchor = None
        self.discriminator = None

        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        if display_settings is not None:
            self.display_settings = display_settings
        if end_anchor is not None:
            self.end_anchor = end_anchor
        if remove_end_anchor is not None:
            self.remove_end_anchor = remove_end_anchor
        if remove_start_anchor is not None:
            self.remove_start_anchor = remove_start_anchor
        if start_anchor is not None:
            self.start_anchor = start_anchor

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this DocumentHtmlDisplayAnchor.  # noqa: E501

          # noqa: E501

        :return: The case_sensitive of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this DocumentHtmlDisplayAnchor.

          # noqa: E501

        :param case_sensitive: The case_sensitive of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :type: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def display_settings(self):
        """Gets the display_settings of this DocumentHtmlDisplayAnchor.  # noqa: E501


        :return: The display_settings of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :rtype: DocumentHtmlDisplaySettings
        """
        return self._display_settings

    @display_settings.setter
    def display_settings(self, display_settings):
        """Sets the display_settings of this DocumentHtmlDisplayAnchor.


        :param display_settings: The display_settings of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :type: DocumentHtmlDisplaySettings
        """

        self._display_settings = display_settings

    @property
    def end_anchor(self):
        """Gets the end_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501

          # noqa: E501

        :return: The end_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :rtype: str
        """
        return self._end_anchor

    @end_anchor.setter
    def end_anchor(self, end_anchor):
        """Sets the end_anchor of this DocumentHtmlDisplayAnchor.

          # noqa: E501

        :param end_anchor: The end_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :type: str
        """

        self._end_anchor = end_anchor

    @property
    def remove_end_anchor(self):
        """Gets the remove_end_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501

          # noqa: E501

        :return: The remove_end_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :rtype: bool
        """
        return self._remove_end_anchor

    @remove_end_anchor.setter
    def remove_end_anchor(self, remove_end_anchor):
        """Sets the remove_end_anchor of this DocumentHtmlDisplayAnchor.

          # noqa: E501

        :param remove_end_anchor: The remove_end_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :type: bool
        """

        self._remove_end_anchor = remove_end_anchor

    @property
    def remove_start_anchor(self):
        """Gets the remove_start_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501

          # noqa: E501

        :return: The remove_start_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :rtype: bool
        """
        return self._remove_start_anchor

    @remove_start_anchor.setter
    def remove_start_anchor(self, remove_start_anchor):
        """Sets the remove_start_anchor of this DocumentHtmlDisplayAnchor.

          # noqa: E501

        :param remove_start_anchor: The remove_start_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :type: bool
        """

        self._remove_start_anchor = remove_start_anchor

    @property
    def start_anchor(self):
        """Gets the start_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501

          # noqa: E501

        :return: The start_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :rtype: str
        """
        return self._start_anchor

    @start_anchor.setter
    def start_anchor(self, start_anchor):
        """Sets the start_anchor of this DocumentHtmlDisplayAnchor.

          # noqa: E501

        :param start_anchor: The start_anchor of this DocumentHtmlDisplayAnchor.  # noqa: E501
        :type: str
        """

        self._start_anchor = start_anchor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentHtmlDisplayAnchor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentHtmlDisplayAnchor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
