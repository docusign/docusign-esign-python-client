# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DisplayAppliancePage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, document_id=None, document_name=None, external_document_id=None, height=None, is_first_page=None, page_id=None, page_no=None, page_status=None, page_type=None, width=None):
        """
        DisplayAppliancePage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'document_id': 'str',
            'document_name': 'str',
            'external_document_id': 'str',
            'height': 'int',
            'is_first_page': 'bool',
            'page_id': 'str',
            'page_no': 'int',
            'page_status': 'str',
            'page_type': 'str',
            'width': 'int'
        }

        self.attribute_map = {
            'document_id': 'documentId',
            'document_name': 'documentName',
            'external_document_id': 'externalDocumentId',
            'height': 'height',
            'is_first_page': 'isFirstPage',
            'page_id': 'pageId',
            'page_no': 'pageNo',
            'page_status': 'pageStatus',
            'page_type': 'pageType',
            'width': 'width'
        }

        self._document_id = document_id
        self._document_name = document_name
        self._external_document_id = external_document_id
        self._height = height
        self._is_first_page = is_first_page
        self._page_id = page_id
        self._page_no = page_no
        self._page_status = page_status
        self._page_type = page_type
        self._width = width

    @property
    def document_id(self):
        """
        Gets the document_id of this DisplayAppliancePage.
        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.

        :return: The document_id of this DisplayAppliancePage.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """
        Sets the document_id of this DisplayAppliancePage.
        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.

        :param document_id: The document_id of this DisplayAppliancePage.
        :type: str
        """

        self._document_id = document_id

    @property
    def document_name(self):
        """
        Gets the document_name of this DisplayAppliancePage.
        

        :return: The document_name of this DisplayAppliancePage.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """
        Sets the document_name of this DisplayAppliancePage.
        

        :param document_name: The document_name of this DisplayAppliancePage.
        :type: str
        """

        self._document_name = document_name

    @property
    def external_document_id(self):
        """
        Gets the external_document_id of this DisplayAppliancePage.
        

        :return: The external_document_id of this DisplayAppliancePage.
        :rtype: str
        """
        return self._external_document_id

    @external_document_id.setter
    def external_document_id(self, external_document_id):
        """
        Sets the external_document_id of this DisplayAppliancePage.
        

        :param external_document_id: The external_document_id of this DisplayAppliancePage.
        :type: str
        """

        self._external_document_id = external_document_id

    @property
    def height(self):
        """
        Gets the height of this DisplayAppliancePage.
        Height of the tab in pixels.

        :return: The height of this DisplayAppliancePage.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this DisplayAppliancePage.
        Height of the tab in pixels.

        :param height: The height of this DisplayAppliancePage.
        :type: int
        """

        self._height = height

    @property
    def is_first_page(self):
        """
        Gets the is_first_page of this DisplayAppliancePage.
        

        :return: The is_first_page of this DisplayAppliancePage.
        :rtype: bool
        """
        return self._is_first_page

    @is_first_page.setter
    def is_first_page(self, is_first_page):
        """
        Sets the is_first_page of this DisplayAppliancePage.
        

        :param is_first_page: The is_first_page of this DisplayAppliancePage.
        :type: bool
        """

        self._is_first_page = is_first_page

    @property
    def page_id(self):
        """
        Gets the page_id of this DisplayAppliancePage.
        

        :return: The page_id of this DisplayAppliancePage.
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """
        Sets the page_id of this DisplayAppliancePage.
        

        :param page_id: The page_id of this DisplayAppliancePage.
        :type: str
        """

        self._page_id = page_id

    @property
    def page_no(self):
        """
        Gets the page_no of this DisplayAppliancePage.
        

        :return: The page_no of this DisplayAppliancePage.
        :rtype: int
        """
        return self._page_no

    @page_no.setter
    def page_no(self, page_no):
        """
        Sets the page_no of this DisplayAppliancePage.
        

        :param page_no: The page_no of this DisplayAppliancePage.
        :type: int
        """

        self._page_no = page_no

    @property
    def page_status(self):
        """
        Gets the page_status of this DisplayAppliancePage.
        

        :return: The page_status of this DisplayAppliancePage.
        :rtype: str
        """
        return self._page_status

    @page_status.setter
    def page_status(self, page_status):
        """
        Sets the page_status of this DisplayAppliancePage.
        

        :param page_status: The page_status of this DisplayAppliancePage.
        :type: str
        """

        self._page_status = page_status

    @property
    def page_type(self):
        """
        Gets the page_type of this DisplayAppliancePage.
        

        :return: The page_type of this DisplayAppliancePage.
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """
        Sets the page_type of this DisplayAppliancePage.
        

        :param page_type: The page_type of this DisplayAppliancePage.
        :type: str
        """

        self._page_type = page_type

    @property
    def width(self):
        """
        Gets the width of this DisplayAppliancePage.
        Width of the tab in pixels.

        :return: The width of this DisplayAppliancePage.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this DisplayAppliancePage.
        Width of the tab in pixels.

        :param width: The width of this DisplayAppliancePage.
        :type: int
        """

        self._width = width

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
