# coding: utf-8

"""
    Docusign eSignature REST API

    The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class BulkProcessResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_id': 'str',
        'batch_name': 'str',
        'batch_size': 'str',
        'error_details': 'list[str]',
        'errors': 'list[str]',
        'queue_limit': 'str',
        'total_queued': 'str'
    }

    attribute_map = {
        'batch_id': 'batchId',
        'batch_name': 'batchName',
        'batch_size': 'batchSize',
        'error_details': 'errorDetails',
        'errors': 'errors',
        'queue_limit': 'queueLimit',
        'total_queued': 'totalQueued'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """BulkProcessResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._batch_id = None
        self._batch_name = None
        self._batch_size = None
        self._error_details = None
        self._errors = None
        self._queue_limit = None
        self._total_queued = None
        self.discriminator = None

        setattr(self, "_{}".format('batch_id'), kwargs.get('batch_id', None))
        setattr(self, "_{}".format('batch_name'), kwargs.get('batch_name', None))
        setattr(self, "_{}".format('batch_size'), kwargs.get('batch_size', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('errors'), kwargs.get('errors', None))
        setattr(self, "_{}".format('queue_limit'), kwargs.get('queue_limit', None))
        setattr(self, "_{}".format('total_queued'), kwargs.get('total_queued', None))

    @property
    def batch_id(self):
        """Gets the batch_id of this BulkProcessResponse.  # noqa: E501

          # noqa: E501

        :return: The batch_id of this BulkProcessResponse.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BulkProcessResponse.

          # noqa: E501

        :param batch_id: The batch_id of this BulkProcessResponse.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def batch_name(self):
        """Gets the batch_name of this BulkProcessResponse.  # noqa: E501

          # noqa: E501

        :return: The batch_name of this BulkProcessResponse.  # noqa: E501
        :rtype: str
        """
        return self._batch_name

    @batch_name.setter
    def batch_name(self, batch_name):
        """Sets the batch_name of this BulkProcessResponse.

          # noqa: E501

        :param batch_name: The batch_name of this BulkProcessResponse.  # noqa: E501
        :type: str
        """

        self._batch_name = batch_name

    @property
    def batch_size(self):
        """Gets the batch_size of this BulkProcessResponse.  # noqa: E501

          # noqa: E501

        :return: The batch_size of this BulkProcessResponse.  # noqa: E501
        :rtype: str
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this BulkProcessResponse.

          # noqa: E501

        :param batch_size: The batch_size of this BulkProcessResponse.  # noqa: E501
        :type: str
        """

        self._batch_size = batch_size

    @property
    def error_details(self):
        """Gets the error_details of this BulkProcessResponse.  # noqa: E501

        Array or errors.  # noqa: E501

        :return: The error_details of this BulkProcessResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this BulkProcessResponse.

        Array or errors.  # noqa: E501

        :param error_details: The error_details of this BulkProcessResponse.  # noqa: E501
        :type: list[str]
        """

        self._error_details = error_details

    @property
    def errors(self):
        """Gets the errors of this BulkProcessResponse.  # noqa: E501

          # noqa: E501

        :return: The errors of this BulkProcessResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BulkProcessResponse.

          # noqa: E501

        :param errors: The errors of this BulkProcessResponse.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def queue_limit(self):
        """Gets the queue_limit of this BulkProcessResponse.  # noqa: E501

          # noqa: E501

        :return: The queue_limit of this BulkProcessResponse.  # noqa: E501
        :rtype: str
        """
        return self._queue_limit

    @queue_limit.setter
    def queue_limit(self, queue_limit):
        """Sets the queue_limit of this BulkProcessResponse.

          # noqa: E501

        :param queue_limit: The queue_limit of this BulkProcessResponse.  # noqa: E501
        :type: str
        """

        self._queue_limit = queue_limit

    @property
    def total_queued(self):
        """Gets the total_queued of this BulkProcessResponse.  # noqa: E501

          # noqa: E501

        :return: The total_queued of this BulkProcessResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_queued

    @total_queued.setter
    def total_queued(self, total_queued):
        """Sets the total_queued of this BulkProcessResponse.

          # noqa: E501

        :param total_queued: The total_queued of this BulkProcessResponse.  # noqa: E501
        :type: str
        """

        self._total_queued = total_queued

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkProcessResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkProcessResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BulkProcessResponse):
            return True

        return self.to_dict() != other.to_dict()
