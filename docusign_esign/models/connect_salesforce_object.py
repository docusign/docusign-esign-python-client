# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConnectSalesforceObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active=None, description=None, id=None, insert=None, on_complete_only=None, select_fields=None, sf_object=None, sf_object_name=None, update_fields=None):
        """
        ConnectSalesforceObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active': 'str',
            'description': 'str',
            'id': 'str',
            'insert': 'str',
            'on_complete_only': 'str',
            'select_fields': 'list[ConnectSalesforceField]',
            'sf_object': 'str',
            'sf_object_name': 'str',
            'update_fields': 'list[ConnectSalesforceField]'
        }

        self.attribute_map = {
            'active': 'active',
            'description': 'description',
            'id': 'id',
            'insert': 'insert',
            'on_complete_only': 'onCompleteOnly',
            'select_fields': 'selectFields',
            'sf_object': 'sfObject',
            'sf_object_name': 'sfObjectName',
            'update_fields': 'updateFields'
        }

        self._active = active
        self._description = description
        self._id = id
        self._insert = insert
        self._on_complete_only = on_complete_only
        self._select_fields = select_fields
        self._sf_object = sf_object
        self._sf_object_name = sf_object_name
        self._update_fields = update_fields

    @property
    def active(self):
        """
        Gets the active of this ConnectSalesforceObject.
        

        :return: The active of this ConnectSalesforceObject.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ConnectSalesforceObject.
        

        :param active: The active of this ConnectSalesforceObject.
        :type: str
        """

        self._active = active

    @property
    def description(self):
        """
        Gets the description of this ConnectSalesforceObject.
        

        :return: The description of this ConnectSalesforceObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ConnectSalesforceObject.
        

        :param description: The description of this ConnectSalesforceObject.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this ConnectSalesforceObject.
        

        :return: The id of this ConnectSalesforceObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ConnectSalesforceObject.
        

        :param id: The id of this ConnectSalesforceObject.
        :type: str
        """

        self._id = id

    @property
    def insert(self):
        """
        Gets the insert of this ConnectSalesforceObject.
        

        :return: The insert of this ConnectSalesforceObject.
        :rtype: str
        """
        return self._insert

    @insert.setter
    def insert(self, insert):
        """
        Sets the insert of this ConnectSalesforceObject.
        

        :param insert: The insert of this ConnectSalesforceObject.
        :type: str
        """

        self._insert = insert

    @property
    def on_complete_only(self):
        """
        Gets the on_complete_only of this ConnectSalesforceObject.
        

        :return: The on_complete_only of this ConnectSalesforceObject.
        :rtype: str
        """
        return self._on_complete_only

    @on_complete_only.setter
    def on_complete_only(self, on_complete_only):
        """
        Sets the on_complete_only of this ConnectSalesforceObject.
        

        :param on_complete_only: The on_complete_only of this ConnectSalesforceObject.
        :type: str
        """

        self._on_complete_only = on_complete_only

    @property
    def select_fields(self):
        """
        Gets the select_fields of this ConnectSalesforceObject.
        

        :return: The select_fields of this ConnectSalesforceObject.
        :rtype: list[ConnectSalesforceField]
        """
        return self._select_fields

    @select_fields.setter
    def select_fields(self, select_fields):
        """
        Sets the select_fields of this ConnectSalesforceObject.
        

        :param select_fields: The select_fields of this ConnectSalesforceObject.
        :type: list[ConnectSalesforceField]
        """

        self._select_fields = select_fields

    @property
    def sf_object(self):
        """
        Gets the sf_object of this ConnectSalesforceObject.
        

        :return: The sf_object of this ConnectSalesforceObject.
        :rtype: str
        """
        return self._sf_object

    @sf_object.setter
    def sf_object(self, sf_object):
        """
        Sets the sf_object of this ConnectSalesforceObject.
        

        :param sf_object: The sf_object of this ConnectSalesforceObject.
        :type: str
        """

        self._sf_object = sf_object

    @property
    def sf_object_name(self):
        """
        Gets the sf_object_name of this ConnectSalesforceObject.
        

        :return: The sf_object_name of this ConnectSalesforceObject.
        :rtype: str
        """
        return self._sf_object_name

    @sf_object_name.setter
    def sf_object_name(self, sf_object_name):
        """
        Sets the sf_object_name of this ConnectSalesforceObject.
        

        :param sf_object_name: The sf_object_name of this ConnectSalesforceObject.
        :type: str
        """

        self._sf_object_name = sf_object_name

    @property
    def update_fields(self):
        """
        Gets the update_fields of this ConnectSalesforceObject.
        

        :return: The update_fields of this ConnectSalesforceObject.
        :rtype: list[ConnectSalesforceField]
        """
        return self._update_fields

    @update_fields.setter
    def update_fields(self, update_fields):
        """
        Sets the update_fields of this ConnectSalesforceObject.
        

        :param update_fields: The update_fields of this ConnectSalesforceObject.
        :type: list[ConnectSalesforceField]
        """

        self._update_fields = update_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
