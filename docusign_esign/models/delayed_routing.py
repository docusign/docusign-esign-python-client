# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class DelayedRouting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resume_date': 'str',
        'rules': 'list[EnvelopeDelayRule]',
        'status': 'str'
    }

    attribute_map = {
        'resume_date': 'resumeDate',
        'rules': 'rules',
        'status': 'status'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """DelayedRouting - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resume_date = None
        self._rules = None
        self._status = None
        self.discriminator = None

        setattr(self, "_{}".format('resume_date'), kwargs.get('resume_date', None))
        setattr(self, "_{}".format('rules'), kwargs.get('rules', None))
        setattr(self, "_{}".format('status'), kwargs.get('status', None))

    @property
    def resume_date(self):
        """Gets the resume_date of this DelayedRouting.  # noqa: E501

        An ISO 8601 formatted datetime string indicating the date and time that the envelope is (or was) scheduled to be sent to the recipients associated with the current workflow step or null if the envelope has not yet begun processing the current workflow step.  # noqa: E501

        :return: The resume_date of this DelayedRouting.  # noqa: E501
        :rtype: str
        """
        return self._resume_date

    @resume_date.setter
    def resume_date(self, resume_date):
        """Sets the resume_date of this DelayedRouting.

        An ISO 8601 formatted datetime string indicating the date and time that the envelope is (or was) scheduled to be sent to the recipients associated with the current workflow step or null if the envelope has not yet begun processing the current workflow step.  # noqa: E501

        :param resume_date: The resume_date of this DelayedRouting.  # noqa: E501
        :type: str
        """

        self._resume_date = resume_date

    @property
    def rules(self):
        """Gets the rules of this DelayedRouting.  # noqa: E501

        A list of envelope delay rules specified by the user indicating how and when the envelope should be sent in the future for the current workflow step and its associated recipients. Currently only 1 rule may be specified.  # noqa: E501

        :return: The rules of this DelayedRouting.  # noqa: E501
        :rtype: list[EnvelopeDelayRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this DelayedRouting.

        A list of envelope delay rules specified by the user indicating how and when the envelope should be sent in the future for the current workflow step and its associated recipients. Currently only 1 rule may be specified.  # noqa: E501

        :param rules: The rules of this DelayedRouting.  # noqa: E501
        :type: list[EnvelopeDelayRule]
        """

        self._rules = rules

    @property
    def status(self):
        """Gets the status of this DelayedRouting.  # noqa: E501

        \\\"pending\\\" if the current workflow step has not been reached and the delay has not yet started. \\\"started\\\" if the delay is in progress. \\\"completed\\\" if the delay has elapsed and the envelope has been sent to the current workflow step's recipients.  # noqa: E501

        :return: The status of this DelayedRouting.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DelayedRouting.

        \\\"pending\\\" if the current workflow step has not been reached and the delay has not yet started. \\\"started\\\" if the delay is in progress. \\\"completed\\\" if the delay has elapsed and the envelope has been sent to the current workflow step's recipients.  # noqa: E501

        :param status: The status of this DelayedRouting.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DelayedRouting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DelayedRouting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DelayedRouting):
            return True

        return self.to_dict() != other.to_dict()
