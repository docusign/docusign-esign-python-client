# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Text(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anchor_allow_white_space_in_characters': 'str',
        'anchor_allow_white_space_in_characters_metadata': 'PropertyMetadata',
        'anchor_case_sensitive': 'str',
        'anchor_case_sensitive_metadata': 'PropertyMetadata',
        'anchor_horizontal_alignment': 'str',
        'anchor_horizontal_alignment_metadata': 'PropertyMetadata',
        'anchor_ignore_if_not_present': 'str',
        'anchor_ignore_if_not_present_metadata': 'PropertyMetadata',
        'anchor_match_whole_word': 'str',
        'anchor_match_whole_word_metadata': 'PropertyMetadata',
        'anchor_string': 'str',
        'anchor_string_metadata': 'PropertyMetadata',
        'anchor_tab_processor_version': 'str',
        'anchor_tab_processor_version_metadata': 'PropertyMetadata',
        'anchor_units': 'str',
        'anchor_units_metadata': 'PropertyMetadata',
        'anchor_x_offset': 'str',
        'anchor_x_offset_metadata': 'PropertyMetadata',
        'anchor_y_offset': 'str',
        'anchor_y_offset_metadata': 'PropertyMetadata',
        'bold': 'str',
        'bold_metadata': 'PropertyMetadata',
        'conceal_value_on_document': 'str',
        'conceal_value_on_document_metadata': 'PropertyMetadata',
        'conditional_parent_label': 'str',
        'conditional_parent_label_metadata': 'PropertyMetadata',
        'conditional_parent_value': 'str',
        'conditional_parent_value_metadata': 'PropertyMetadata',
        'custom_tab_id': 'str',
        'custom_tab_id_metadata': 'PropertyMetadata',
        'disable_auto_size': 'str',
        'disable_auto_size_metadata': 'PropertyMetadata',
        'document_id': 'str',
        'document_id_metadata': 'PropertyMetadata',
        'error_details': 'ErrorDetails',
        'font': 'str',
        'font_color': 'str',
        'font_color_metadata': 'PropertyMetadata',
        'font_metadata': 'PropertyMetadata',
        'font_size': 'str',
        'font_size_metadata': 'PropertyMetadata',
        'form_order': 'str',
        'form_order_metadata': 'PropertyMetadata',
        'form_page_label': 'str',
        'form_page_label_metadata': 'PropertyMetadata',
        'form_page_number': 'str',
        'form_page_number_metadata': 'PropertyMetadata',
        'formula': 'str',
        'formula_metadata': 'PropertyMetadata',
        'height': 'str',
        'height_metadata': 'PropertyMetadata',
        'is_payment_amount': 'str',
        'is_payment_amount_metadata': 'PropertyMetadata',
        'italic': 'str',
        'italic_metadata': 'PropertyMetadata',
        'locale_policy': 'LocalePolicyTab',
        'locked': 'str',
        'locked_metadata': 'PropertyMetadata',
        'max_length': 'str',
        'max_length_metadata': 'PropertyMetadata',
        'merge_field': 'MergeField',
        'merge_field_xml': 'str',
        'name': 'str',
        'name_metadata': 'PropertyMetadata',
        'original_value': 'str',
        'original_value_metadata': 'PropertyMetadata',
        'page_number': 'str',
        'page_number_metadata': 'PropertyMetadata',
        'recipient_id': 'str',
        'recipient_id_guid': 'str',
        'recipient_id_guid_metadata': 'PropertyMetadata',
        'recipient_id_metadata': 'PropertyMetadata',
        'require_all': 'str',
        'require_all_metadata': 'PropertyMetadata',
        'required': 'str',
        'required_metadata': 'PropertyMetadata',
        'require_initial_on_shared_change': 'str',
        'require_initial_on_shared_change_metadata': 'PropertyMetadata',
        'sender_required': 'str',
        'sender_required_metadata': 'PropertyMetadata',
        'shared': 'str',
        'shared_metadata': 'PropertyMetadata',
        'smart_contract_information': 'SmartContractInformation',
        'status': 'str',
        'status_metadata': 'PropertyMetadata',
        'tab_group_labels': 'list[str]',
        'tab_group_labels_metadata': 'PropertyMetadata',
        'tab_id': 'str',
        'tab_id_metadata': 'PropertyMetadata',
        'tab_label': 'str',
        'tab_label_metadata': 'PropertyMetadata',
        'tab_order': 'str',
        'tab_order_metadata': 'PropertyMetadata',
        'tab_type': 'str',
        'tab_type_metadata': 'PropertyMetadata',
        'template_locked': 'str',
        'template_locked_metadata': 'PropertyMetadata',
        'template_required': 'str',
        'template_required_metadata': 'PropertyMetadata',
        'tooltip': 'str',
        'tool_tip_metadata': 'PropertyMetadata',
        'underline': 'str',
        'underline_metadata': 'PropertyMetadata',
        'validation_message': 'str',
        'validation_message_metadata': 'PropertyMetadata',
        'validation_pattern': 'str',
        'validation_pattern_metadata': 'PropertyMetadata',
        'value': 'str',
        'value_metadata': 'PropertyMetadata',
        'width': 'str',
        'width_metadata': 'PropertyMetadata',
        'x_position': 'str',
        'x_position_metadata': 'PropertyMetadata',
        'y_position': 'str',
        'y_position_metadata': 'PropertyMetadata'
    }

    attribute_map = {
        'anchor_allow_white_space_in_characters': 'anchorAllowWhiteSpaceInCharacters',
        'anchor_allow_white_space_in_characters_metadata': 'anchorAllowWhiteSpaceInCharactersMetadata',
        'anchor_case_sensitive': 'anchorCaseSensitive',
        'anchor_case_sensitive_metadata': 'anchorCaseSensitiveMetadata',
        'anchor_horizontal_alignment': 'anchorHorizontalAlignment',
        'anchor_horizontal_alignment_metadata': 'anchorHorizontalAlignmentMetadata',
        'anchor_ignore_if_not_present': 'anchorIgnoreIfNotPresent',
        'anchor_ignore_if_not_present_metadata': 'anchorIgnoreIfNotPresentMetadata',
        'anchor_match_whole_word': 'anchorMatchWholeWord',
        'anchor_match_whole_word_metadata': 'anchorMatchWholeWordMetadata',
        'anchor_string': 'anchorString',
        'anchor_string_metadata': 'anchorStringMetadata',
        'anchor_tab_processor_version': 'anchorTabProcessorVersion',
        'anchor_tab_processor_version_metadata': 'anchorTabProcessorVersionMetadata',
        'anchor_units': 'anchorUnits',
        'anchor_units_metadata': 'anchorUnitsMetadata',
        'anchor_x_offset': 'anchorXOffset',
        'anchor_x_offset_metadata': 'anchorXOffsetMetadata',
        'anchor_y_offset': 'anchorYOffset',
        'anchor_y_offset_metadata': 'anchorYOffsetMetadata',
        'bold': 'bold',
        'bold_metadata': 'boldMetadata',
        'conceal_value_on_document': 'concealValueOnDocument',
        'conceal_value_on_document_metadata': 'concealValueOnDocumentMetadata',
        'conditional_parent_label': 'conditionalParentLabel',
        'conditional_parent_label_metadata': 'conditionalParentLabelMetadata',
        'conditional_parent_value': 'conditionalParentValue',
        'conditional_parent_value_metadata': 'conditionalParentValueMetadata',
        'custom_tab_id': 'customTabId',
        'custom_tab_id_metadata': 'customTabIdMetadata',
        'disable_auto_size': 'disableAutoSize',
        'disable_auto_size_metadata': 'disableAutoSizeMetadata',
        'document_id': 'documentId',
        'document_id_metadata': 'documentIdMetadata',
        'error_details': 'errorDetails',
        'font': 'font',
        'font_color': 'fontColor',
        'font_color_metadata': 'fontColorMetadata',
        'font_metadata': 'fontMetadata',
        'font_size': 'fontSize',
        'font_size_metadata': 'fontSizeMetadata',
        'form_order': 'formOrder',
        'form_order_metadata': 'formOrderMetadata',
        'form_page_label': 'formPageLabel',
        'form_page_label_metadata': 'formPageLabelMetadata',
        'form_page_number': 'formPageNumber',
        'form_page_number_metadata': 'formPageNumberMetadata',
        'formula': 'formula',
        'formula_metadata': 'formulaMetadata',
        'height': 'height',
        'height_metadata': 'heightMetadata',
        'is_payment_amount': 'isPaymentAmount',
        'is_payment_amount_metadata': 'isPaymentAmountMetadata',
        'italic': 'italic',
        'italic_metadata': 'italicMetadata',
        'locale_policy': 'localePolicy',
        'locked': 'locked',
        'locked_metadata': 'lockedMetadata',
        'max_length': 'maxLength',
        'max_length_metadata': 'maxLengthMetadata',
        'merge_field': 'mergeField',
        'merge_field_xml': 'mergeFieldXml',
        'name': 'name',
        'name_metadata': 'nameMetadata',
        'original_value': 'originalValue',
        'original_value_metadata': 'originalValueMetadata',
        'page_number': 'pageNumber',
        'page_number_metadata': 'pageNumberMetadata',
        'recipient_id': 'recipientId',
        'recipient_id_guid': 'recipientIdGuid',
        'recipient_id_guid_metadata': 'recipientIdGuidMetadata',
        'recipient_id_metadata': 'recipientIdMetadata',
        'require_all': 'requireAll',
        'require_all_metadata': 'requireAllMetadata',
        'required': 'required',
        'required_metadata': 'requiredMetadata',
        'require_initial_on_shared_change': 'requireInitialOnSharedChange',
        'require_initial_on_shared_change_metadata': 'requireInitialOnSharedChangeMetadata',
        'sender_required': 'senderRequired',
        'sender_required_metadata': 'senderRequiredMetadata',
        'shared': 'shared',
        'shared_metadata': 'sharedMetadata',
        'smart_contract_information': 'smartContractInformation',
        'status': 'status',
        'status_metadata': 'statusMetadata',
        'tab_group_labels': 'tabGroupLabels',
        'tab_group_labels_metadata': 'tabGroupLabelsMetadata',
        'tab_id': 'tabId',
        'tab_id_metadata': 'tabIdMetadata',
        'tab_label': 'tabLabel',
        'tab_label_metadata': 'tabLabelMetadata',
        'tab_order': 'tabOrder',
        'tab_order_metadata': 'tabOrderMetadata',
        'tab_type': 'tabType',
        'tab_type_metadata': 'tabTypeMetadata',
        'template_locked': 'templateLocked',
        'template_locked_metadata': 'templateLockedMetadata',
        'template_required': 'templateRequired',
        'template_required_metadata': 'templateRequiredMetadata',
        'tooltip': 'tooltip',
        'tool_tip_metadata': 'toolTipMetadata',
        'underline': 'underline',
        'underline_metadata': 'underlineMetadata',
        'validation_message': 'validationMessage',
        'validation_message_metadata': 'validationMessageMetadata',
        'validation_pattern': 'validationPattern',
        'validation_pattern_metadata': 'validationPatternMetadata',
        'value': 'value',
        'value_metadata': 'valueMetadata',
        'width': 'width',
        'width_metadata': 'widthMetadata',
        'x_position': 'xPosition',
        'x_position_metadata': 'xPositionMetadata',
        'y_position': 'yPosition',
        'y_position_metadata': 'yPositionMetadata'
    }

    def __init__(self, anchor_allow_white_space_in_characters=None, anchor_allow_white_space_in_characters_metadata=None, anchor_case_sensitive=None, anchor_case_sensitive_metadata=None, anchor_horizontal_alignment=None, anchor_horizontal_alignment_metadata=None, anchor_ignore_if_not_present=None, anchor_ignore_if_not_present_metadata=None, anchor_match_whole_word=None, anchor_match_whole_word_metadata=None, anchor_string=None, anchor_string_metadata=None, anchor_tab_processor_version=None, anchor_tab_processor_version_metadata=None, anchor_units=None, anchor_units_metadata=None, anchor_x_offset=None, anchor_x_offset_metadata=None, anchor_y_offset=None, anchor_y_offset_metadata=None, bold=None, bold_metadata=None, conceal_value_on_document=None, conceal_value_on_document_metadata=None, conditional_parent_label=None, conditional_parent_label_metadata=None, conditional_parent_value=None, conditional_parent_value_metadata=None, custom_tab_id=None, custom_tab_id_metadata=None, disable_auto_size=None, disable_auto_size_metadata=None, document_id=None, document_id_metadata=None, error_details=None, font=None, font_color=None, font_color_metadata=None, font_metadata=None, font_size=None, font_size_metadata=None, form_order=None, form_order_metadata=None, form_page_label=None, form_page_label_metadata=None, form_page_number=None, form_page_number_metadata=None, formula=None, formula_metadata=None, height=None, height_metadata=None, is_payment_amount=None, is_payment_amount_metadata=None, italic=None, italic_metadata=None, locale_policy=None, locked=None, locked_metadata=None, max_length=None, max_length_metadata=None, merge_field=None, merge_field_xml=None, name=None, name_metadata=None, original_value=None, original_value_metadata=None, page_number=None, page_number_metadata=None, recipient_id=None, recipient_id_guid=None, recipient_id_guid_metadata=None, recipient_id_metadata=None, require_all=None, require_all_metadata=None, required=None, required_metadata=None, require_initial_on_shared_change=None, require_initial_on_shared_change_metadata=None, sender_required=None, sender_required_metadata=None, shared=None, shared_metadata=None, smart_contract_information=None, status=None, status_metadata=None, tab_group_labels=None, tab_group_labels_metadata=None, tab_id=None, tab_id_metadata=None, tab_label=None, tab_label_metadata=None, tab_order=None, tab_order_metadata=None, tab_type=None, tab_type_metadata=None, template_locked=None, template_locked_metadata=None, template_required=None, template_required_metadata=None, tooltip=None, tool_tip_metadata=None, underline=None, underline_metadata=None, validation_message=None, validation_message_metadata=None, validation_pattern=None, validation_pattern_metadata=None, value=None, value_metadata=None, width=None, width_metadata=None, x_position=None, x_position_metadata=None, y_position=None, y_position_metadata=None):  # noqa: E501
        """Text - a model defined in Swagger"""  # noqa: E501

        self._anchor_allow_white_space_in_characters = None
        self._anchor_allow_white_space_in_characters_metadata = None
        self._anchor_case_sensitive = None
        self._anchor_case_sensitive_metadata = None
        self._anchor_horizontal_alignment = None
        self._anchor_horizontal_alignment_metadata = None
        self._anchor_ignore_if_not_present = None
        self._anchor_ignore_if_not_present_metadata = None
        self._anchor_match_whole_word = None
        self._anchor_match_whole_word_metadata = None
        self._anchor_string = None
        self._anchor_string_metadata = None
        self._anchor_tab_processor_version = None
        self._anchor_tab_processor_version_metadata = None
        self._anchor_units = None
        self._anchor_units_metadata = None
        self._anchor_x_offset = None
        self._anchor_x_offset_metadata = None
        self._anchor_y_offset = None
        self._anchor_y_offset_metadata = None
        self._bold = None
        self._bold_metadata = None
        self._conceal_value_on_document = None
        self._conceal_value_on_document_metadata = None
        self._conditional_parent_label = None
        self._conditional_parent_label_metadata = None
        self._conditional_parent_value = None
        self._conditional_parent_value_metadata = None
        self._custom_tab_id = None
        self._custom_tab_id_metadata = None
        self._disable_auto_size = None
        self._disable_auto_size_metadata = None
        self._document_id = None
        self._document_id_metadata = None
        self._error_details = None
        self._font = None
        self._font_color = None
        self._font_color_metadata = None
        self._font_metadata = None
        self._font_size = None
        self._font_size_metadata = None
        self._form_order = None
        self._form_order_metadata = None
        self._form_page_label = None
        self._form_page_label_metadata = None
        self._form_page_number = None
        self._form_page_number_metadata = None
        self._formula = None
        self._formula_metadata = None
        self._height = None
        self._height_metadata = None
        self._is_payment_amount = None
        self._is_payment_amount_metadata = None
        self._italic = None
        self._italic_metadata = None
        self._locale_policy = None
        self._locked = None
        self._locked_metadata = None
        self._max_length = None
        self._max_length_metadata = None
        self._merge_field = None
        self._merge_field_xml = None
        self._name = None
        self._name_metadata = None
        self._original_value = None
        self._original_value_metadata = None
        self._page_number = None
        self._page_number_metadata = None
        self._recipient_id = None
        self._recipient_id_guid = None
        self._recipient_id_guid_metadata = None
        self._recipient_id_metadata = None
        self._require_all = None
        self._require_all_metadata = None
        self._required = None
        self._required_metadata = None
        self._require_initial_on_shared_change = None
        self._require_initial_on_shared_change_metadata = None
        self._sender_required = None
        self._sender_required_metadata = None
        self._shared = None
        self._shared_metadata = None
        self._smart_contract_information = None
        self._status = None
        self._status_metadata = None
        self._tab_group_labels = None
        self._tab_group_labels_metadata = None
        self._tab_id = None
        self._tab_id_metadata = None
        self._tab_label = None
        self._tab_label_metadata = None
        self._tab_order = None
        self._tab_order_metadata = None
        self._tab_type = None
        self._tab_type_metadata = None
        self._template_locked = None
        self._template_locked_metadata = None
        self._template_required = None
        self._template_required_metadata = None
        self._tooltip = None
        self._tool_tip_metadata = None
        self._underline = None
        self._underline_metadata = None
        self._validation_message = None
        self._validation_message_metadata = None
        self._validation_pattern = None
        self._validation_pattern_metadata = None
        self._value = None
        self._value_metadata = None
        self._width = None
        self._width_metadata = None
        self._x_position = None
        self._x_position_metadata = None
        self._y_position = None
        self._y_position_metadata = None
        self.discriminator = None

        if anchor_allow_white_space_in_characters is not None:
            self.anchor_allow_white_space_in_characters = anchor_allow_white_space_in_characters
        if anchor_allow_white_space_in_characters_metadata is not None:
            self.anchor_allow_white_space_in_characters_metadata = anchor_allow_white_space_in_characters_metadata
        if anchor_case_sensitive is not None:
            self.anchor_case_sensitive = anchor_case_sensitive
        if anchor_case_sensitive_metadata is not None:
            self.anchor_case_sensitive_metadata = anchor_case_sensitive_metadata
        if anchor_horizontal_alignment is not None:
            self.anchor_horizontal_alignment = anchor_horizontal_alignment
        if anchor_horizontal_alignment_metadata is not None:
            self.anchor_horizontal_alignment_metadata = anchor_horizontal_alignment_metadata
        if anchor_ignore_if_not_present is not None:
            self.anchor_ignore_if_not_present = anchor_ignore_if_not_present
        if anchor_ignore_if_not_present_metadata is not None:
            self.anchor_ignore_if_not_present_metadata = anchor_ignore_if_not_present_metadata
        if anchor_match_whole_word is not None:
            self.anchor_match_whole_word = anchor_match_whole_word
        if anchor_match_whole_word_metadata is not None:
            self.anchor_match_whole_word_metadata = anchor_match_whole_word_metadata
        if anchor_string is not None:
            self.anchor_string = anchor_string
        if anchor_string_metadata is not None:
            self.anchor_string_metadata = anchor_string_metadata
        if anchor_tab_processor_version is not None:
            self.anchor_tab_processor_version = anchor_tab_processor_version
        if anchor_tab_processor_version_metadata is not None:
            self.anchor_tab_processor_version_metadata = anchor_tab_processor_version_metadata
        if anchor_units is not None:
            self.anchor_units = anchor_units
        if anchor_units_metadata is not None:
            self.anchor_units_metadata = anchor_units_metadata
        if anchor_x_offset is not None:
            self.anchor_x_offset = anchor_x_offset
        if anchor_x_offset_metadata is not None:
            self.anchor_x_offset_metadata = anchor_x_offset_metadata
        if anchor_y_offset is not None:
            self.anchor_y_offset = anchor_y_offset
        if anchor_y_offset_metadata is not None:
            self.anchor_y_offset_metadata = anchor_y_offset_metadata
        if bold is not None:
            self.bold = bold
        if bold_metadata is not None:
            self.bold_metadata = bold_metadata
        if conceal_value_on_document is not None:
            self.conceal_value_on_document = conceal_value_on_document
        if conceal_value_on_document_metadata is not None:
            self.conceal_value_on_document_metadata = conceal_value_on_document_metadata
        if conditional_parent_label is not None:
            self.conditional_parent_label = conditional_parent_label
        if conditional_parent_label_metadata is not None:
            self.conditional_parent_label_metadata = conditional_parent_label_metadata
        if conditional_parent_value is not None:
            self.conditional_parent_value = conditional_parent_value
        if conditional_parent_value_metadata is not None:
            self.conditional_parent_value_metadata = conditional_parent_value_metadata
        if custom_tab_id is not None:
            self.custom_tab_id = custom_tab_id
        if custom_tab_id_metadata is not None:
            self.custom_tab_id_metadata = custom_tab_id_metadata
        if disable_auto_size is not None:
            self.disable_auto_size = disable_auto_size
        if disable_auto_size_metadata is not None:
            self.disable_auto_size_metadata = disable_auto_size_metadata
        if document_id is not None:
            self.document_id = document_id
        if document_id_metadata is not None:
            self.document_id_metadata = document_id_metadata
        if error_details is not None:
            self.error_details = error_details
        if font is not None:
            self.font = font
        if font_color is not None:
            self.font_color = font_color
        if font_color_metadata is not None:
            self.font_color_metadata = font_color_metadata
        if font_metadata is not None:
            self.font_metadata = font_metadata
        if font_size is not None:
            self.font_size = font_size
        if font_size_metadata is not None:
            self.font_size_metadata = font_size_metadata
        if form_order is not None:
            self.form_order = form_order
        if form_order_metadata is not None:
            self.form_order_metadata = form_order_metadata
        if form_page_label is not None:
            self.form_page_label = form_page_label
        if form_page_label_metadata is not None:
            self.form_page_label_metadata = form_page_label_metadata
        if form_page_number is not None:
            self.form_page_number = form_page_number
        if form_page_number_metadata is not None:
            self.form_page_number_metadata = form_page_number_metadata
        if formula is not None:
            self.formula = formula
        if formula_metadata is not None:
            self.formula_metadata = formula_metadata
        if height is not None:
            self.height = height
        if height_metadata is not None:
            self.height_metadata = height_metadata
        if is_payment_amount is not None:
            self.is_payment_amount = is_payment_amount
        if is_payment_amount_metadata is not None:
            self.is_payment_amount_metadata = is_payment_amount_metadata
        if italic is not None:
            self.italic = italic
        if italic_metadata is not None:
            self.italic_metadata = italic_metadata
        if locale_policy is not None:
            self.locale_policy = locale_policy
        if locked is not None:
            self.locked = locked
        if locked_metadata is not None:
            self.locked_metadata = locked_metadata
        if max_length is not None:
            self.max_length = max_length
        if max_length_metadata is not None:
            self.max_length_metadata = max_length_metadata
        if merge_field is not None:
            self.merge_field = merge_field
        if merge_field_xml is not None:
            self.merge_field_xml = merge_field_xml
        if name is not None:
            self.name = name
        if name_metadata is not None:
            self.name_metadata = name_metadata
        if original_value is not None:
            self.original_value = original_value
        if original_value_metadata is not None:
            self.original_value_metadata = original_value_metadata
        if page_number is not None:
            self.page_number = page_number
        if page_number_metadata is not None:
            self.page_number_metadata = page_number_metadata
        if recipient_id is not None:
            self.recipient_id = recipient_id
        if recipient_id_guid is not None:
            self.recipient_id_guid = recipient_id_guid
        if recipient_id_guid_metadata is not None:
            self.recipient_id_guid_metadata = recipient_id_guid_metadata
        if recipient_id_metadata is not None:
            self.recipient_id_metadata = recipient_id_metadata
        if require_all is not None:
            self.require_all = require_all
        if require_all_metadata is not None:
            self.require_all_metadata = require_all_metadata
        if required is not None:
            self.required = required
        if required_metadata is not None:
            self.required_metadata = required_metadata
        if require_initial_on_shared_change is not None:
            self.require_initial_on_shared_change = require_initial_on_shared_change
        if require_initial_on_shared_change_metadata is not None:
            self.require_initial_on_shared_change_metadata = require_initial_on_shared_change_metadata
        if sender_required is not None:
            self.sender_required = sender_required
        if sender_required_metadata is not None:
            self.sender_required_metadata = sender_required_metadata
        if shared is not None:
            self.shared = shared
        if shared_metadata is not None:
            self.shared_metadata = shared_metadata
        if smart_contract_information is not None:
            self.smart_contract_information = smart_contract_information
        if status is not None:
            self.status = status
        if status_metadata is not None:
            self.status_metadata = status_metadata
        if tab_group_labels is not None:
            self.tab_group_labels = tab_group_labels
        if tab_group_labels_metadata is not None:
            self.tab_group_labels_metadata = tab_group_labels_metadata
        if tab_id is not None:
            self.tab_id = tab_id
        if tab_id_metadata is not None:
            self.tab_id_metadata = tab_id_metadata
        if tab_label is not None:
            self.tab_label = tab_label
        if tab_label_metadata is not None:
            self.tab_label_metadata = tab_label_metadata
        if tab_order is not None:
            self.tab_order = tab_order
        if tab_order_metadata is not None:
            self.tab_order_metadata = tab_order_metadata
        if tab_type is not None:
            self.tab_type = tab_type
        if tab_type_metadata is not None:
            self.tab_type_metadata = tab_type_metadata
        if template_locked is not None:
            self.template_locked = template_locked
        if template_locked_metadata is not None:
            self.template_locked_metadata = template_locked_metadata
        if template_required is not None:
            self.template_required = template_required
        if template_required_metadata is not None:
            self.template_required_metadata = template_required_metadata
        if tooltip is not None:
            self.tooltip = tooltip
        if tool_tip_metadata is not None:
            self.tool_tip_metadata = tool_tip_metadata
        if underline is not None:
            self.underline = underline
        if underline_metadata is not None:
            self.underline_metadata = underline_metadata
        if validation_message is not None:
            self.validation_message = validation_message
        if validation_message_metadata is not None:
            self.validation_message_metadata = validation_message_metadata
        if validation_pattern is not None:
            self.validation_pattern = validation_pattern
        if validation_pattern_metadata is not None:
            self.validation_pattern_metadata = validation_pattern_metadata
        if value is not None:
            self.value = value
        if value_metadata is not None:
            self.value_metadata = value_metadata
        if width is not None:
            self.width = width
        if width_metadata is not None:
            self.width_metadata = width_metadata
        if x_position is not None:
            self.x_position = x_position
        if x_position_metadata is not None:
            self.x_position_metadata = x_position_metadata
        if y_position is not None:
            self.y_position = y_position
        if y_position_metadata is not None:
            self.y_position_metadata = y_position_metadata

    @property
    def anchor_allow_white_space_in_characters(self):
        """Gets the anchor_allow_white_space_in_characters of this Text.  # noqa: E501

          # noqa: E501

        :return: The anchor_allow_white_space_in_characters of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_allow_white_space_in_characters

    @anchor_allow_white_space_in_characters.setter
    def anchor_allow_white_space_in_characters(self, anchor_allow_white_space_in_characters):
        """Sets the anchor_allow_white_space_in_characters of this Text.

          # noqa: E501

        :param anchor_allow_white_space_in_characters: The anchor_allow_white_space_in_characters of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_allow_white_space_in_characters = anchor_allow_white_space_in_characters

    @property
    def anchor_allow_white_space_in_characters_metadata(self):
        """Gets the anchor_allow_white_space_in_characters_metadata of this Text.  # noqa: E501


        :return: The anchor_allow_white_space_in_characters_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_allow_white_space_in_characters_metadata

    @anchor_allow_white_space_in_characters_metadata.setter
    def anchor_allow_white_space_in_characters_metadata(self, anchor_allow_white_space_in_characters_metadata):
        """Sets the anchor_allow_white_space_in_characters_metadata of this Text.


        :param anchor_allow_white_space_in_characters_metadata: The anchor_allow_white_space_in_characters_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_allow_white_space_in_characters_metadata = anchor_allow_white_space_in_characters_metadata

    @property
    def anchor_case_sensitive(self):
        """Gets the anchor_case_sensitive of this Text.  # noqa: E501

        When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.  # noqa: E501

        :return: The anchor_case_sensitive of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_case_sensitive

    @anchor_case_sensitive.setter
    def anchor_case_sensitive(self, anchor_case_sensitive):
        """Sets the anchor_case_sensitive of this Text.

        When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.  # noqa: E501

        :param anchor_case_sensitive: The anchor_case_sensitive of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_case_sensitive = anchor_case_sensitive

    @property
    def anchor_case_sensitive_metadata(self):
        """Gets the anchor_case_sensitive_metadata of this Text.  # noqa: E501


        :return: The anchor_case_sensitive_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_case_sensitive_metadata

    @anchor_case_sensitive_metadata.setter
    def anchor_case_sensitive_metadata(self, anchor_case_sensitive_metadata):
        """Sets the anchor_case_sensitive_metadata of this Text.


        :param anchor_case_sensitive_metadata: The anchor_case_sensitive_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_case_sensitive_metadata = anchor_case_sensitive_metadata

    @property
    def anchor_horizontal_alignment(self):
        """Gets the anchor_horizontal_alignment of this Text.  # noqa: E501

        Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.  # noqa: E501

        :return: The anchor_horizontal_alignment of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_horizontal_alignment

    @anchor_horizontal_alignment.setter
    def anchor_horizontal_alignment(self, anchor_horizontal_alignment):
        """Sets the anchor_horizontal_alignment of this Text.

        Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.  # noqa: E501

        :param anchor_horizontal_alignment: The anchor_horizontal_alignment of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_horizontal_alignment = anchor_horizontal_alignment

    @property
    def anchor_horizontal_alignment_metadata(self):
        """Gets the anchor_horizontal_alignment_metadata of this Text.  # noqa: E501


        :return: The anchor_horizontal_alignment_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_horizontal_alignment_metadata

    @anchor_horizontal_alignment_metadata.setter
    def anchor_horizontal_alignment_metadata(self, anchor_horizontal_alignment_metadata):
        """Sets the anchor_horizontal_alignment_metadata of this Text.


        :param anchor_horizontal_alignment_metadata: The anchor_horizontal_alignment_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_horizontal_alignment_metadata = anchor_horizontal_alignment_metadata

    @property
    def anchor_ignore_if_not_present(self):
        """Gets the anchor_ignore_if_not_present of this Text.  # noqa: E501

        When set to **true**, this tab is ignored if anchorString is not found in the document.  # noqa: E501

        :return: The anchor_ignore_if_not_present of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_ignore_if_not_present

    @anchor_ignore_if_not_present.setter
    def anchor_ignore_if_not_present(self, anchor_ignore_if_not_present):
        """Sets the anchor_ignore_if_not_present of this Text.

        When set to **true**, this tab is ignored if anchorString is not found in the document.  # noqa: E501

        :param anchor_ignore_if_not_present: The anchor_ignore_if_not_present of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_ignore_if_not_present = anchor_ignore_if_not_present

    @property
    def anchor_ignore_if_not_present_metadata(self):
        """Gets the anchor_ignore_if_not_present_metadata of this Text.  # noqa: E501


        :return: The anchor_ignore_if_not_present_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_ignore_if_not_present_metadata

    @anchor_ignore_if_not_present_metadata.setter
    def anchor_ignore_if_not_present_metadata(self, anchor_ignore_if_not_present_metadata):
        """Sets the anchor_ignore_if_not_present_metadata of this Text.


        :param anchor_ignore_if_not_present_metadata: The anchor_ignore_if_not_present_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_ignore_if_not_present_metadata = anchor_ignore_if_not_present_metadata

    @property
    def anchor_match_whole_word(self):
        """Gets the anchor_match_whole_word of this Text.  # noqa: E501

        When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.  # noqa: E501

        :return: The anchor_match_whole_word of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_match_whole_word

    @anchor_match_whole_word.setter
    def anchor_match_whole_word(self, anchor_match_whole_word):
        """Sets the anchor_match_whole_word of this Text.

        When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.  # noqa: E501

        :param anchor_match_whole_word: The anchor_match_whole_word of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_match_whole_word = anchor_match_whole_word

    @property
    def anchor_match_whole_word_metadata(self):
        """Gets the anchor_match_whole_word_metadata of this Text.  # noqa: E501


        :return: The anchor_match_whole_word_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_match_whole_word_metadata

    @anchor_match_whole_word_metadata.setter
    def anchor_match_whole_word_metadata(self, anchor_match_whole_word_metadata):
        """Sets the anchor_match_whole_word_metadata of this Text.


        :param anchor_match_whole_word_metadata: The anchor_match_whole_word_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_match_whole_word_metadata = anchor_match_whole_word_metadata

    @property
    def anchor_string(self):
        """Gets the anchor_string of this Text.  # noqa: E501

        Anchor text information for a radio button.  # noqa: E501

        :return: The anchor_string of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_string

    @anchor_string.setter
    def anchor_string(self, anchor_string):
        """Sets the anchor_string of this Text.

        Anchor text information for a radio button.  # noqa: E501

        :param anchor_string: The anchor_string of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_string = anchor_string

    @property
    def anchor_string_metadata(self):
        """Gets the anchor_string_metadata of this Text.  # noqa: E501


        :return: The anchor_string_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_string_metadata

    @anchor_string_metadata.setter
    def anchor_string_metadata(self, anchor_string_metadata):
        """Sets the anchor_string_metadata of this Text.


        :param anchor_string_metadata: The anchor_string_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_string_metadata = anchor_string_metadata

    @property
    def anchor_tab_processor_version(self):
        """Gets the anchor_tab_processor_version of this Text.  # noqa: E501

          # noqa: E501

        :return: The anchor_tab_processor_version of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_tab_processor_version

    @anchor_tab_processor_version.setter
    def anchor_tab_processor_version(self, anchor_tab_processor_version):
        """Sets the anchor_tab_processor_version of this Text.

          # noqa: E501

        :param anchor_tab_processor_version: The anchor_tab_processor_version of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_tab_processor_version = anchor_tab_processor_version

    @property
    def anchor_tab_processor_version_metadata(self):
        """Gets the anchor_tab_processor_version_metadata of this Text.  # noqa: E501


        :return: The anchor_tab_processor_version_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_tab_processor_version_metadata

    @anchor_tab_processor_version_metadata.setter
    def anchor_tab_processor_version_metadata(self, anchor_tab_processor_version_metadata):
        """Sets the anchor_tab_processor_version_metadata of this Text.


        :param anchor_tab_processor_version_metadata: The anchor_tab_processor_version_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_tab_processor_version_metadata = anchor_tab_processor_version_metadata

    @property
    def anchor_units(self):
        """Gets the anchor_units of this Text.  # noqa: E501

        Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.  # noqa: E501

        :return: The anchor_units of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_units

    @anchor_units.setter
    def anchor_units(self, anchor_units):
        """Sets the anchor_units of this Text.

        Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.  # noqa: E501

        :param anchor_units: The anchor_units of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_units = anchor_units

    @property
    def anchor_units_metadata(self):
        """Gets the anchor_units_metadata of this Text.  # noqa: E501


        :return: The anchor_units_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_units_metadata

    @anchor_units_metadata.setter
    def anchor_units_metadata(self, anchor_units_metadata):
        """Sets the anchor_units_metadata of this Text.


        :param anchor_units_metadata: The anchor_units_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_units_metadata = anchor_units_metadata

    @property
    def anchor_x_offset(self):
        """Gets the anchor_x_offset of this Text.  # noqa: E501

        Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :return: The anchor_x_offset of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_x_offset

    @anchor_x_offset.setter
    def anchor_x_offset(self, anchor_x_offset):
        """Sets the anchor_x_offset of this Text.

        Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :param anchor_x_offset: The anchor_x_offset of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_x_offset = anchor_x_offset

    @property
    def anchor_x_offset_metadata(self):
        """Gets the anchor_x_offset_metadata of this Text.  # noqa: E501


        :return: The anchor_x_offset_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_x_offset_metadata

    @anchor_x_offset_metadata.setter
    def anchor_x_offset_metadata(self, anchor_x_offset_metadata):
        """Sets the anchor_x_offset_metadata of this Text.


        :param anchor_x_offset_metadata: The anchor_x_offset_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_x_offset_metadata = anchor_x_offset_metadata

    @property
    def anchor_y_offset(self):
        """Gets the anchor_y_offset of this Text.  # noqa: E501

        Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :return: The anchor_y_offset of this Text.  # noqa: E501
        :rtype: str
        """
        return self._anchor_y_offset

    @anchor_y_offset.setter
    def anchor_y_offset(self, anchor_y_offset):
        """Sets the anchor_y_offset of this Text.

        Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :param anchor_y_offset: The anchor_y_offset of this Text.  # noqa: E501
        :type: str
        """

        self._anchor_y_offset = anchor_y_offset

    @property
    def anchor_y_offset_metadata(self):
        """Gets the anchor_y_offset_metadata of this Text.  # noqa: E501


        :return: The anchor_y_offset_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_y_offset_metadata

    @anchor_y_offset_metadata.setter
    def anchor_y_offset_metadata(self, anchor_y_offset_metadata):
        """Sets the anchor_y_offset_metadata of this Text.


        :param anchor_y_offset_metadata: The anchor_y_offset_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_y_offset_metadata = anchor_y_offset_metadata

    @property
    def bold(self):
        """Gets the bold of this Text.  # noqa: E501

        When set to **true**, the information in the tab is bold.  # noqa: E501

        :return: The bold of this Text.  # noqa: E501
        :rtype: str
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this Text.

        When set to **true**, the information in the tab is bold.  # noqa: E501

        :param bold: The bold of this Text.  # noqa: E501
        :type: str
        """

        self._bold = bold

    @property
    def bold_metadata(self):
        """Gets the bold_metadata of this Text.  # noqa: E501


        :return: The bold_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._bold_metadata

    @bold_metadata.setter
    def bold_metadata(self, bold_metadata):
        """Sets the bold_metadata of this Text.


        :param bold_metadata: The bold_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._bold_metadata = bold_metadata

    @property
    def conceal_value_on_document(self):
        """Gets the conceal_value_on_document of this Text.  # noqa: E501

        When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.  When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.  This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.  # noqa: E501

        :return: The conceal_value_on_document of this Text.  # noqa: E501
        :rtype: str
        """
        return self._conceal_value_on_document

    @conceal_value_on_document.setter
    def conceal_value_on_document(self, conceal_value_on_document):
        """Sets the conceal_value_on_document of this Text.

        When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.  When an envelope is completed the information is available to the sender through the Form Data link in the DocuSign Console.  This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes.  # noqa: E501

        :param conceal_value_on_document: The conceal_value_on_document of this Text.  # noqa: E501
        :type: str
        """

        self._conceal_value_on_document = conceal_value_on_document

    @property
    def conceal_value_on_document_metadata(self):
        """Gets the conceal_value_on_document_metadata of this Text.  # noqa: E501


        :return: The conceal_value_on_document_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._conceal_value_on_document_metadata

    @conceal_value_on_document_metadata.setter
    def conceal_value_on_document_metadata(self, conceal_value_on_document_metadata):
        """Sets the conceal_value_on_document_metadata of this Text.


        :param conceal_value_on_document_metadata: The conceal_value_on_document_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._conceal_value_on_document_metadata = conceal_value_on_document_metadata

    @property
    def conditional_parent_label(self):
        """Gets the conditional_parent_label of this Text.  # noqa: E501

        For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.  # noqa: E501

        :return: The conditional_parent_label of this Text.  # noqa: E501
        :rtype: str
        """
        return self._conditional_parent_label

    @conditional_parent_label.setter
    def conditional_parent_label(self, conditional_parent_label):
        """Sets the conditional_parent_label of this Text.

        For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.  # noqa: E501

        :param conditional_parent_label: The conditional_parent_label of this Text.  # noqa: E501
        :type: str
        """

        self._conditional_parent_label = conditional_parent_label

    @property
    def conditional_parent_label_metadata(self):
        """Gets the conditional_parent_label_metadata of this Text.  # noqa: E501


        :return: The conditional_parent_label_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._conditional_parent_label_metadata

    @conditional_parent_label_metadata.setter
    def conditional_parent_label_metadata(self, conditional_parent_label_metadata):
        """Sets the conditional_parent_label_metadata of this Text.


        :param conditional_parent_label_metadata: The conditional_parent_label_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._conditional_parent_label_metadata = conditional_parent_label_metadata

    @property
    def conditional_parent_value(self):
        """Gets the conditional_parent_value of this Text.  # noqa: E501

        For conditional fields, this is the value of the parent tab that controls the tab's visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.   # noqa: E501

        :return: The conditional_parent_value of this Text.  # noqa: E501
        :rtype: str
        """
        return self._conditional_parent_value

    @conditional_parent_value.setter
    def conditional_parent_value(self, conditional_parent_value):
        """Sets the conditional_parent_value of this Text.

        For conditional fields, this is the value of the parent tab that controls the tab's visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.   # noqa: E501

        :param conditional_parent_value: The conditional_parent_value of this Text.  # noqa: E501
        :type: str
        """

        self._conditional_parent_value = conditional_parent_value

    @property
    def conditional_parent_value_metadata(self):
        """Gets the conditional_parent_value_metadata of this Text.  # noqa: E501


        :return: The conditional_parent_value_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._conditional_parent_value_metadata

    @conditional_parent_value_metadata.setter
    def conditional_parent_value_metadata(self, conditional_parent_value_metadata):
        """Sets the conditional_parent_value_metadata of this Text.


        :param conditional_parent_value_metadata: The conditional_parent_value_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._conditional_parent_value_metadata = conditional_parent_value_metadata

    @property
    def custom_tab_id(self):
        """Gets the custom_tab_id of this Text.  # noqa: E501

        The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.  # noqa: E501

        :return: The custom_tab_id of this Text.  # noqa: E501
        :rtype: str
        """
        return self._custom_tab_id

    @custom_tab_id.setter
    def custom_tab_id(self, custom_tab_id):
        """Sets the custom_tab_id of this Text.

        The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.  # noqa: E501

        :param custom_tab_id: The custom_tab_id of this Text.  # noqa: E501
        :type: str
        """

        self._custom_tab_id = custom_tab_id

    @property
    def custom_tab_id_metadata(self):
        """Gets the custom_tab_id_metadata of this Text.  # noqa: E501


        :return: The custom_tab_id_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._custom_tab_id_metadata

    @custom_tab_id_metadata.setter
    def custom_tab_id_metadata(self, custom_tab_id_metadata):
        """Sets the custom_tab_id_metadata of this Text.


        :param custom_tab_id_metadata: The custom_tab_id_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._custom_tab_id_metadata = custom_tab_id_metadata

    @property
    def disable_auto_size(self):
        """Gets the disable_auto_size of this Text.  # noqa: E501

        When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.  # noqa: E501

        :return: The disable_auto_size of this Text.  # noqa: E501
        :rtype: str
        """
        return self._disable_auto_size

    @disable_auto_size.setter
    def disable_auto_size(self, disable_auto_size):
        """Sets the disable_auto_size of this Text.

        When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes.  # noqa: E501

        :param disable_auto_size: The disable_auto_size of this Text.  # noqa: E501
        :type: str
        """

        self._disable_auto_size = disable_auto_size

    @property
    def disable_auto_size_metadata(self):
        """Gets the disable_auto_size_metadata of this Text.  # noqa: E501


        :return: The disable_auto_size_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._disable_auto_size_metadata

    @disable_auto_size_metadata.setter
    def disable_auto_size_metadata(self, disable_auto_size_metadata):
        """Sets the disable_auto_size_metadata of this Text.


        :param disable_auto_size_metadata: The disable_auto_size_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._disable_auto_size_metadata = disable_auto_size_metadata

    @property
    def document_id(self):
        """Gets the document_id of this Text.  # noqa: E501

        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.  # noqa: E501

        :return: The document_id of this Text.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Text.

        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.  # noqa: E501

        :param document_id: The document_id of this Text.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def document_id_metadata(self):
        """Gets the document_id_metadata of this Text.  # noqa: E501


        :return: The document_id_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._document_id_metadata

    @document_id_metadata.setter
    def document_id_metadata(self, document_id_metadata):
        """Sets the document_id_metadata of this Text.


        :param document_id_metadata: The document_id_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._document_id_metadata = document_id_metadata

    @property
    def error_details(self):
        """Gets the error_details of this Text.  # noqa: E501


        :return: The error_details of this Text.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this Text.


        :param error_details: The error_details of this Text.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def font(self):
        """Gets the font of this Text.  # noqa: E501

        The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.  # noqa: E501

        :return: The font of this Text.  # noqa: E501
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this Text.

        The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.  # noqa: E501

        :param font: The font of this Text.  # noqa: E501
        :type: str
        """

        self._font = font

    @property
    def font_color(self):
        """Gets the font_color of this Text.  # noqa: E501

        The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.  # noqa: E501

        :return: The font_color of this Text.  # noqa: E501
        :rtype: str
        """
        return self._font_color

    @font_color.setter
    def font_color(self, font_color):
        """Sets the font_color of this Text.

        The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.  # noqa: E501

        :param font_color: The font_color of this Text.  # noqa: E501
        :type: str
        """

        self._font_color = font_color

    @property
    def font_color_metadata(self):
        """Gets the font_color_metadata of this Text.  # noqa: E501


        :return: The font_color_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_color_metadata

    @font_color_metadata.setter
    def font_color_metadata(self, font_color_metadata):
        """Sets the font_color_metadata of this Text.


        :param font_color_metadata: The font_color_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_color_metadata = font_color_metadata

    @property
    def font_metadata(self):
        """Gets the font_metadata of this Text.  # noqa: E501


        :return: The font_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_metadata

    @font_metadata.setter
    def font_metadata(self, font_metadata):
        """Sets the font_metadata of this Text.


        :param font_metadata: The font_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_metadata = font_metadata

    @property
    def font_size(self):
        """Gets the font_size of this Text.  # noqa: E501

        The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.  # noqa: E501

        :return: The font_size of this Text.  # noqa: E501
        :rtype: str
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this Text.

        The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.  # noqa: E501

        :param font_size: The font_size of this Text.  # noqa: E501
        :type: str
        """

        self._font_size = font_size

    @property
    def font_size_metadata(self):
        """Gets the font_size_metadata of this Text.  # noqa: E501


        :return: The font_size_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_size_metadata

    @font_size_metadata.setter
    def font_size_metadata(self, font_size_metadata):
        """Sets the font_size_metadata of this Text.


        :param font_size_metadata: The font_size_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_size_metadata = font_size_metadata

    @property
    def form_order(self):
        """Gets the form_order of this Text.  # noqa: E501

          # noqa: E501

        :return: The form_order of this Text.  # noqa: E501
        :rtype: str
        """
        return self._form_order

    @form_order.setter
    def form_order(self, form_order):
        """Sets the form_order of this Text.

          # noqa: E501

        :param form_order: The form_order of this Text.  # noqa: E501
        :type: str
        """

        self._form_order = form_order

    @property
    def form_order_metadata(self):
        """Gets the form_order_metadata of this Text.  # noqa: E501


        :return: The form_order_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._form_order_metadata

    @form_order_metadata.setter
    def form_order_metadata(self, form_order_metadata):
        """Sets the form_order_metadata of this Text.


        :param form_order_metadata: The form_order_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._form_order_metadata = form_order_metadata

    @property
    def form_page_label(self):
        """Gets the form_page_label of this Text.  # noqa: E501

          # noqa: E501

        :return: The form_page_label of this Text.  # noqa: E501
        :rtype: str
        """
        return self._form_page_label

    @form_page_label.setter
    def form_page_label(self, form_page_label):
        """Sets the form_page_label of this Text.

          # noqa: E501

        :param form_page_label: The form_page_label of this Text.  # noqa: E501
        :type: str
        """

        self._form_page_label = form_page_label

    @property
    def form_page_label_metadata(self):
        """Gets the form_page_label_metadata of this Text.  # noqa: E501


        :return: The form_page_label_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._form_page_label_metadata

    @form_page_label_metadata.setter
    def form_page_label_metadata(self, form_page_label_metadata):
        """Sets the form_page_label_metadata of this Text.


        :param form_page_label_metadata: The form_page_label_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._form_page_label_metadata = form_page_label_metadata

    @property
    def form_page_number(self):
        """Gets the form_page_number of this Text.  # noqa: E501

          # noqa: E501

        :return: The form_page_number of this Text.  # noqa: E501
        :rtype: str
        """
        return self._form_page_number

    @form_page_number.setter
    def form_page_number(self, form_page_number):
        """Sets the form_page_number of this Text.

          # noqa: E501

        :param form_page_number: The form_page_number of this Text.  # noqa: E501
        :type: str
        """

        self._form_page_number = form_page_number

    @property
    def form_page_number_metadata(self):
        """Gets the form_page_number_metadata of this Text.  # noqa: E501


        :return: The form_page_number_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._form_page_number_metadata

    @form_page_number_metadata.setter
    def form_page_number_metadata(self, form_page_number_metadata):
        """Sets the form_page_number_metadata of this Text.


        :param form_page_number_metadata: The form_page_number_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._form_page_number_metadata = form_page_number_metadata

    @property
    def formula(self):
        """Gets the formula of this Text.  # noqa: E501

        The Formula string contains the TabLabel for the reference tabs used in the formula and calculation operators. Each TabLabel must be contained in brackets.  Maximum Length: 2000 characters.  *Example*: Three tabs (TabLabels: Line1, Line2, and Tax) need to be added together. The formula string would be:   [Line1]+[Line2]+[Tax]  # noqa: E501

        :return: The formula of this Text.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this Text.

        The Formula string contains the TabLabel for the reference tabs used in the formula and calculation operators. Each TabLabel must be contained in brackets.  Maximum Length: 2000 characters.  *Example*: Three tabs (TabLabels: Line1, Line2, and Tax) need to be added together. The formula string would be:   [Line1]+[Line2]+[Tax]  # noqa: E501

        :param formula: The formula of this Text.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def formula_metadata(self):
        """Gets the formula_metadata of this Text.  # noqa: E501


        :return: The formula_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._formula_metadata

    @formula_metadata.setter
    def formula_metadata(self, formula_metadata):
        """Sets the formula_metadata of this Text.


        :param formula_metadata: The formula_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._formula_metadata = formula_metadata

    @property
    def height(self):
        """Gets the height of this Text.  # noqa: E501

        Height of the tab in pixels.  # noqa: E501

        :return: The height of this Text.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Text.

        Height of the tab in pixels.  # noqa: E501

        :param height: The height of this Text.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def height_metadata(self):
        """Gets the height_metadata of this Text.  # noqa: E501


        :return: The height_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._height_metadata

    @height_metadata.setter
    def height_metadata(self, height_metadata):
        """Sets the height_metadata of this Text.


        :param height_metadata: The height_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._height_metadata = height_metadata

    @property
    def is_payment_amount(self):
        """Gets the is_payment_amount of this Text.  # noqa: E501

        When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.   # noqa: E501

        :return: The is_payment_amount of this Text.  # noqa: E501
        :rtype: str
        """
        return self._is_payment_amount

    @is_payment_amount.setter
    def is_payment_amount(self, is_payment_amount):
        """Sets the is_payment_amount of this Text.

        When set to **true**, sets this as a payment tab. Can only be used with Text, Number, Formula, or List tabs. The value of the tab must be a number.   # noqa: E501

        :param is_payment_amount: The is_payment_amount of this Text.  # noqa: E501
        :type: str
        """

        self._is_payment_amount = is_payment_amount

    @property
    def is_payment_amount_metadata(self):
        """Gets the is_payment_amount_metadata of this Text.  # noqa: E501


        :return: The is_payment_amount_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._is_payment_amount_metadata

    @is_payment_amount_metadata.setter
    def is_payment_amount_metadata(self, is_payment_amount_metadata):
        """Sets the is_payment_amount_metadata of this Text.


        :param is_payment_amount_metadata: The is_payment_amount_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._is_payment_amount_metadata = is_payment_amount_metadata

    @property
    def italic(self):
        """Gets the italic of this Text.  # noqa: E501

        When set to **true**, the information in the tab is italic.  # noqa: E501

        :return: The italic of this Text.  # noqa: E501
        :rtype: str
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this Text.

        When set to **true**, the information in the tab is italic.  # noqa: E501

        :param italic: The italic of this Text.  # noqa: E501
        :type: str
        """

        self._italic = italic

    @property
    def italic_metadata(self):
        """Gets the italic_metadata of this Text.  # noqa: E501


        :return: The italic_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._italic_metadata

    @italic_metadata.setter
    def italic_metadata(self, italic_metadata):
        """Sets the italic_metadata of this Text.


        :param italic_metadata: The italic_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._italic_metadata = italic_metadata

    @property
    def locale_policy(self):
        """Gets the locale_policy of this Text.  # noqa: E501


        :return: The locale_policy of this Text.  # noqa: E501
        :rtype: LocalePolicyTab
        """
        return self._locale_policy

    @locale_policy.setter
    def locale_policy(self, locale_policy):
        """Sets the locale_policy of this Text.


        :param locale_policy: The locale_policy of this Text.  # noqa: E501
        :type: LocalePolicyTab
        """

        self._locale_policy = locale_policy

    @property
    def locked(self):
        """Gets the locked of this Text.  # noqa: E501

        When set to **true**, the signer cannot change the data of the custom tab.  # noqa: E501

        :return: The locked of this Text.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Text.

        When set to **true**, the signer cannot change the data of the custom tab.  # noqa: E501

        :param locked: The locked of this Text.  # noqa: E501
        :type: str
        """

        self._locked = locked

    @property
    def locked_metadata(self):
        """Gets the locked_metadata of this Text.  # noqa: E501


        :return: The locked_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._locked_metadata

    @locked_metadata.setter
    def locked_metadata(self, locked_metadata):
        """Sets the locked_metadata of this Text.


        :param locked_metadata: The locked_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._locked_metadata = locked_metadata

    @property
    def max_length(self):
        """Gets the max_length of this Text.  # noqa: E501

        An optional value that describes the maximum length of the property when the property is a string.  # noqa: E501

        :return: The max_length of this Text.  # noqa: E501
        :rtype: str
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this Text.

        An optional value that describes the maximum length of the property when the property is a string.  # noqa: E501

        :param max_length: The max_length of this Text.  # noqa: E501
        :type: str
        """

        self._max_length = max_length

    @property
    def max_length_metadata(self):
        """Gets the max_length_metadata of this Text.  # noqa: E501


        :return: The max_length_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._max_length_metadata

    @max_length_metadata.setter
    def max_length_metadata(self, max_length_metadata):
        """Sets the max_length_metadata of this Text.


        :param max_length_metadata: The max_length_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._max_length_metadata = max_length_metadata

    @property
    def merge_field(self):
        """Gets the merge_field of this Text.  # noqa: E501


        :return: The merge_field of this Text.  # noqa: E501
        :rtype: MergeField
        """
        return self._merge_field

    @merge_field.setter
    def merge_field(self, merge_field):
        """Sets the merge_field of this Text.


        :param merge_field: The merge_field of this Text.  # noqa: E501
        :type: MergeField
        """

        self._merge_field = merge_field

    @property
    def merge_field_xml(self):
        """Gets the merge_field_xml of this Text.  # noqa: E501

          # noqa: E501

        :return: The merge_field_xml of this Text.  # noqa: E501
        :rtype: str
        """
        return self._merge_field_xml

    @merge_field_xml.setter
    def merge_field_xml(self, merge_field_xml):
        """Sets the merge_field_xml of this Text.

          # noqa: E501

        :param merge_field_xml: The merge_field_xml of this Text.  # noqa: E501
        :type: str
        """

        self._merge_field_xml = merge_field_xml

    @property
    def name(self):
        """Gets the name of this Text.  # noqa: E501

        Specifies the tool tip text for the tab.  # noqa: E501

        :return: The name of this Text.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Text.

        Specifies the tool tip text for the tab.  # noqa: E501

        :param name: The name of this Text.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_metadata(self):
        """Gets the name_metadata of this Text.  # noqa: E501


        :return: The name_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._name_metadata

    @name_metadata.setter
    def name_metadata(self, name_metadata):
        """Sets the name_metadata of this Text.


        :param name_metadata: The name_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._name_metadata = name_metadata

    @property
    def original_value(self):
        """Gets the original_value of this Text.  # noqa: E501

        The initial value of the tab when it was sent to the recipient.   # noqa: E501

        :return: The original_value of this Text.  # noqa: E501
        :rtype: str
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """Sets the original_value of this Text.

        The initial value of the tab when it was sent to the recipient.   # noqa: E501

        :param original_value: The original_value of this Text.  # noqa: E501
        :type: str
        """

        self._original_value = original_value

    @property
    def original_value_metadata(self):
        """Gets the original_value_metadata of this Text.  # noqa: E501


        :return: The original_value_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._original_value_metadata

    @original_value_metadata.setter
    def original_value_metadata(self, original_value_metadata):
        """Sets the original_value_metadata of this Text.


        :param original_value_metadata: The original_value_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._original_value_metadata = original_value_metadata

    @property
    def page_number(self):
        """Gets the page_number of this Text.  # noqa: E501

        Specifies the page number on which the tab is located.  # noqa: E501

        :return: The page_number of this Text.  # noqa: E501
        :rtype: str
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this Text.

        Specifies the page number on which the tab is located.  # noqa: E501

        :param page_number: The page_number of this Text.  # noqa: E501
        :type: str
        """

        self._page_number = page_number

    @property
    def page_number_metadata(self):
        """Gets the page_number_metadata of this Text.  # noqa: E501


        :return: The page_number_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._page_number_metadata

    @page_number_metadata.setter
    def page_number_metadata(self, page_number_metadata):
        """Sets the page_number_metadata of this Text.


        :param page_number_metadata: The page_number_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._page_number_metadata = page_number_metadata

    @property
    def recipient_id(self):
        """Gets the recipient_id of this Text.  # noqa: E501

        Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.  # noqa: E501

        :return: The recipient_id of this Text.  # noqa: E501
        :rtype: str
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """Sets the recipient_id of this Text.

        Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.  # noqa: E501

        :param recipient_id: The recipient_id of this Text.  # noqa: E501
        :type: str
        """

        self._recipient_id = recipient_id

    @property
    def recipient_id_guid(self):
        """Gets the recipient_id_guid of this Text.  # noqa: E501

          # noqa: E501

        :return: The recipient_id_guid of this Text.  # noqa: E501
        :rtype: str
        """
        return self._recipient_id_guid

    @recipient_id_guid.setter
    def recipient_id_guid(self, recipient_id_guid):
        """Sets the recipient_id_guid of this Text.

          # noqa: E501

        :param recipient_id_guid: The recipient_id_guid of this Text.  # noqa: E501
        :type: str
        """

        self._recipient_id_guid = recipient_id_guid

    @property
    def recipient_id_guid_metadata(self):
        """Gets the recipient_id_guid_metadata of this Text.  # noqa: E501


        :return: The recipient_id_guid_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._recipient_id_guid_metadata

    @recipient_id_guid_metadata.setter
    def recipient_id_guid_metadata(self, recipient_id_guid_metadata):
        """Sets the recipient_id_guid_metadata of this Text.


        :param recipient_id_guid_metadata: The recipient_id_guid_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._recipient_id_guid_metadata = recipient_id_guid_metadata

    @property
    def recipient_id_metadata(self):
        """Gets the recipient_id_metadata of this Text.  # noqa: E501


        :return: The recipient_id_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._recipient_id_metadata

    @recipient_id_metadata.setter
    def recipient_id_metadata(self, recipient_id_metadata):
        """Sets the recipient_id_metadata of this Text.


        :param recipient_id_metadata: The recipient_id_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._recipient_id_metadata = recipient_id_metadata

    @property
    def require_all(self):
        """Gets the require_all of this Text.  # noqa: E501

        When set to **true** and shared is true, information must be entered in this field to complete the envelope.   # noqa: E501

        :return: The require_all of this Text.  # noqa: E501
        :rtype: str
        """
        return self._require_all

    @require_all.setter
    def require_all(self, require_all):
        """Sets the require_all of this Text.

        When set to **true** and shared is true, information must be entered in this field to complete the envelope.   # noqa: E501

        :param require_all: The require_all of this Text.  # noqa: E501
        :type: str
        """

        self._require_all = require_all

    @property
    def require_all_metadata(self):
        """Gets the require_all_metadata of this Text.  # noqa: E501


        :return: The require_all_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._require_all_metadata

    @require_all_metadata.setter
    def require_all_metadata(self, require_all_metadata):
        """Sets the require_all_metadata of this Text.


        :param require_all_metadata: The require_all_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._require_all_metadata = require_all_metadata

    @property
    def required(self):
        """Gets the required of this Text.  # noqa: E501

        When set to **true**, the signer is required to fill out this tab  # noqa: E501

        :return: The required of this Text.  # noqa: E501
        :rtype: str
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Text.

        When set to **true**, the signer is required to fill out this tab  # noqa: E501

        :param required: The required of this Text.  # noqa: E501
        :type: str
        """

        self._required = required

    @property
    def required_metadata(self):
        """Gets the required_metadata of this Text.  # noqa: E501


        :return: The required_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._required_metadata

    @required_metadata.setter
    def required_metadata(self, required_metadata):
        """Sets the required_metadata of this Text.


        :param required_metadata: The required_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._required_metadata = required_metadata

    @property
    def require_initial_on_shared_change(self):
        """Gets the require_initial_on_shared_change of this Text.  # noqa: E501

        Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.  # noqa: E501

        :return: The require_initial_on_shared_change of this Text.  # noqa: E501
        :rtype: str
        """
        return self._require_initial_on_shared_change

    @require_initial_on_shared_change.setter
    def require_initial_on_shared_change(self, require_initial_on_shared_change):
        """Sets the require_initial_on_shared_change of this Text.

        Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field.  # noqa: E501

        :param require_initial_on_shared_change: The require_initial_on_shared_change of this Text.  # noqa: E501
        :type: str
        """

        self._require_initial_on_shared_change = require_initial_on_shared_change

    @property
    def require_initial_on_shared_change_metadata(self):
        """Gets the require_initial_on_shared_change_metadata of this Text.  # noqa: E501


        :return: The require_initial_on_shared_change_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._require_initial_on_shared_change_metadata

    @require_initial_on_shared_change_metadata.setter
    def require_initial_on_shared_change_metadata(self, require_initial_on_shared_change_metadata):
        """Sets the require_initial_on_shared_change_metadata of this Text.


        :param require_initial_on_shared_change_metadata: The require_initial_on_shared_change_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._require_initial_on_shared_change_metadata = require_initial_on_shared_change_metadata

    @property
    def sender_required(self):
        """Gets the sender_required of this Text.  # noqa: E501

        When set to **true**, the sender must populate the tab before an envelope can be sent using the template.   This value tab can only be changed by modifying (PUT) the template.   Tabs with a `senderRequired` value of true cannot be deleted from an envelope.  # noqa: E501

        :return: The sender_required of this Text.  # noqa: E501
        :rtype: str
        """
        return self._sender_required

    @sender_required.setter
    def sender_required(self, sender_required):
        """Sets the sender_required of this Text.

        When set to **true**, the sender must populate the tab before an envelope can be sent using the template.   This value tab can only be changed by modifying (PUT) the template.   Tabs with a `senderRequired` value of true cannot be deleted from an envelope.  # noqa: E501

        :param sender_required: The sender_required of this Text.  # noqa: E501
        :type: str
        """

        self._sender_required = sender_required

    @property
    def sender_required_metadata(self):
        """Gets the sender_required_metadata of this Text.  # noqa: E501


        :return: The sender_required_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._sender_required_metadata

    @sender_required_metadata.setter
    def sender_required_metadata(self, sender_required_metadata):
        """Sets the sender_required_metadata of this Text.


        :param sender_required_metadata: The sender_required_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._sender_required_metadata = sender_required_metadata

    @property
    def shared(self):
        """Gets the shared of this Text.  # noqa: E501

        When set to **true**, this custom tab is shared.  # noqa: E501

        :return: The shared of this Text.  # noqa: E501
        :rtype: str
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Text.

        When set to **true**, this custom tab is shared.  # noqa: E501

        :param shared: The shared of this Text.  # noqa: E501
        :type: str
        """

        self._shared = shared

    @property
    def shared_metadata(self):
        """Gets the shared_metadata of this Text.  # noqa: E501


        :return: The shared_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._shared_metadata

    @shared_metadata.setter
    def shared_metadata(self, shared_metadata):
        """Sets the shared_metadata of this Text.


        :param shared_metadata: The shared_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._shared_metadata = shared_metadata

    @property
    def smart_contract_information(self):
        """Gets the smart_contract_information of this Text.  # noqa: E501


        :return: The smart_contract_information of this Text.  # noqa: E501
        :rtype: SmartContractInformation
        """
        return self._smart_contract_information

    @smart_contract_information.setter
    def smart_contract_information(self, smart_contract_information):
        """Sets the smart_contract_information of this Text.


        :param smart_contract_information: The smart_contract_information of this Text.  # noqa: E501
        :type: SmartContractInformation
        """

        self._smart_contract_information = smart_contract_information

    @property
    def status(self):
        """Gets the status of this Text.  # noqa: E501

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :return: The status of this Text.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Text.

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :param status: The status of this Text.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_metadata(self):
        """Gets the status_metadata of this Text.  # noqa: E501


        :return: The status_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._status_metadata

    @status_metadata.setter
    def status_metadata(self, status_metadata):
        """Sets the status_metadata of this Text.


        :param status_metadata: The status_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._status_metadata = status_metadata

    @property
    def tab_group_labels(self):
        """Gets the tab_group_labels of this Text.  # noqa: E501

          # noqa: E501

        :return: The tab_group_labels of this Text.  # noqa: E501
        :rtype: list[str]
        """
        return self._tab_group_labels

    @tab_group_labels.setter
    def tab_group_labels(self, tab_group_labels):
        """Sets the tab_group_labels of this Text.

          # noqa: E501

        :param tab_group_labels: The tab_group_labels of this Text.  # noqa: E501
        :type: list[str]
        """

        self._tab_group_labels = tab_group_labels

    @property
    def tab_group_labels_metadata(self):
        """Gets the tab_group_labels_metadata of this Text.  # noqa: E501


        :return: The tab_group_labels_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_group_labels_metadata

    @tab_group_labels_metadata.setter
    def tab_group_labels_metadata(self, tab_group_labels_metadata):
        """Sets the tab_group_labels_metadata of this Text.


        :param tab_group_labels_metadata: The tab_group_labels_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_group_labels_metadata = tab_group_labels_metadata

    @property
    def tab_id(self):
        """Gets the tab_id of this Text.  # noqa: E501

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :return: The tab_id of this Text.  # noqa: E501
        :rtype: str
        """
        return self._tab_id

    @tab_id.setter
    def tab_id(self, tab_id):
        """Sets the tab_id of this Text.

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :param tab_id: The tab_id of this Text.  # noqa: E501
        :type: str
        """

        self._tab_id = tab_id

    @property
    def tab_id_metadata(self):
        """Gets the tab_id_metadata of this Text.  # noqa: E501


        :return: The tab_id_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_id_metadata

    @tab_id_metadata.setter
    def tab_id_metadata(self, tab_id_metadata):
        """Sets the tab_id_metadata of this Text.


        :param tab_id_metadata: The tab_id_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_id_metadata = tab_id_metadata

    @property
    def tab_label(self):
        """Gets the tab_label of this Text.  # noqa: E501

        The label string associated with the tab.  # noqa: E501

        :return: The tab_label of this Text.  # noqa: E501
        :rtype: str
        """
        return self._tab_label

    @tab_label.setter
    def tab_label(self, tab_label):
        """Sets the tab_label of this Text.

        The label string associated with the tab.  # noqa: E501

        :param tab_label: The tab_label of this Text.  # noqa: E501
        :type: str
        """

        self._tab_label = tab_label

    @property
    def tab_label_metadata(self):
        """Gets the tab_label_metadata of this Text.  # noqa: E501


        :return: The tab_label_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_label_metadata

    @tab_label_metadata.setter
    def tab_label_metadata(self, tab_label_metadata):
        """Sets the tab_label_metadata of this Text.


        :param tab_label_metadata: The tab_label_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_label_metadata = tab_label_metadata

    @property
    def tab_order(self):
        """Gets the tab_order of this Text.  # noqa: E501

          # noqa: E501

        :return: The tab_order of this Text.  # noqa: E501
        :rtype: str
        """
        return self._tab_order

    @tab_order.setter
    def tab_order(self, tab_order):
        """Sets the tab_order of this Text.

          # noqa: E501

        :param tab_order: The tab_order of this Text.  # noqa: E501
        :type: str
        """

        self._tab_order = tab_order

    @property
    def tab_order_metadata(self):
        """Gets the tab_order_metadata of this Text.  # noqa: E501


        :return: The tab_order_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_order_metadata

    @tab_order_metadata.setter
    def tab_order_metadata(self, tab_order_metadata):
        """Sets the tab_order_metadata of this Text.


        :param tab_order_metadata: The tab_order_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_order_metadata = tab_order_metadata

    @property
    def tab_type(self):
        """Gets the tab_type of this Text.  # noqa: E501

          # noqa: E501

        :return: The tab_type of this Text.  # noqa: E501
        :rtype: str
        """
        return self._tab_type

    @tab_type.setter
    def tab_type(self, tab_type):
        """Sets the tab_type of this Text.

          # noqa: E501

        :param tab_type: The tab_type of this Text.  # noqa: E501
        :type: str
        """

        self._tab_type = tab_type

    @property
    def tab_type_metadata(self):
        """Gets the tab_type_metadata of this Text.  # noqa: E501


        :return: The tab_type_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_type_metadata

    @tab_type_metadata.setter
    def tab_type_metadata(self, tab_type_metadata):
        """Sets the tab_type_metadata of this Text.


        :param tab_type_metadata: The tab_type_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_type_metadata = tab_type_metadata

    @property
    def template_locked(self):
        """Gets the template_locked of this Text.  # noqa: E501

        When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.   # noqa: E501

        :return: The template_locked of this Text.  # noqa: E501
        :rtype: str
        """
        return self._template_locked

    @template_locked.setter
    def template_locked(self, template_locked):
        """Sets the template_locked of this Text.

        When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.   # noqa: E501

        :param template_locked: The template_locked of this Text.  # noqa: E501
        :type: str
        """

        self._template_locked = template_locked

    @property
    def template_locked_metadata(self):
        """Gets the template_locked_metadata of this Text.  # noqa: E501


        :return: The template_locked_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._template_locked_metadata

    @template_locked_metadata.setter
    def template_locked_metadata(self, template_locked_metadata):
        """Sets the template_locked_metadata of this Text.


        :param template_locked_metadata: The template_locked_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._template_locked_metadata = template_locked_metadata

    @property
    def template_required(self):
        """Gets the template_required of this Text.  # noqa: E501

        When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.  # noqa: E501

        :return: The template_required of this Text.  # noqa: E501
        :rtype: str
        """
        return self._template_required

    @template_required.setter
    def template_required(self, template_required):
        """Sets the template_required of this Text.

        When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.  # noqa: E501

        :param template_required: The template_required of this Text.  # noqa: E501
        :type: str
        """

        self._template_required = template_required

    @property
    def template_required_metadata(self):
        """Gets the template_required_metadata of this Text.  # noqa: E501


        :return: The template_required_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._template_required_metadata

    @template_required_metadata.setter
    def template_required_metadata(self, template_required_metadata):
        """Sets the template_required_metadata of this Text.


        :param template_required_metadata: The template_required_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._template_required_metadata = template_required_metadata

    @property
    def tooltip(self):
        """Gets the tooltip of this Text.  # noqa: E501

          # noqa: E501

        :return: The tooltip of this Text.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this Text.

          # noqa: E501

        :param tooltip: The tooltip of this Text.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def tool_tip_metadata(self):
        """Gets the tool_tip_metadata of this Text.  # noqa: E501


        :return: The tool_tip_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tool_tip_metadata

    @tool_tip_metadata.setter
    def tool_tip_metadata(self, tool_tip_metadata):
        """Sets the tool_tip_metadata of this Text.


        :param tool_tip_metadata: The tool_tip_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tool_tip_metadata = tool_tip_metadata

    @property
    def underline(self):
        """Gets the underline of this Text.  # noqa: E501

        When set to **true**, the information in the tab is underlined.  # noqa: E501

        :return: The underline of this Text.  # noqa: E501
        :rtype: str
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this Text.

        When set to **true**, the information in the tab is underlined.  # noqa: E501

        :param underline: The underline of this Text.  # noqa: E501
        :type: str
        """

        self._underline = underline

    @property
    def underline_metadata(self):
        """Gets the underline_metadata of this Text.  # noqa: E501


        :return: The underline_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._underline_metadata

    @underline_metadata.setter
    def underline_metadata(self, underline_metadata):
        """Sets the underline_metadata of this Text.


        :param underline_metadata: The underline_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._underline_metadata = underline_metadata

    @property
    def validation_message(self):
        """Gets the validation_message of this Text.  # noqa: E501

        The message displayed if the custom tab fails input validation (either custom of embedded).  # noqa: E501

        :return: The validation_message of this Text.  # noqa: E501
        :rtype: str
        """
        return self._validation_message

    @validation_message.setter
    def validation_message(self, validation_message):
        """Sets the validation_message of this Text.

        The message displayed if the custom tab fails input validation (either custom of embedded).  # noqa: E501

        :param validation_message: The validation_message of this Text.  # noqa: E501
        :type: str
        """

        self._validation_message = validation_message

    @property
    def validation_message_metadata(self):
        """Gets the validation_message_metadata of this Text.  # noqa: E501


        :return: The validation_message_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._validation_message_metadata

    @validation_message_metadata.setter
    def validation_message_metadata(self, validation_message_metadata):
        """Sets the validation_message_metadata of this Text.


        :param validation_message_metadata: The validation_message_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._validation_message_metadata = validation_message_metadata

    @property
    def validation_pattern(self):
        """Gets the validation_pattern of this Text.  # noqa: E501

        A regular expression used to validate input for the tab.  # noqa: E501

        :return: The validation_pattern of this Text.  # noqa: E501
        :rtype: str
        """
        return self._validation_pattern

    @validation_pattern.setter
    def validation_pattern(self, validation_pattern):
        """Sets the validation_pattern of this Text.

        A regular expression used to validate input for the tab.  # noqa: E501

        :param validation_pattern: The validation_pattern of this Text.  # noqa: E501
        :type: str
        """

        self._validation_pattern = validation_pattern

    @property
    def validation_pattern_metadata(self):
        """Gets the validation_pattern_metadata of this Text.  # noqa: E501


        :return: The validation_pattern_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._validation_pattern_metadata

    @validation_pattern_metadata.setter
    def validation_pattern_metadata(self, validation_pattern_metadata):
        """Sets the validation_pattern_metadata of this Text.


        :param validation_pattern_metadata: The validation_pattern_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._validation_pattern_metadata = validation_pattern_metadata

    @property
    def value(self):
        """Gets the value of this Text.  # noqa: E501

        Specifies the value of the tab.   # noqa: E501

        :return: The value of this Text.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Text.

        Specifies the value of the tab.   # noqa: E501

        :param value: The value of this Text.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_metadata(self):
        """Gets the value_metadata of this Text.  # noqa: E501


        :return: The value_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._value_metadata

    @value_metadata.setter
    def value_metadata(self, value_metadata):
        """Sets the value_metadata of this Text.


        :param value_metadata: The value_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._value_metadata = value_metadata

    @property
    def width(self):
        """Gets the width of this Text.  # noqa: E501

        Width of the tab in pixels.  # noqa: E501

        :return: The width of this Text.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Text.

        Width of the tab in pixels.  # noqa: E501

        :param width: The width of this Text.  # noqa: E501
        :type: str
        """

        self._width = width

    @property
    def width_metadata(self):
        """Gets the width_metadata of this Text.  # noqa: E501


        :return: The width_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._width_metadata

    @width_metadata.setter
    def width_metadata(self, width_metadata):
        """Sets the width_metadata of this Text.


        :param width_metadata: The width_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._width_metadata = width_metadata

    @property
    def x_position(self):
        """Gets the x_position of this Text.  # noqa: E501

        This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :return: The x_position of this Text.  # noqa: E501
        :rtype: str
        """
        return self._x_position

    @x_position.setter
    def x_position(self, x_position):
        """Sets the x_position of this Text.

        This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :param x_position: The x_position of this Text.  # noqa: E501
        :type: str
        """

        self._x_position = x_position

    @property
    def x_position_metadata(self):
        """Gets the x_position_metadata of this Text.  # noqa: E501


        :return: The x_position_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._x_position_metadata

    @x_position_metadata.setter
    def x_position_metadata(self, x_position_metadata):
        """Sets the x_position_metadata of this Text.


        :param x_position_metadata: The x_position_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._x_position_metadata = x_position_metadata

    @property
    def y_position(self):
        """Gets the y_position of this Text.  # noqa: E501

        This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :return: The y_position of this Text.  # noqa: E501
        :rtype: str
        """
        return self._y_position

    @y_position.setter
    def y_position(self, y_position):
        """Sets the y_position of this Text.

        This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :param y_position: The y_position of this Text.  # noqa: E501
        :type: str
        """

        self._y_position = y_position

    @property
    def y_position_metadata(self):
        """Gets the y_position_metadata of this Text.  # noqa: E501


        :return: The y_position_metadata of this Text.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._y_position_metadata

    @y_position_metadata.setter
    def y_position_metadata(self, y_position_metadata):
        """Sets the y_position_metadata of this Text.


        :param y_position_metadata: The y_position_metadata of this Text.  # noqa: E501
        :type: PropertyMetadata
        """

        self._y_position_metadata = y_position_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Text, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Text):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
