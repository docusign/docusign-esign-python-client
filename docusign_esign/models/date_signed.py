# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class DateSigned(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anchor_allow_white_space_in_characters': 'str',
        'anchor_allow_white_space_in_characters_metadata': 'PropertyMetadata',
        'anchor_case_sensitive': 'str',
        'anchor_case_sensitive_metadata': 'PropertyMetadata',
        'anchor_horizontal_alignment': 'str',
        'anchor_horizontal_alignment_metadata': 'PropertyMetadata',
        'anchor_ignore_if_not_present': 'str',
        'anchor_ignore_if_not_present_metadata': 'PropertyMetadata',
        'anchor_match_whole_word': 'str',
        'anchor_match_whole_word_metadata': 'PropertyMetadata',
        'anchor_string': 'str',
        'anchor_string_metadata': 'PropertyMetadata',
        'anchor_tab_processor_version': 'str',
        'anchor_tab_processor_version_metadata': 'PropertyMetadata',
        'anchor_units': 'str',
        'anchor_units_metadata': 'PropertyMetadata',
        'anchor_x_offset': 'str',
        'anchor_x_offset_metadata': 'PropertyMetadata',
        'anchor_y_offset': 'str',
        'anchor_y_offset_metadata': 'PropertyMetadata',
        'bold': 'str',
        'bold_metadata': 'PropertyMetadata',
        'caption': 'str',
        'caption_metadata': 'PropertyMetadata',
        'conditional_parent_label': 'str',
        'conditional_parent_label_metadata': 'PropertyMetadata',
        'conditional_parent_value': 'str',
        'conditional_parent_value_metadata': 'PropertyMetadata',
        'custom_tab_id': 'str',
        'custom_tab_id_metadata': 'PropertyMetadata',
        'document_id': 'str',
        'document_id_metadata': 'PropertyMetadata',
        'error_details': 'ErrorDetails',
        'font': 'str',
        'font_color': 'str',
        'font_color_metadata': 'PropertyMetadata',
        'font_metadata': 'PropertyMetadata',
        'font_size': 'str',
        'font_size_metadata': 'PropertyMetadata',
        'form_order': 'str',
        'form_order_metadata': 'PropertyMetadata',
        'form_page_label': 'str',
        'form_page_label_metadata': 'PropertyMetadata',
        'form_page_number': 'str',
        'form_page_number_metadata': 'PropertyMetadata',
        'height': 'str',
        'height_metadata': 'PropertyMetadata',
        'italic': 'str',
        'italic_metadata': 'PropertyMetadata',
        'locale_policy': 'LocalePolicyTab',
        'merge_field': 'MergeField',
        'merge_field_xml': 'str',
        'name': 'str',
        'name_metadata': 'PropertyMetadata',
        'page_number': 'str',
        'page_number_metadata': 'PropertyMetadata',
        'recipient_id': 'str',
        'recipient_id_guid': 'str',
        'recipient_id_guid_metadata': 'PropertyMetadata',
        'recipient_id_metadata': 'PropertyMetadata',
        'smart_contract_information': 'SmartContractInformation',
        'source': 'str',
        'status': 'str',
        'status_metadata': 'PropertyMetadata',
        'tab_group_labels': 'list[str]',
        'tab_group_labels_metadata': 'PropertyMetadata',
        'tab_id': 'str',
        'tab_id_metadata': 'PropertyMetadata',
        'tab_label': 'str',
        'tab_label_metadata': 'PropertyMetadata',
        'tab_order': 'str',
        'tab_order_metadata': 'PropertyMetadata',
        'tab_type': 'str',
        'tab_type_metadata': 'PropertyMetadata',
        'template_locked': 'str',
        'template_locked_metadata': 'PropertyMetadata',
        'template_required': 'str',
        'template_required_metadata': 'PropertyMetadata',
        'tooltip': 'str',
        'tool_tip_metadata': 'PropertyMetadata',
        'underline': 'str',
        'underline_metadata': 'PropertyMetadata',
        'value': 'str',
        'value_metadata': 'PropertyMetadata',
        'width': 'str',
        'width_metadata': 'PropertyMetadata',
        'x_position': 'str',
        'x_position_metadata': 'PropertyMetadata',
        'y_position': 'str',
        'y_position_metadata': 'PropertyMetadata'
    }

    attribute_map = {
        'anchor_allow_white_space_in_characters': 'anchorAllowWhiteSpaceInCharacters',
        'anchor_allow_white_space_in_characters_metadata': 'anchorAllowWhiteSpaceInCharactersMetadata',
        'anchor_case_sensitive': 'anchorCaseSensitive',
        'anchor_case_sensitive_metadata': 'anchorCaseSensitiveMetadata',
        'anchor_horizontal_alignment': 'anchorHorizontalAlignment',
        'anchor_horizontal_alignment_metadata': 'anchorHorizontalAlignmentMetadata',
        'anchor_ignore_if_not_present': 'anchorIgnoreIfNotPresent',
        'anchor_ignore_if_not_present_metadata': 'anchorIgnoreIfNotPresentMetadata',
        'anchor_match_whole_word': 'anchorMatchWholeWord',
        'anchor_match_whole_word_metadata': 'anchorMatchWholeWordMetadata',
        'anchor_string': 'anchorString',
        'anchor_string_metadata': 'anchorStringMetadata',
        'anchor_tab_processor_version': 'anchorTabProcessorVersion',
        'anchor_tab_processor_version_metadata': 'anchorTabProcessorVersionMetadata',
        'anchor_units': 'anchorUnits',
        'anchor_units_metadata': 'anchorUnitsMetadata',
        'anchor_x_offset': 'anchorXOffset',
        'anchor_x_offset_metadata': 'anchorXOffsetMetadata',
        'anchor_y_offset': 'anchorYOffset',
        'anchor_y_offset_metadata': 'anchorYOffsetMetadata',
        'bold': 'bold',
        'bold_metadata': 'boldMetadata',
        'caption': 'caption',
        'caption_metadata': 'captionMetadata',
        'conditional_parent_label': 'conditionalParentLabel',
        'conditional_parent_label_metadata': 'conditionalParentLabelMetadata',
        'conditional_parent_value': 'conditionalParentValue',
        'conditional_parent_value_metadata': 'conditionalParentValueMetadata',
        'custom_tab_id': 'customTabId',
        'custom_tab_id_metadata': 'customTabIdMetadata',
        'document_id': 'documentId',
        'document_id_metadata': 'documentIdMetadata',
        'error_details': 'errorDetails',
        'font': 'font',
        'font_color': 'fontColor',
        'font_color_metadata': 'fontColorMetadata',
        'font_metadata': 'fontMetadata',
        'font_size': 'fontSize',
        'font_size_metadata': 'fontSizeMetadata',
        'form_order': 'formOrder',
        'form_order_metadata': 'formOrderMetadata',
        'form_page_label': 'formPageLabel',
        'form_page_label_metadata': 'formPageLabelMetadata',
        'form_page_number': 'formPageNumber',
        'form_page_number_metadata': 'formPageNumberMetadata',
        'height': 'height',
        'height_metadata': 'heightMetadata',
        'italic': 'italic',
        'italic_metadata': 'italicMetadata',
        'locale_policy': 'localePolicy',
        'merge_field': 'mergeField',
        'merge_field_xml': 'mergeFieldXml',
        'name': 'name',
        'name_metadata': 'nameMetadata',
        'page_number': 'pageNumber',
        'page_number_metadata': 'pageNumberMetadata',
        'recipient_id': 'recipientId',
        'recipient_id_guid': 'recipientIdGuid',
        'recipient_id_guid_metadata': 'recipientIdGuidMetadata',
        'recipient_id_metadata': 'recipientIdMetadata',
        'smart_contract_information': 'smartContractInformation',
        'source': 'source',
        'status': 'status',
        'status_metadata': 'statusMetadata',
        'tab_group_labels': 'tabGroupLabels',
        'tab_group_labels_metadata': 'tabGroupLabelsMetadata',
        'tab_id': 'tabId',
        'tab_id_metadata': 'tabIdMetadata',
        'tab_label': 'tabLabel',
        'tab_label_metadata': 'tabLabelMetadata',
        'tab_order': 'tabOrder',
        'tab_order_metadata': 'tabOrderMetadata',
        'tab_type': 'tabType',
        'tab_type_metadata': 'tabTypeMetadata',
        'template_locked': 'templateLocked',
        'template_locked_metadata': 'templateLockedMetadata',
        'template_required': 'templateRequired',
        'template_required_metadata': 'templateRequiredMetadata',
        'tooltip': 'tooltip',
        'tool_tip_metadata': 'toolTipMetadata',
        'underline': 'underline',
        'underline_metadata': 'underlineMetadata',
        'value': 'value',
        'value_metadata': 'valueMetadata',
        'width': 'width',
        'width_metadata': 'widthMetadata',
        'x_position': 'xPosition',
        'x_position_metadata': 'xPositionMetadata',
        'y_position': 'yPosition',
        'y_position_metadata': 'yPositionMetadata'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """DateSigned - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._anchor_allow_white_space_in_characters = None
        self._anchor_allow_white_space_in_characters_metadata = None
        self._anchor_case_sensitive = None
        self._anchor_case_sensitive_metadata = None
        self._anchor_horizontal_alignment = None
        self._anchor_horizontal_alignment_metadata = None
        self._anchor_ignore_if_not_present = None
        self._anchor_ignore_if_not_present_metadata = None
        self._anchor_match_whole_word = None
        self._anchor_match_whole_word_metadata = None
        self._anchor_string = None
        self._anchor_string_metadata = None
        self._anchor_tab_processor_version = None
        self._anchor_tab_processor_version_metadata = None
        self._anchor_units = None
        self._anchor_units_metadata = None
        self._anchor_x_offset = None
        self._anchor_x_offset_metadata = None
        self._anchor_y_offset = None
        self._anchor_y_offset_metadata = None
        self._bold = None
        self._bold_metadata = None
        self._caption = None
        self._caption_metadata = None
        self._conditional_parent_label = None
        self._conditional_parent_label_metadata = None
        self._conditional_parent_value = None
        self._conditional_parent_value_metadata = None
        self._custom_tab_id = None
        self._custom_tab_id_metadata = None
        self._document_id = None
        self._document_id_metadata = None
        self._error_details = None
        self._font = None
        self._font_color = None
        self._font_color_metadata = None
        self._font_metadata = None
        self._font_size = None
        self._font_size_metadata = None
        self._form_order = None
        self._form_order_metadata = None
        self._form_page_label = None
        self._form_page_label_metadata = None
        self._form_page_number = None
        self._form_page_number_metadata = None
        self._height = None
        self._height_metadata = None
        self._italic = None
        self._italic_metadata = None
        self._locale_policy = None
        self._merge_field = None
        self._merge_field_xml = None
        self._name = None
        self._name_metadata = None
        self._page_number = None
        self._page_number_metadata = None
        self._recipient_id = None
        self._recipient_id_guid = None
        self._recipient_id_guid_metadata = None
        self._recipient_id_metadata = None
        self._smart_contract_information = None
        self._source = None
        self._status = None
        self._status_metadata = None
        self._tab_group_labels = None
        self._tab_group_labels_metadata = None
        self._tab_id = None
        self._tab_id_metadata = None
        self._tab_label = None
        self._tab_label_metadata = None
        self._tab_order = None
        self._tab_order_metadata = None
        self._tab_type = None
        self._tab_type_metadata = None
        self._template_locked = None
        self._template_locked_metadata = None
        self._template_required = None
        self._template_required_metadata = None
        self._tooltip = None
        self._tool_tip_metadata = None
        self._underline = None
        self._underline_metadata = None
        self._value = None
        self._value_metadata = None
        self._width = None
        self._width_metadata = None
        self._x_position = None
        self._x_position_metadata = None
        self._y_position = None
        self._y_position_metadata = None
        self.discriminator = None

        setattr(self, "_{}".format('anchor_allow_white_space_in_characters'), kwargs.get('anchor_allow_white_space_in_characters', None))
        setattr(self, "_{}".format('anchor_allow_white_space_in_characters_metadata'), kwargs.get('anchor_allow_white_space_in_characters_metadata', None))
        setattr(self, "_{}".format('anchor_case_sensitive'), kwargs.get('anchor_case_sensitive', None))
        setattr(self, "_{}".format('anchor_case_sensitive_metadata'), kwargs.get('anchor_case_sensitive_metadata', None))
        setattr(self, "_{}".format('anchor_horizontal_alignment'), kwargs.get('anchor_horizontal_alignment', None))
        setattr(self, "_{}".format('anchor_horizontal_alignment_metadata'), kwargs.get('anchor_horizontal_alignment_metadata', None))
        setattr(self, "_{}".format('anchor_ignore_if_not_present'), kwargs.get('anchor_ignore_if_not_present', None))
        setattr(self, "_{}".format('anchor_ignore_if_not_present_metadata'), kwargs.get('anchor_ignore_if_not_present_metadata', None))
        setattr(self, "_{}".format('anchor_match_whole_word'), kwargs.get('anchor_match_whole_word', None))
        setattr(self, "_{}".format('anchor_match_whole_word_metadata'), kwargs.get('anchor_match_whole_word_metadata', None))
        setattr(self, "_{}".format('anchor_string'), kwargs.get('anchor_string', None))
        setattr(self, "_{}".format('anchor_string_metadata'), kwargs.get('anchor_string_metadata', None))
        setattr(self, "_{}".format('anchor_tab_processor_version'), kwargs.get('anchor_tab_processor_version', None))
        setattr(self, "_{}".format('anchor_tab_processor_version_metadata'), kwargs.get('anchor_tab_processor_version_metadata', None))
        setattr(self, "_{}".format('anchor_units'), kwargs.get('anchor_units', None))
        setattr(self, "_{}".format('anchor_units_metadata'), kwargs.get('anchor_units_metadata', None))
        setattr(self, "_{}".format('anchor_x_offset'), kwargs.get('anchor_x_offset', None))
        setattr(self, "_{}".format('anchor_x_offset_metadata'), kwargs.get('anchor_x_offset_metadata', None))
        setattr(self, "_{}".format('anchor_y_offset'), kwargs.get('anchor_y_offset', None))
        setattr(self, "_{}".format('anchor_y_offset_metadata'), kwargs.get('anchor_y_offset_metadata', None))
        setattr(self, "_{}".format('bold'), kwargs.get('bold', None))
        setattr(self, "_{}".format('bold_metadata'), kwargs.get('bold_metadata', None))
        setattr(self, "_{}".format('caption'), kwargs.get('caption', None))
        setattr(self, "_{}".format('caption_metadata'), kwargs.get('caption_metadata', None))
        setattr(self, "_{}".format('conditional_parent_label'), kwargs.get('conditional_parent_label', None))
        setattr(self, "_{}".format('conditional_parent_label_metadata'), kwargs.get('conditional_parent_label_metadata', None))
        setattr(self, "_{}".format('conditional_parent_value'), kwargs.get('conditional_parent_value', None))
        setattr(self, "_{}".format('conditional_parent_value_metadata'), kwargs.get('conditional_parent_value_metadata', None))
        setattr(self, "_{}".format('custom_tab_id'), kwargs.get('custom_tab_id', None))
        setattr(self, "_{}".format('custom_tab_id_metadata'), kwargs.get('custom_tab_id_metadata', None))
        setattr(self, "_{}".format('document_id'), kwargs.get('document_id', None))
        setattr(self, "_{}".format('document_id_metadata'), kwargs.get('document_id_metadata', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('font'), kwargs.get('font', None))
        setattr(self, "_{}".format('font_color'), kwargs.get('font_color', None))
        setattr(self, "_{}".format('font_color_metadata'), kwargs.get('font_color_metadata', None))
        setattr(self, "_{}".format('font_metadata'), kwargs.get('font_metadata', None))
        setattr(self, "_{}".format('font_size'), kwargs.get('font_size', None))
        setattr(self, "_{}".format('font_size_metadata'), kwargs.get('font_size_metadata', None))
        setattr(self, "_{}".format('form_order'), kwargs.get('form_order', None))
        setattr(self, "_{}".format('form_order_metadata'), kwargs.get('form_order_metadata', None))
        setattr(self, "_{}".format('form_page_label'), kwargs.get('form_page_label', None))
        setattr(self, "_{}".format('form_page_label_metadata'), kwargs.get('form_page_label_metadata', None))
        setattr(self, "_{}".format('form_page_number'), kwargs.get('form_page_number', None))
        setattr(self, "_{}".format('form_page_number_metadata'), kwargs.get('form_page_number_metadata', None))
        setattr(self, "_{}".format('height'), kwargs.get('height', None))
        setattr(self, "_{}".format('height_metadata'), kwargs.get('height_metadata', None))
        setattr(self, "_{}".format('italic'), kwargs.get('italic', None))
        setattr(self, "_{}".format('italic_metadata'), kwargs.get('italic_metadata', None))
        setattr(self, "_{}".format('locale_policy'), kwargs.get('locale_policy', None))
        setattr(self, "_{}".format('merge_field'), kwargs.get('merge_field', None))
        setattr(self, "_{}".format('merge_field_xml'), kwargs.get('merge_field_xml', None))
        setattr(self, "_{}".format('name'), kwargs.get('name', None))
        setattr(self, "_{}".format('name_metadata'), kwargs.get('name_metadata', None))
        setattr(self, "_{}".format('page_number'), kwargs.get('page_number', None))
        setattr(self, "_{}".format('page_number_metadata'), kwargs.get('page_number_metadata', None))
        setattr(self, "_{}".format('recipient_id'), kwargs.get('recipient_id', None))
        setattr(self, "_{}".format('recipient_id_guid'), kwargs.get('recipient_id_guid', None))
        setattr(self, "_{}".format('recipient_id_guid_metadata'), kwargs.get('recipient_id_guid_metadata', None))
        setattr(self, "_{}".format('recipient_id_metadata'), kwargs.get('recipient_id_metadata', None))
        setattr(self, "_{}".format('smart_contract_information'), kwargs.get('smart_contract_information', None))
        setattr(self, "_{}".format('source'), kwargs.get('source', None))
        setattr(self, "_{}".format('status'), kwargs.get('status', None))
        setattr(self, "_{}".format('status_metadata'), kwargs.get('status_metadata', None))
        setattr(self, "_{}".format('tab_group_labels'), kwargs.get('tab_group_labels', None))
        setattr(self, "_{}".format('tab_group_labels_metadata'), kwargs.get('tab_group_labels_metadata', None))
        setattr(self, "_{}".format('tab_id'), kwargs.get('tab_id', None))
        setattr(self, "_{}".format('tab_id_metadata'), kwargs.get('tab_id_metadata', None))
        setattr(self, "_{}".format('tab_label'), kwargs.get('tab_label', None))
        setattr(self, "_{}".format('tab_label_metadata'), kwargs.get('tab_label_metadata', None))
        setattr(self, "_{}".format('tab_order'), kwargs.get('tab_order', None))
        setattr(self, "_{}".format('tab_order_metadata'), kwargs.get('tab_order_metadata', None))
        setattr(self, "_{}".format('tab_type'), kwargs.get('tab_type', None))
        setattr(self, "_{}".format('tab_type_metadata'), kwargs.get('tab_type_metadata', None))
        setattr(self, "_{}".format('template_locked'), kwargs.get('template_locked', None))
        setattr(self, "_{}".format('template_locked_metadata'), kwargs.get('template_locked_metadata', None))
        setattr(self, "_{}".format('template_required'), kwargs.get('template_required', None))
        setattr(self, "_{}".format('template_required_metadata'), kwargs.get('template_required_metadata', None))
        setattr(self, "_{}".format('tooltip'), kwargs.get('tooltip', None))
        setattr(self, "_{}".format('tool_tip_metadata'), kwargs.get('tool_tip_metadata', None))
        setattr(self, "_{}".format('underline'), kwargs.get('underline', None))
        setattr(self, "_{}".format('underline_metadata'), kwargs.get('underline_metadata', None))
        setattr(self, "_{}".format('value'), kwargs.get('value', None))
        setattr(self, "_{}".format('value_metadata'), kwargs.get('value_metadata', None))
        setattr(self, "_{}".format('width'), kwargs.get('width', None))
        setattr(self, "_{}".format('width_metadata'), kwargs.get('width_metadata', None))
        setattr(self, "_{}".format('x_position'), kwargs.get('x_position', None))
        setattr(self, "_{}".format('x_position_metadata'), kwargs.get('x_position_metadata', None))
        setattr(self, "_{}".format('y_position'), kwargs.get('y_position', None))
        setattr(self, "_{}".format('y_position_metadata'), kwargs.get('y_position_metadata', None))

    @property
    def anchor_allow_white_space_in_characters(self):
        """Gets the anchor_allow_white_space_in_characters of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The anchor_allow_white_space_in_characters of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_allow_white_space_in_characters

    @anchor_allow_white_space_in_characters.setter
    def anchor_allow_white_space_in_characters(self, anchor_allow_white_space_in_characters):
        """Sets the anchor_allow_white_space_in_characters of this DateSigned.

          # noqa: E501

        :param anchor_allow_white_space_in_characters: The anchor_allow_white_space_in_characters of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_allow_white_space_in_characters = anchor_allow_white_space_in_characters

    @property
    def anchor_allow_white_space_in_characters_metadata(self):
        """Gets the anchor_allow_white_space_in_characters_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorAllowWhiteSpaceInCharacters` property is editable.  # noqa: E501

        :return: The anchor_allow_white_space_in_characters_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_allow_white_space_in_characters_metadata

    @anchor_allow_white_space_in_characters_metadata.setter
    def anchor_allow_white_space_in_characters_metadata(self, anchor_allow_white_space_in_characters_metadata):
        """Sets the anchor_allow_white_space_in_characters_metadata of this DateSigned.

        Metadata that indicates whether the `anchorAllowWhiteSpaceInCharacters` property is editable.  # noqa: E501

        :param anchor_allow_white_space_in_characters_metadata: The anchor_allow_white_space_in_characters_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_allow_white_space_in_characters_metadata = anchor_allow_white_space_in_characters_metadata

    @property
    def anchor_case_sensitive(self):
        """Gets the anchor_case_sensitive of this DateSigned.  # noqa: E501

        When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.  # noqa: E501

        :return: The anchor_case_sensitive of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_case_sensitive

    @anchor_case_sensitive.setter
    def anchor_case_sensitive(self, anchor_case_sensitive):
        """Sets the anchor_case_sensitive of this DateSigned.

        When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.  # noqa: E501

        :param anchor_case_sensitive: The anchor_case_sensitive of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_case_sensitive = anchor_case_sensitive

    @property
    def anchor_case_sensitive_metadata(self):
        """Gets the anchor_case_sensitive_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorCaseSensitive` property is editable.  # noqa: E501

        :return: The anchor_case_sensitive_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_case_sensitive_metadata

    @anchor_case_sensitive_metadata.setter
    def anchor_case_sensitive_metadata(self, anchor_case_sensitive_metadata):
        """Sets the anchor_case_sensitive_metadata of this DateSigned.

        Metadata that indicates whether the `anchorCaseSensitive` property is editable.  # noqa: E501

        :param anchor_case_sensitive_metadata: The anchor_case_sensitive_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_case_sensitive_metadata = anchor_case_sensitive_metadata

    @property
    def anchor_horizontal_alignment(self):
        """Gets the anchor_horizontal_alignment of this DateSigned.  # noqa: E501

        Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.  # noqa: E501

        :return: The anchor_horizontal_alignment of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_horizontal_alignment

    @anchor_horizontal_alignment.setter
    def anchor_horizontal_alignment(self, anchor_horizontal_alignment):
        """Sets the anchor_horizontal_alignment of this DateSigned.

        Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.  # noqa: E501

        :param anchor_horizontal_alignment: The anchor_horizontal_alignment of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_horizontal_alignment = anchor_horizontal_alignment

    @property
    def anchor_horizontal_alignment_metadata(self):
        """Gets the anchor_horizontal_alignment_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.  # noqa: E501

        :return: The anchor_horizontal_alignment_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_horizontal_alignment_metadata

    @anchor_horizontal_alignment_metadata.setter
    def anchor_horizontal_alignment_metadata(self, anchor_horizontal_alignment_metadata):
        """Sets the anchor_horizontal_alignment_metadata of this DateSigned.

        Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.  # noqa: E501

        :param anchor_horizontal_alignment_metadata: The anchor_horizontal_alignment_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_horizontal_alignment_metadata = anchor_horizontal_alignment_metadata

    @property
    def anchor_ignore_if_not_present(self):
        """Gets the anchor_ignore_if_not_present of this DateSigned.  # noqa: E501

        When set to **true**, this tab is ignored if anchorString is not found in the document.  # noqa: E501

        :return: The anchor_ignore_if_not_present of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_ignore_if_not_present

    @anchor_ignore_if_not_present.setter
    def anchor_ignore_if_not_present(self, anchor_ignore_if_not_present):
        """Sets the anchor_ignore_if_not_present of this DateSigned.

        When set to **true**, this tab is ignored if anchorString is not found in the document.  # noqa: E501

        :param anchor_ignore_if_not_present: The anchor_ignore_if_not_present of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_ignore_if_not_present = anchor_ignore_if_not_present

    @property
    def anchor_ignore_if_not_present_metadata(self):
        """Gets the anchor_ignore_if_not_present_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.  # noqa: E501

        :return: The anchor_ignore_if_not_present_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_ignore_if_not_present_metadata

    @anchor_ignore_if_not_present_metadata.setter
    def anchor_ignore_if_not_present_metadata(self, anchor_ignore_if_not_present_metadata):
        """Sets the anchor_ignore_if_not_present_metadata of this DateSigned.

        Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.  # noqa: E501

        :param anchor_ignore_if_not_present_metadata: The anchor_ignore_if_not_present_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_ignore_if_not_present_metadata = anchor_ignore_if_not_present_metadata

    @property
    def anchor_match_whole_word(self):
        """Gets the anchor_match_whole_word of this DateSigned.  # noqa: E501

        When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.  # noqa: E501

        :return: The anchor_match_whole_word of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_match_whole_word

    @anchor_match_whole_word.setter
    def anchor_match_whole_word(self, anchor_match_whole_word):
        """Sets the anchor_match_whole_word of this DateSigned.

        When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.  # noqa: E501

        :param anchor_match_whole_word: The anchor_match_whole_word of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_match_whole_word = anchor_match_whole_word

    @property
    def anchor_match_whole_word_metadata(self):
        """Gets the anchor_match_whole_word_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorMatchWholeWord` property is editable.  # noqa: E501

        :return: The anchor_match_whole_word_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_match_whole_word_metadata

    @anchor_match_whole_word_metadata.setter
    def anchor_match_whole_word_metadata(self, anchor_match_whole_word_metadata):
        """Sets the anchor_match_whole_word_metadata of this DateSigned.

        Metadata that indicates whether the `anchorMatchWholeWord` property is editable.  # noqa: E501

        :param anchor_match_whole_word_metadata: The anchor_match_whole_word_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_match_whole_word_metadata = anchor_match_whole_word_metadata

    @property
    def anchor_string(self):
        """Gets the anchor_string of this DateSigned.  # noqa: E501

        Anchor text information for a radio button.  # noqa: E501

        :return: The anchor_string of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_string

    @anchor_string.setter
    def anchor_string(self, anchor_string):
        """Sets the anchor_string of this DateSigned.

        Anchor text information for a radio button.  # noqa: E501

        :param anchor_string: The anchor_string of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_string = anchor_string

    @property
    def anchor_string_metadata(self):
        """Gets the anchor_string_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorString` property is editable.  # noqa: E501

        :return: The anchor_string_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_string_metadata

    @anchor_string_metadata.setter
    def anchor_string_metadata(self, anchor_string_metadata):
        """Sets the anchor_string_metadata of this DateSigned.

        Metadata that indicates whether the `anchorString` property is editable.  # noqa: E501

        :param anchor_string_metadata: The anchor_string_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_string_metadata = anchor_string_metadata

    @property
    def anchor_tab_processor_version(self):
        """Gets the anchor_tab_processor_version of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The anchor_tab_processor_version of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_tab_processor_version

    @anchor_tab_processor_version.setter
    def anchor_tab_processor_version(self, anchor_tab_processor_version):
        """Sets the anchor_tab_processor_version of this DateSigned.

          # noqa: E501

        :param anchor_tab_processor_version: The anchor_tab_processor_version of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_tab_processor_version = anchor_tab_processor_version

    @property
    def anchor_tab_processor_version_metadata(self):
        """Gets the anchor_tab_processor_version_metadata of this DateSigned.  # noqa: E501

        Reserved for DocuSign.  # noqa: E501

        :return: The anchor_tab_processor_version_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_tab_processor_version_metadata

    @anchor_tab_processor_version_metadata.setter
    def anchor_tab_processor_version_metadata(self, anchor_tab_processor_version_metadata):
        """Sets the anchor_tab_processor_version_metadata of this DateSigned.

        Reserved for DocuSign.  # noqa: E501

        :param anchor_tab_processor_version_metadata: The anchor_tab_processor_version_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_tab_processor_version_metadata = anchor_tab_processor_version_metadata

    @property
    def anchor_units(self):
        """Gets the anchor_units of this DateSigned.  # noqa: E501

        Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.  # noqa: E501

        :return: The anchor_units of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_units

    @anchor_units.setter
    def anchor_units(self, anchor_units):
        """Sets the anchor_units of this DateSigned.

        Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.  # noqa: E501

        :param anchor_units: The anchor_units of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_units = anchor_units

    @property
    def anchor_units_metadata(self):
        """Gets the anchor_units_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorUnits` property is editable.  # noqa: E501

        :return: The anchor_units_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_units_metadata

    @anchor_units_metadata.setter
    def anchor_units_metadata(self, anchor_units_metadata):
        """Sets the anchor_units_metadata of this DateSigned.

        Metadata that indicates whether the `anchorUnits` property is editable.  # noqa: E501

        :param anchor_units_metadata: The anchor_units_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_units_metadata = anchor_units_metadata

    @property
    def anchor_x_offset(self):
        """Gets the anchor_x_offset of this DateSigned.  # noqa: E501

        Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :return: The anchor_x_offset of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_x_offset

    @anchor_x_offset.setter
    def anchor_x_offset(self, anchor_x_offset):
        """Sets the anchor_x_offset of this DateSigned.

        Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :param anchor_x_offset: The anchor_x_offset of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_x_offset = anchor_x_offset

    @property
    def anchor_x_offset_metadata(self):
        """Gets the anchor_x_offset_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorXOffset` property is editable.  # noqa: E501

        :return: The anchor_x_offset_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_x_offset_metadata

    @anchor_x_offset_metadata.setter
    def anchor_x_offset_metadata(self, anchor_x_offset_metadata):
        """Sets the anchor_x_offset_metadata of this DateSigned.

        Metadata that indicates whether the `anchorXOffset` property is editable.  # noqa: E501

        :param anchor_x_offset_metadata: The anchor_x_offset_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_x_offset_metadata = anchor_x_offset_metadata

    @property
    def anchor_y_offset(self):
        """Gets the anchor_y_offset of this DateSigned.  # noqa: E501

        Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :return: The anchor_y_offset of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._anchor_y_offset

    @anchor_y_offset.setter
    def anchor_y_offset(self, anchor_y_offset):
        """Sets the anchor_y_offset of this DateSigned.

        Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :param anchor_y_offset: The anchor_y_offset of this DateSigned.  # noqa: E501
        :type: str
        """

        self._anchor_y_offset = anchor_y_offset

    @property
    def anchor_y_offset_metadata(self):
        """Gets the anchor_y_offset_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `anchorYOffset` property is editable.  # noqa: E501

        :return: The anchor_y_offset_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_y_offset_metadata

    @anchor_y_offset_metadata.setter
    def anchor_y_offset_metadata(self, anchor_y_offset_metadata):
        """Sets the anchor_y_offset_metadata of this DateSigned.

        Metadata that indicates whether the `anchorYOffset` property is editable.  # noqa: E501

        :param anchor_y_offset_metadata: The anchor_y_offset_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_y_offset_metadata = anchor_y_offset_metadata

    @property
    def bold(self):
        """Gets the bold of this DateSigned.  # noqa: E501

        When set to **true**, the information in the tab is bold.  # noqa: E501

        :return: The bold of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this DateSigned.

        When set to **true**, the information in the tab is bold.  # noqa: E501

        :param bold: The bold of this DateSigned.  # noqa: E501
        :type: str
        """

        self._bold = bold

    @property
    def bold_metadata(self):
        """Gets the bold_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `bold` property is editable.  # noqa: E501

        :return: The bold_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._bold_metadata

    @bold_metadata.setter
    def bold_metadata(self, bold_metadata):
        """Sets the bold_metadata of this DateSigned.

        Metadata that indicates whether the `bold` property is editable.  # noqa: E501

        :param bold_metadata: The bold_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._bold_metadata = bold_metadata

    @property
    def caption(self):
        """Gets the caption of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The caption of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this DateSigned.

          # noqa: E501

        :param caption: The caption of this DateSigned.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def caption_metadata(self):
        """Gets the caption_metadata of this DateSigned.  # noqa: E501


        :return: The caption_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._caption_metadata

    @caption_metadata.setter
    def caption_metadata(self, caption_metadata):
        """Sets the caption_metadata of this DateSigned.


        :param caption_metadata: The caption_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._caption_metadata = caption_metadata

    @property
    def conditional_parent_label(self):
        """Gets the conditional_parent_label of this DateSigned.  # noqa: E501

        For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.  # noqa: E501

        :return: The conditional_parent_label of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._conditional_parent_label

    @conditional_parent_label.setter
    def conditional_parent_label(self, conditional_parent_label):
        """Sets the conditional_parent_label of this DateSigned.

        For conditional fields this is the TabLabel of the parent tab that controls this tab's visibility.  # noqa: E501

        :param conditional_parent_label: The conditional_parent_label of this DateSigned.  # noqa: E501
        :type: str
        """

        self._conditional_parent_label = conditional_parent_label

    @property
    def conditional_parent_label_metadata(self):
        """Gets the conditional_parent_label_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `conditionalParentLabel` property is editable.  # noqa: E501

        :return: The conditional_parent_label_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._conditional_parent_label_metadata

    @conditional_parent_label_metadata.setter
    def conditional_parent_label_metadata(self, conditional_parent_label_metadata):
        """Sets the conditional_parent_label_metadata of this DateSigned.

        Metadata that indicates whether the `conditionalParentLabel` property is editable.  # noqa: E501

        :param conditional_parent_label_metadata: The conditional_parent_label_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._conditional_parent_label_metadata = conditional_parent_label_metadata

    @property
    def conditional_parent_value(self):
        """Gets the conditional_parent_value of this DateSigned.  # noqa: E501

        For conditional fields, this is the value of the parent tab that controls the tab's visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.   # noqa: E501

        :return: The conditional_parent_value of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._conditional_parent_value

    @conditional_parent_value.setter
    def conditional_parent_value(self, conditional_parent_value):
        """Sets the conditional_parent_value of this DateSigned.

        For conditional fields, this is the value of the parent tab that controls the tab's visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.   # noqa: E501

        :param conditional_parent_value: The conditional_parent_value of this DateSigned.  # noqa: E501
        :type: str
        """

        self._conditional_parent_value = conditional_parent_value

    @property
    def conditional_parent_value_metadata(self):
        """Gets the conditional_parent_value_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `conditionalParentValue` property is editable.  # noqa: E501

        :return: The conditional_parent_value_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._conditional_parent_value_metadata

    @conditional_parent_value_metadata.setter
    def conditional_parent_value_metadata(self, conditional_parent_value_metadata):
        """Sets the conditional_parent_value_metadata of this DateSigned.

        Metadata that indicates whether the `conditionalParentValue` property is editable.  # noqa: E501

        :param conditional_parent_value_metadata: The conditional_parent_value_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._conditional_parent_value_metadata = conditional_parent_value_metadata

    @property
    def custom_tab_id(self):
        """Gets the custom_tab_id of this DateSigned.  # noqa: E501

        The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.  # noqa: E501

        :return: The custom_tab_id of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._custom_tab_id

    @custom_tab_id.setter
    def custom_tab_id(self, custom_tab_id):
        """Sets the custom_tab_id of this DateSigned.

        The DocuSign generated custom tab ID for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.  # noqa: E501

        :param custom_tab_id: The custom_tab_id of this DateSigned.  # noqa: E501
        :type: str
        """

        self._custom_tab_id = custom_tab_id

    @property
    def custom_tab_id_metadata(self):
        """Gets the custom_tab_id_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `customTabId` property is editable.  # noqa: E501

        :return: The custom_tab_id_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._custom_tab_id_metadata

    @custom_tab_id_metadata.setter
    def custom_tab_id_metadata(self, custom_tab_id_metadata):
        """Sets the custom_tab_id_metadata of this DateSigned.

        Metadata that indicates whether the `customTabId` property is editable.  # noqa: E501

        :param custom_tab_id_metadata: The custom_tab_id_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._custom_tab_id_metadata = custom_tab_id_metadata

    @property
    def document_id(self):
        """Gets the document_id of this DateSigned.  # noqa: E501

        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.  # noqa: E501

        :return: The document_id of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DateSigned.

        Specifies the document ID number that the tab is placed on. This must refer to an existing Document's ID attribute.  # noqa: E501

        :param document_id: The document_id of this DateSigned.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def document_id_metadata(self):
        """Gets the document_id_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `documentId` property is editable.  # noqa: E501

        :return: The document_id_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._document_id_metadata

    @document_id_metadata.setter
    def document_id_metadata(self, document_id_metadata):
        """Sets the document_id_metadata of this DateSigned.

        Metadata that indicates whether the `documentId` property is editable.  # noqa: E501

        :param document_id_metadata: The document_id_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._document_id_metadata = document_id_metadata

    @property
    def error_details(self):
        """Gets the error_details of this DateSigned.  # noqa: E501

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :return: The error_details of this DateSigned.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this DateSigned.

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :param error_details: The error_details of this DateSigned.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def font(self):
        """Gets the font of this DateSigned.  # noqa: E501

        The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.  # noqa: E501

        :return: The font of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this DateSigned.

        The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.  # noqa: E501

        :param font: The font of this DateSigned.  # noqa: E501
        :type: str
        """

        self._font = font

    @property
    def font_color(self):
        """Gets the font_color of this DateSigned.  # noqa: E501

        The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.  # noqa: E501

        :return: The font_color of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._font_color

    @font_color.setter
    def font_color(self, font_color):
        """Sets the font_color of this DateSigned.

        The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.  # noqa: E501

        :param font_color: The font_color of this DateSigned.  # noqa: E501
        :type: str
        """

        self._font_color = font_color

    @property
    def font_color_metadata(self):
        """Gets the font_color_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `fontColor` property is editable.  # noqa: E501

        :return: The font_color_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_color_metadata

    @font_color_metadata.setter
    def font_color_metadata(self, font_color_metadata):
        """Sets the font_color_metadata of this DateSigned.

        Metadata that indicates whether the `fontColor` property is editable.  # noqa: E501

        :param font_color_metadata: The font_color_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_color_metadata = font_color_metadata

    @property
    def font_metadata(self):
        """Gets the font_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `font` property is editable.  # noqa: E501

        :return: The font_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_metadata

    @font_metadata.setter
    def font_metadata(self, font_metadata):
        """Sets the font_metadata of this DateSigned.

        Metadata that indicates whether the `font` property is editable.  # noqa: E501

        :param font_metadata: The font_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_metadata = font_metadata

    @property
    def font_size(self):
        """Gets the font_size of this DateSigned.  # noqa: E501

        The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.  # noqa: E501

        :return: The font_size of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this DateSigned.

        The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.  # noqa: E501

        :param font_size: The font_size of this DateSigned.  # noqa: E501
        :type: str
        """

        self._font_size = font_size

    @property
    def font_size_metadata(self):
        """Gets the font_size_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `fontSize` property is editable.  # noqa: E501

        :return: The font_size_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_size_metadata

    @font_size_metadata.setter
    def font_size_metadata(self, font_size_metadata):
        """Sets the font_size_metadata of this DateSigned.

        Metadata that indicates whether the `fontSize` property is editable.  # noqa: E501

        :param font_size_metadata: The font_size_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_size_metadata = font_size_metadata

    @property
    def form_order(self):
        """Gets the form_order of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The form_order of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._form_order

    @form_order.setter
    def form_order(self, form_order):
        """Sets the form_order of this DateSigned.

          # noqa: E501

        :param form_order: The form_order of this DateSigned.  # noqa: E501
        :type: str
        """

        self._form_order = form_order

    @property
    def form_order_metadata(self):
        """Gets the form_order_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `formOrder` property is editable.  # noqa: E501

        :return: The form_order_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._form_order_metadata

    @form_order_metadata.setter
    def form_order_metadata(self, form_order_metadata):
        """Sets the form_order_metadata of this DateSigned.

        Metadata that indicates whether the `formOrder` property is editable.  # noqa: E501

        :param form_order_metadata: The form_order_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._form_order_metadata = form_order_metadata

    @property
    def form_page_label(self):
        """Gets the form_page_label of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The form_page_label of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._form_page_label

    @form_page_label.setter
    def form_page_label(self, form_page_label):
        """Sets the form_page_label of this DateSigned.

          # noqa: E501

        :param form_page_label: The form_page_label of this DateSigned.  # noqa: E501
        :type: str
        """

        self._form_page_label = form_page_label

    @property
    def form_page_label_metadata(self):
        """Gets the form_page_label_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `formPageLabel` property is editable.  # noqa: E501

        :return: The form_page_label_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._form_page_label_metadata

    @form_page_label_metadata.setter
    def form_page_label_metadata(self, form_page_label_metadata):
        """Sets the form_page_label_metadata of this DateSigned.

        Metadata that indicates whether the `formPageLabel` property is editable.  # noqa: E501

        :param form_page_label_metadata: The form_page_label_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._form_page_label_metadata = form_page_label_metadata

    @property
    def form_page_number(self):
        """Gets the form_page_number of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The form_page_number of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._form_page_number

    @form_page_number.setter
    def form_page_number(self, form_page_number):
        """Sets the form_page_number of this DateSigned.

          # noqa: E501

        :param form_page_number: The form_page_number of this DateSigned.  # noqa: E501
        :type: str
        """

        self._form_page_number = form_page_number

    @property
    def form_page_number_metadata(self):
        """Gets the form_page_number_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `fromPageNumber` property is editable.  # noqa: E501

        :return: The form_page_number_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._form_page_number_metadata

    @form_page_number_metadata.setter
    def form_page_number_metadata(self, form_page_number_metadata):
        """Sets the form_page_number_metadata of this DateSigned.

        Metadata that indicates whether the `fromPageNumber` property is editable.  # noqa: E501

        :param form_page_number_metadata: The form_page_number_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._form_page_number_metadata = form_page_number_metadata

    @property
    def height(self):
        """Gets the height of this DateSigned.  # noqa: E501

        Height of the tab in pixels.  # noqa: E501

        :return: The height of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DateSigned.

        Height of the tab in pixels.  # noqa: E501

        :param height: The height of this DateSigned.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def height_metadata(self):
        """Gets the height_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `height` property is editable.  # noqa: E501

        :return: The height_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._height_metadata

    @height_metadata.setter
    def height_metadata(self, height_metadata):
        """Sets the height_metadata of this DateSigned.

        Metadata that indicates whether the `height` property is editable.  # noqa: E501

        :param height_metadata: The height_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._height_metadata = height_metadata

    @property
    def italic(self):
        """Gets the italic of this DateSigned.  # noqa: E501

        When set to **true**, the information in the tab is italic.  # noqa: E501

        :return: The italic of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this DateSigned.

        When set to **true**, the information in the tab is italic.  # noqa: E501

        :param italic: The italic of this DateSigned.  # noqa: E501
        :type: str
        """

        self._italic = italic

    @property
    def italic_metadata(self):
        """Gets the italic_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `italic` property is editable.  # noqa: E501

        :return: The italic_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._italic_metadata

    @italic_metadata.setter
    def italic_metadata(self, italic_metadata):
        """Sets the italic_metadata of this DateSigned.

        Metadata that indicates whether the `italic` property is editable.  # noqa: E501

        :param italic_metadata: The italic_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._italic_metadata = italic_metadata

    @property
    def locale_policy(self):
        """Gets the locale_policy of this DateSigned.  # noqa: E501

        Reserved for DocuSign.  # noqa: E501

        :return: The locale_policy of this DateSigned.  # noqa: E501
        :rtype: LocalePolicyTab
        """
        return self._locale_policy

    @locale_policy.setter
    def locale_policy(self, locale_policy):
        """Sets the locale_policy of this DateSigned.

        Reserved for DocuSign.  # noqa: E501

        :param locale_policy: The locale_policy of this DateSigned.  # noqa: E501
        :type: LocalePolicyTab
        """

        self._locale_policy = locale_policy

    @property
    def merge_field(self):
        """Gets the merge_field of this DateSigned.  # noqa: E501

        Contains the information necessary to map the tab to a field in SalesForce.  # noqa: E501

        :return: The merge_field of this DateSigned.  # noqa: E501
        :rtype: MergeField
        """
        return self._merge_field

    @merge_field.setter
    def merge_field(self, merge_field):
        """Sets the merge_field of this DateSigned.

        Contains the information necessary to map the tab to a field in SalesForce.  # noqa: E501

        :param merge_field: The merge_field of this DateSigned.  # noqa: E501
        :type: MergeField
        """

        self._merge_field = merge_field

    @property
    def merge_field_xml(self):
        """Gets the merge_field_xml of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The merge_field_xml of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._merge_field_xml

    @merge_field_xml.setter
    def merge_field_xml(self, merge_field_xml):
        """Sets the merge_field_xml of this DateSigned.

          # noqa: E501

        :param merge_field_xml: The merge_field_xml of this DateSigned.  # noqa: E501
        :type: str
        """

        self._merge_field_xml = merge_field_xml

    @property
    def name(self):
        """Gets the name of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The name of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DateSigned.

          # noqa: E501

        :param name: The name of this DateSigned.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_metadata(self):
        """Gets the name_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `name` property is editable. This property is read-only.  # noqa: E501

        :return: The name_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._name_metadata

    @name_metadata.setter
    def name_metadata(self, name_metadata):
        """Sets the name_metadata of this DateSigned.

        Metadata that indicates whether the `name` property is editable. This property is read-only.  # noqa: E501

        :param name_metadata: The name_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._name_metadata = name_metadata

    @property
    def page_number(self):
        """Gets the page_number of this DateSigned.  # noqa: E501

        Specifies the page number on which the tab is located.  # noqa: E501

        :return: The page_number of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this DateSigned.

        Specifies the page number on which the tab is located.  # noqa: E501

        :param page_number: The page_number of this DateSigned.  # noqa: E501
        :type: str
        """

        self._page_number = page_number

    @property
    def page_number_metadata(self):
        """Gets the page_number_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `pageNumber` property is editable.  # noqa: E501

        :return: The page_number_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._page_number_metadata

    @page_number_metadata.setter
    def page_number_metadata(self, page_number_metadata):
        """Sets the page_number_metadata of this DateSigned.

        Metadata that indicates whether the `pageNumber` property is editable.  # noqa: E501

        :param page_number_metadata: The page_number_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._page_number_metadata = page_number_metadata

    @property
    def recipient_id(self):
        """Gets the recipient_id of this DateSigned.  # noqa: E501

        Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.  # noqa: E501

        :return: The recipient_id of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """Sets the recipient_id of this DateSigned.

        Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.  # noqa: E501

        :param recipient_id: The recipient_id of this DateSigned.  # noqa: E501
        :type: str
        """

        self._recipient_id = recipient_id

    @property
    def recipient_id_guid(self):
        """Gets the recipient_id_guid of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The recipient_id_guid of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._recipient_id_guid

    @recipient_id_guid.setter
    def recipient_id_guid(self, recipient_id_guid):
        """Sets the recipient_id_guid of this DateSigned.

          # noqa: E501

        :param recipient_id_guid: The recipient_id_guid of this DateSigned.  # noqa: E501
        :type: str
        """

        self._recipient_id_guid = recipient_id_guid

    @property
    def recipient_id_guid_metadata(self):
        """Gets the recipient_id_guid_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `recipientIdGuid` property is editable.  # noqa: E501

        :return: The recipient_id_guid_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._recipient_id_guid_metadata

    @recipient_id_guid_metadata.setter
    def recipient_id_guid_metadata(self, recipient_id_guid_metadata):
        """Sets the recipient_id_guid_metadata of this DateSigned.

        Metadata that indicates whether the `recipientIdGuid` property is editable.  # noqa: E501

        :param recipient_id_guid_metadata: The recipient_id_guid_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._recipient_id_guid_metadata = recipient_id_guid_metadata

    @property
    def recipient_id_metadata(self):
        """Gets the recipient_id_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `recipientId` property is editable.  # noqa: E501

        :return: The recipient_id_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._recipient_id_metadata

    @recipient_id_metadata.setter
    def recipient_id_metadata(self, recipient_id_metadata):
        """Sets the recipient_id_metadata of this DateSigned.

        Metadata that indicates whether the `recipientId` property is editable.  # noqa: E501

        :param recipient_id_metadata: The recipient_id_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._recipient_id_metadata = recipient_id_metadata

    @property
    def smart_contract_information(self):
        """Gets the smart_contract_information of this DateSigned.  # noqa: E501

        Reserved for DocuSign.  # noqa: E501

        :return: The smart_contract_information of this DateSigned.  # noqa: E501
        :rtype: SmartContractInformation
        """
        return self._smart_contract_information

    @smart_contract_information.setter
    def smart_contract_information(self, smart_contract_information):
        """Sets the smart_contract_information of this DateSigned.

        Reserved for DocuSign.  # noqa: E501

        :param smart_contract_information: The smart_contract_information of this DateSigned.  # noqa: E501
        :type: SmartContractInformation
        """

        self._smart_contract_information = smart_contract_information

    @property
    def source(self):
        """Gets the source of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The source of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DateSigned.

          # noqa: E501

        :param source: The source of this DateSigned.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this DateSigned.  # noqa: E501

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :return: The status of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DateSigned.

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :param status: The status of this DateSigned.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_metadata(self):
        """Gets the status_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `status` property is editable.  # noqa: E501

        :return: The status_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._status_metadata

    @status_metadata.setter
    def status_metadata(self, status_metadata):
        """Sets the status_metadata of this DateSigned.

        Metadata that indicates whether the `status` property is editable.  # noqa: E501

        :param status_metadata: The status_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._status_metadata = status_metadata

    @property
    def tab_group_labels(self):
        """Gets the tab_group_labels of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The tab_group_labels of this DateSigned.  # noqa: E501
        :rtype: list[str]
        """
        return self._tab_group_labels

    @tab_group_labels.setter
    def tab_group_labels(self, tab_group_labels):
        """Sets the tab_group_labels of this DateSigned.

          # noqa: E501

        :param tab_group_labels: The tab_group_labels of this DateSigned.  # noqa: E501
        :type: list[str]
        """

        self._tab_group_labels = tab_group_labels

    @property
    def tab_group_labels_metadata(self):
        """Gets the tab_group_labels_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `tabGroupLabels` property is editable.  # noqa: E501

        :return: The tab_group_labels_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_group_labels_metadata

    @tab_group_labels_metadata.setter
    def tab_group_labels_metadata(self, tab_group_labels_metadata):
        """Sets the tab_group_labels_metadata of this DateSigned.

        Metadata that indicates whether the `tabGroupLabels` property is editable.  # noqa: E501

        :param tab_group_labels_metadata: The tab_group_labels_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_group_labels_metadata = tab_group_labels_metadata

    @property
    def tab_id(self):
        """Gets the tab_id of this DateSigned.  # noqa: E501

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :return: The tab_id of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._tab_id

    @tab_id.setter
    def tab_id(self, tab_id):
        """Sets the tab_id of this DateSigned.

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :param tab_id: The tab_id of this DateSigned.  # noqa: E501
        :type: str
        """

        self._tab_id = tab_id

    @property
    def tab_id_metadata(self):
        """Gets the tab_id_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `tabId` property is editable.  # noqa: E501

        :return: The tab_id_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_id_metadata

    @tab_id_metadata.setter
    def tab_id_metadata(self, tab_id_metadata):
        """Sets the tab_id_metadata of this DateSigned.

        Metadata that indicates whether the `tabId` property is editable.  # noqa: E501

        :param tab_id_metadata: The tab_id_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_id_metadata = tab_id_metadata

    @property
    def tab_label(self):
        """Gets the tab_label of this DateSigned.  # noqa: E501

        The label string associated with the tab.  # noqa: E501

        :return: The tab_label of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._tab_label

    @tab_label.setter
    def tab_label(self, tab_label):
        """Sets the tab_label of this DateSigned.

        The label string associated with the tab.  # noqa: E501

        :param tab_label: The tab_label of this DateSigned.  # noqa: E501
        :type: str
        """

        self._tab_label = tab_label

    @property
    def tab_label_metadata(self):
        """Gets the tab_label_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `tabLabel` property is editable.  # noqa: E501

        :return: The tab_label_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_label_metadata

    @tab_label_metadata.setter
    def tab_label_metadata(self, tab_label_metadata):
        """Sets the tab_label_metadata of this DateSigned.

        Metadata that indicates whether the `tabLabel` property is editable.  # noqa: E501

        :param tab_label_metadata: The tab_label_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_label_metadata = tab_label_metadata

    @property
    def tab_order(self):
        """Gets the tab_order of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The tab_order of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._tab_order

    @tab_order.setter
    def tab_order(self, tab_order):
        """Sets the tab_order of this DateSigned.

          # noqa: E501

        :param tab_order: The tab_order of this DateSigned.  # noqa: E501
        :type: str
        """

        self._tab_order = tab_order

    @property
    def tab_order_metadata(self):
        """Gets the tab_order_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `tabOrder` property is editable.  # noqa: E501

        :return: The tab_order_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_order_metadata

    @tab_order_metadata.setter
    def tab_order_metadata(self, tab_order_metadata):
        """Sets the tab_order_metadata of this DateSigned.

        Metadata that indicates whether the `tabOrder` property is editable.  # noqa: E501

        :param tab_order_metadata: The tab_order_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_order_metadata = tab_order_metadata

    @property
    def tab_type(self):
        """Gets the tab_type of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The tab_type of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._tab_type

    @tab_type.setter
    def tab_type(self, tab_type):
        """Sets the tab_type of this DateSigned.

          # noqa: E501

        :param tab_type: The tab_type of this DateSigned.  # noqa: E501
        :type: str
        """

        self._tab_type = tab_type

    @property
    def tab_type_metadata(self):
        """Gets the tab_type_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `tabType` property is editable.  # noqa: E501

        :return: The tab_type_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_type_metadata

    @tab_type_metadata.setter
    def tab_type_metadata(self, tab_type_metadata):
        """Sets the tab_type_metadata of this DateSigned.

        Metadata that indicates whether the `tabType` property is editable.  # noqa: E501

        :param tab_type_metadata: The tab_type_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_type_metadata = tab_type_metadata

    @property
    def template_locked(self):
        """Gets the template_locked of this DateSigned.  # noqa: E501

        When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.   # noqa: E501

        :return: The template_locked of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._template_locked

    @template_locked.setter
    def template_locked(self, template_locked):
        """Sets the template_locked of this DateSigned.

        When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.   # noqa: E501

        :param template_locked: The template_locked of this DateSigned.  # noqa: E501
        :type: str
        """

        self._template_locked = template_locked

    @property
    def template_locked_metadata(self):
        """Gets the template_locked_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `templateLocked` property is editable.  # noqa: E501

        :return: The template_locked_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._template_locked_metadata

    @template_locked_metadata.setter
    def template_locked_metadata(self, template_locked_metadata):
        """Sets the template_locked_metadata of this DateSigned.

        Metadata that indicates whether the `templateLocked` property is editable.  # noqa: E501

        :param template_locked_metadata: The template_locked_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._template_locked_metadata = template_locked_metadata

    @property
    def template_required(self):
        """Gets the template_required of this DateSigned.  # noqa: E501

        When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.  # noqa: E501

        :return: The template_required of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._template_required

    @template_required.setter
    def template_required(self, template_required):
        """Sets the template_required of this DateSigned.

        When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.  # noqa: E501

        :param template_required: The template_required of this DateSigned.  # noqa: E501
        :type: str
        """

        self._template_required = template_required

    @property
    def template_required_metadata(self):
        """Gets the template_required_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `templateRequired` property is editable.  # noqa: E501

        :return: The template_required_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._template_required_metadata

    @template_required_metadata.setter
    def template_required_metadata(self, template_required_metadata):
        """Sets the template_required_metadata of this DateSigned.

        Metadata that indicates whether the `templateRequired` property is editable.  # noqa: E501

        :param template_required_metadata: The template_required_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._template_required_metadata = template_required_metadata

    @property
    def tooltip(self):
        """Gets the tooltip of this DateSigned.  # noqa: E501

          # noqa: E501

        :return: The tooltip of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this DateSigned.

          # noqa: E501

        :param tooltip: The tooltip of this DateSigned.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def tool_tip_metadata(self):
        """Gets the tool_tip_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `toolTip` property is editable.  # noqa: E501

        :return: The tool_tip_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tool_tip_metadata

    @tool_tip_metadata.setter
    def tool_tip_metadata(self, tool_tip_metadata):
        """Sets the tool_tip_metadata of this DateSigned.

        Metadata that indicates whether the `toolTip` property is editable.  # noqa: E501

        :param tool_tip_metadata: The tool_tip_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tool_tip_metadata = tool_tip_metadata

    @property
    def underline(self):
        """Gets the underline of this DateSigned.  # noqa: E501

        When set to **true**, the information in the tab is underlined.  # noqa: E501

        :return: The underline of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this DateSigned.

        When set to **true**, the information in the tab is underlined.  # noqa: E501

        :param underline: The underline of this DateSigned.  # noqa: E501
        :type: str
        """

        self._underline = underline

    @property
    def underline_metadata(self):
        """Gets the underline_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `underline` property is editable.  # noqa: E501

        :return: The underline_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._underline_metadata

    @underline_metadata.setter
    def underline_metadata(self, underline_metadata):
        """Sets the underline_metadata of this DateSigned.

        Metadata that indicates whether the `underline` property is editable.  # noqa: E501

        :param underline_metadata: The underline_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._underline_metadata = underline_metadata

    @property
    def value(self):
        """Gets the value of this DateSigned.  # noqa: E501

        Specifies the value of the tab.   # noqa: E501

        :return: The value of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DateSigned.

        Specifies the value of the tab.   # noqa: E501

        :param value: The value of this DateSigned.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_metadata(self):
        """Gets the value_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `value` property is editable.  # noqa: E501

        :return: The value_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._value_metadata

    @value_metadata.setter
    def value_metadata(self, value_metadata):
        """Sets the value_metadata of this DateSigned.

        Metadata that indicates whether the `value` property is editable.  # noqa: E501

        :param value_metadata: The value_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._value_metadata = value_metadata

    @property
    def width(self):
        """Gets the width of this DateSigned.  # noqa: E501

        Width of the tab in pixels.  # noqa: E501

        :return: The width of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DateSigned.

        Width of the tab in pixels.  # noqa: E501

        :param width: The width of this DateSigned.  # noqa: E501
        :type: str
        """

        self._width = width

    @property
    def width_metadata(self):
        """Gets the width_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `width` property is editable.  # noqa: E501

        :return: The width_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._width_metadata

    @width_metadata.setter
    def width_metadata(self, width_metadata):
        """Sets the width_metadata of this DateSigned.

        Metadata that indicates whether the `width` property is editable.  # noqa: E501

        :param width_metadata: The width_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._width_metadata = width_metadata

    @property
    def x_position(self):
        """Gets the x_position of this DateSigned.  # noqa: E501

        This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :return: The x_position of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._x_position

    @x_position.setter
    def x_position(self, x_position):
        """Sets the x_position of this DateSigned.

        This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :param x_position: The x_position of this DateSigned.  # noqa: E501
        :type: str
        """

        self._x_position = x_position

    @property
    def x_position_metadata(self):
        """Gets the x_position_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `xPosition` property is editable.  # noqa: E501

        :return: The x_position_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._x_position_metadata

    @x_position_metadata.setter
    def x_position_metadata(self, x_position_metadata):
        """Sets the x_position_metadata of this DateSigned.

        Metadata that indicates whether the `xPosition` property is editable.  # noqa: E501

        :param x_position_metadata: The x_position_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._x_position_metadata = x_position_metadata

    @property
    def y_position(self):
        """Gets the y_position of this DateSigned.  # noqa: E501

        This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :return: The y_position of this DateSigned.  # noqa: E501
        :rtype: str
        """
        return self._y_position

    @y_position.setter
    def y_position(self, y_position):
        """Sets the y_position of this DateSigned.

        This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :param y_position: The y_position of this DateSigned.  # noqa: E501
        :type: str
        """

        self._y_position = y_position

    @property
    def y_position_metadata(self):
        """Gets the y_position_metadata of this DateSigned.  # noqa: E501

        Metadata that indicates whether the `yPosition` property is editable.  # noqa: E501

        :return: The y_position_metadata of this DateSigned.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._y_position_metadata

    @y_position_metadata.setter
    def y_position_metadata(self, y_position_metadata):
        """Sets the y_position_metadata of this DateSigned.

        Metadata that indicates whether the `yPosition` property is editable.  # noqa: E501

        :param y_position_metadata: The y_position_metadata of this DateSigned.  # noqa: E501
        :type: PropertyMetadata
        """

        self._y_position_metadata = y_position_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DateSigned, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateSigned):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DateSigned):
            return True

        return self.to_dict() != other.to_dict()
