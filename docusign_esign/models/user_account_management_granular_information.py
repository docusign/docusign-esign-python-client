# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserAccountManagementGranularInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, can_manage_account_security_settings=None, can_manage_account_security_settings_metadata=None, can_manage_account_settings=None, can_manage_account_settings_metadata=None, can_manage_admins=None, can_manage_admins_metadata=None, can_manage_reporting=None, can_manage_reporting_metadata=None, can_manage_sharing=None, can_manage_sharing_metadata=None, can_manage_signing_groups=None, can_manage_signing_groups_metadata=None, can_manage_users=None, can_manage_users_metadata=None):
        """
        UserAccountManagementGranularInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'can_manage_account_security_settings': 'str',
            'can_manage_account_security_settings_metadata': 'SettingsMetadata',
            'can_manage_account_settings': 'str',
            'can_manage_account_settings_metadata': 'SettingsMetadata',
            'can_manage_admins': 'str',
            'can_manage_admins_metadata': 'SettingsMetadata',
            'can_manage_reporting': 'str',
            'can_manage_reporting_metadata': 'SettingsMetadata',
            'can_manage_sharing': 'str',
            'can_manage_sharing_metadata': 'SettingsMetadata',
            'can_manage_signing_groups': 'str',
            'can_manage_signing_groups_metadata': 'SettingsMetadata',
            'can_manage_users': 'str',
            'can_manage_users_metadata': 'SettingsMetadata'
        }

        self.attribute_map = {
            'can_manage_account_security_settings': 'canManageAccountSecuritySettings',
            'can_manage_account_security_settings_metadata': 'canManageAccountSecuritySettingsMetadata',
            'can_manage_account_settings': 'canManageAccountSettings',
            'can_manage_account_settings_metadata': 'canManageAccountSettingsMetadata',
            'can_manage_admins': 'canManageAdmins',
            'can_manage_admins_metadata': 'canManageAdminsMetadata',
            'can_manage_reporting': 'canManageReporting',
            'can_manage_reporting_metadata': 'canManageReportingMetadata',
            'can_manage_sharing': 'canManageSharing',
            'can_manage_sharing_metadata': 'canManageSharingMetadata',
            'can_manage_signing_groups': 'canManageSigningGroups',
            'can_manage_signing_groups_metadata': 'canManageSigningGroupsMetadata',
            'can_manage_users': 'canManageUsers',
            'can_manage_users_metadata': 'canManageUsersMetadata'
        }

        self._can_manage_account_security_settings = can_manage_account_security_settings
        self._can_manage_account_security_settings_metadata = can_manage_account_security_settings_metadata
        self._can_manage_account_settings = can_manage_account_settings
        self._can_manage_account_settings_metadata = can_manage_account_settings_metadata
        self._can_manage_admins = can_manage_admins
        self._can_manage_admins_metadata = can_manage_admins_metadata
        self._can_manage_reporting = can_manage_reporting
        self._can_manage_reporting_metadata = can_manage_reporting_metadata
        self._can_manage_sharing = can_manage_sharing
        self._can_manage_sharing_metadata = can_manage_sharing_metadata
        self._can_manage_signing_groups = can_manage_signing_groups
        self._can_manage_signing_groups_metadata = can_manage_signing_groups_metadata
        self._can_manage_users = can_manage_users
        self._can_manage_users_metadata = can_manage_users_metadata

    @property
    def can_manage_account_security_settings(self):
        """
        Gets the can_manage_account_security_settings of this UserAccountManagementGranularInformation.
        

        :return: The can_manage_account_security_settings of this UserAccountManagementGranularInformation.
        :rtype: str
        """
        return self._can_manage_account_security_settings

    @can_manage_account_security_settings.setter
    def can_manage_account_security_settings(self, can_manage_account_security_settings):
        """
        Sets the can_manage_account_security_settings of this UserAccountManagementGranularInformation.
        

        :param can_manage_account_security_settings: The can_manage_account_security_settings of this UserAccountManagementGranularInformation.
        :type: str
        """

        self._can_manage_account_security_settings = can_manage_account_security_settings

    @property
    def can_manage_account_security_settings_metadata(self):
        """
        Gets the can_manage_account_security_settings_metadata of this UserAccountManagementGranularInformation.

        :return: The can_manage_account_security_settings_metadata of this UserAccountManagementGranularInformation.
        :rtype: SettingsMetadata
        """
        return self._can_manage_account_security_settings_metadata

    @can_manage_account_security_settings_metadata.setter
    def can_manage_account_security_settings_metadata(self, can_manage_account_security_settings_metadata):
        """
        Sets the can_manage_account_security_settings_metadata of this UserAccountManagementGranularInformation.

        :param can_manage_account_security_settings_metadata: The can_manage_account_security_settings_metadata of this UserAccountManagementGranularInformation.
        :type: SettingsMetadata
        """

        self._can_manage_account_security_settings_metadata = can_manage_account_security_settings_metadata

    @property
    def can_manage_account_settings(self):
        """
        Gets the can_manage_account_settings of this UserAccountManagementGranularInformation.
        

        :return: The can_manage_account_settings of this UserAccountManagementGranularInformation.
        :rtype: str
        """
        return self._can_manage_account_settings

    @can_manage_account_settings.setter
    def can_manage_account_settings(self, can_manage_account_settings):
        """
        Sets the can_manage_account_settings of this UserAccountManagementGranularInformation.
        

        :param can_manage_account_settings: The can_manage_account_settings of this UserAccountManagementGranularInformation.
        :type: str
        """

        self._can_manage_account_settings = can_manage_account_settings

    @property
    def can_manage_account_settings_metadata(self):
        """
        Gets the can_manage_account_settings_metadata of this UserAccountManagementGranularInformation.

        :return: The can_manage_account_settings_metadata of this UserAccountManagementGranularInformation.
        :rtype: SettingsMetadata
        """
        return self._can_manage_account_settings_metadata

    @can_manage_account_settings_metadata.setter
    def can_manage_account_settings_metadata(self, can_manage_account_settings_metadata):
        """
        Sets the can_manage_account_settings_metadata of this UserAccountManagementGranularInformation.

        :param can_manage_account_settings_metadata: The can_manage_account_settings_metadata of this UserAccountManagementGranularInformation.
        :type: SettingsMetadata
        """

        self._can_manage_account_settings_metadata = can_manage_account_settings_metadata

    @property
    def can_manage_admins(self):
        """
        Gets the can_manage_admins of this UserAccountManagementGranularInformation.
        

        :return: The can_manage_admins of this UserAccountManagementGranularInformation.
        :rtype: str
        """
        return self._can_manage_admins

    @can_manage_admins.setter
    def can_manage_admins(self, can_manage_admins):
        """
        Sets the can_manage_admins of this UserAccountManagementGranularInformation.
        

        :param can_manage_admins: The can_manage_admins of this UserAccountManagementGranularInformation.
        :type: str
        """

        self._can_manage_admins = can_manage_admins

    @property
    def can_manage_admins_metadata(self):
        """
        Gets the can_manage_admins_metadata of this UserAccountManagementGranularInformation.

        :return: The can_manage_admins_metadata of this UserAccountManagementGranularInformation.
        :rtype: SettingsMetadata
        """
        return self._can_manage_admins_metadata

    @can_manage_admins_metadata.setter
    def can_manage_admins_metadata(self, can_manage_admins_metadata):
        """
        Sets the can_manage_admins_metadata of this UserAccountManagementGranularInformation.

        :param can_manage_admins_metadata: The can_manage_admins_metadata of this UserAccountManagementGranularInformation.
        :type: SettingsMetadata
        """

        self._can_manage_admins_metadata = can_manage_admins_metadata

    @property
    def can_manage_reporting(self):
        """
        Gets the can_manage_reporting of this UserAccountManagementGranularInformation.
        

        :return: The can_manage_reporting of this UserAccountManagementGranularInformation.
        :rtype: str
        """
        return self._can_manage_reporting

    @can_manage_reporting.setter
    def can_manage_reporting(self, can_manage_reporting):
        """
        Sets the can_manage_reporting of this UserAccountManagementGranularInformation.
        

        :param can_manage_reporting: The can_manage_reporting of this UserAccountManagementGranularInformation.
        :type: str
        """

        self._can_manage_reporting = can_manage_reporting

    @property
    def can_manage_reporting_metadata(self):
        """
        Gets the can_manage_reporting_metadata of this UserAccountManagementGranularInformation.

        :return: The can_manage_reporting_metadata of this UserAccountManagementGranularInformation.
        :rtype: SettingsMetadata
        """
        return self._can_manage_reporting_metadata

    @can_manage_reporting_metadata.setter
    def can_manage_reporting_metadata(self, can_manage_reporting_metadata):
        """
        Sets the can_manage_reporting_metadata of this UserAccountManagementGranularInformation.

        :param can_manage_reporting_metadata: The can_manage_reporting_metadata of this UserAccountManagementGranularInformation.
        :type: SettingsMetadata
        """

        self._can_manage_reporting_metadata = can_manage_reporting_metadata

    @property
    def can_manage_sharing(self):
        """
        Gets the can_manage_sharing of this UserAccountManagementGranularInformation.
        

        :return: The can_manage_sharing of this UserAccountManagementGranularInformation.
        :rtype: str
        """
        return self._can_manage_sharing

    @can_manage_sharing.setter
    def can_manage_sharing(self, can_manage_sharing):
        """
        Sets the can_manage_sharing of this UserAccountManagementGranularInformation.
        

        :param can_manage_sharing: The can_manage_sharing of this UserAccountManagementGranularInformation.
        :type: str
        """

        self._can_manage_sharing = can_manage_sharing

    @property
    def can_manage_sharing_metadata(self):
        """
        Gets the can_manage_sharing_metadata of this UserAccountManagementGranularInformation.

        :return: The can_manage_sharing_metadata of this UserAccountManagementGranularInformation.
        :rtype: SettingsMetadata
        """
        return self._can_manage_sharing_metadata

    @can_manage_sharing_metadata.setter
    def can_manage_sharing_metadata(self, can_manage_sharing_metadata):
        """
        Sets the can_manage_sharing_metadata of this UserAccountManagementGranularInformation.

        :param can_manage_sharing_metadata: The can_manage_sharing_metadata of this UserAccountManagementGranularInformation.
        :type: SettingsMetadata
        """

        self._can_manage_sharing_metadata = can_manage_sharing_metadata

    @property
    def can_manage_signing_groups(self):
        """
        Gets the can_manage_signing_groups of this UserAccountManagementGranularInformation.
        

        :return: The can_manage_signing_groups of this UserAccountManagementGranularInformation.
        :rtype: str
        """
        return self._can_manage_signing_groups

    @can_manage_signing_groups.setter
    def can_manage_signing_groups(self, can_manage_signing_groups):
        """
        Sets the can_manage_signing_groups of this UserAccountManagementGranularInformation.
        

        :param can_manage_signing_groups: The can_manage_signing_groups of this UserAccountManagementGranularInformation.
        :type: str
        """

        self._can_manage_signing_groups = can_manage_signing_groups

    @property
    def can_manage_signing_groups_metadata(self):
        """
        Gets the can_manage_signing_groups_metadata of this UserAccountManagementGranularInformation.

        :return: The can_manage_signing_groups_metadata of this UserAccountManagementGranularInformation.
        :rtype: SettingsMetadata
        """
        return self._can_manage_signing_groups_metadata

    @can_manage_signing_groups_metadata.setter
    def can_manage_signing_groups_metadata(self, can_manage_signing_groups_metadata):
        """
        Sets the can_manage_signing_groups_metadata of this UserAccountManagementGranularInformation.

        :param can_manage_signing_groups_metadata: The can_manage_signing_groups_metadata of this UserAccountManagementGranularInformation.
        :type: SettingsMetadata
        """

        self._can_manage_signing_groups_metadata = can_manage_signing_groups_metadata

    @property
    def can_manage_users(self):
        """
        Gets the can_manage_users of this UserAccountManagementGranularInformation.
        

        :return: The can_manage_users of this UserAccountManagementGranularInformation.
        :rtype: str
        """
        return self._can_manage_users

    @can_manage_users.setter
    def can_manage_users(self, can_manage_users):
        """
        Sets the can_manage_users of this UserAccountManagementGranularInformation.
        

        :param can_manage_users: The can_manage_users of this UserAccountManagementGranularInformation.
        :type: str
        """

        self._can_manage_users = can_manage_users

    @property
    def can_manage_users_metadata(self):
        """
        Gets the can_manage_users_metadata of this UserAccountManagementGranularInformation.

        :return: The can_manage_users_metadata of this UserAccountManagementGranularInformation.
        :rtype: SettingsMetadata
        """
        return self._can_manage_users_metadata

    @can_manage_users_metadata.setter
    def can_manage_users_metadata(self, can_manage_users_metadata):
        """
        Sets the can_manage_users_metadata of this UserAccountManagementGranularInformation.

        :param can_manage_users_metadata: The can_manage_users_metadata of this UserAccountManagementGranularInformation.
        :type: SettingsMetadata
        """

        self._can_manage_users_metadata = can_manage_users_metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
