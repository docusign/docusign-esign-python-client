# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EnvelopeTransferRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carbon_copy_original_owner': 'str',
        'enabled': 'str',
        'envelope_transfer_rule_id': 'str',
        'event_type': 'str',
        'from_group': 'Group',
        'from_user': 'UserInformation',
        'modified_date': 'str',
        'modified_user': 'UserInformation',
        'to_folder': 'Folder',
        'to_user': 'UserInformation'
    }

    attribute_map = {
        'carbon_copy_original_owner': 'carbonCopyOriginalOwner',
        'enabled': 'enabled',
        'envelope_transfer_rule_id': 'envelopeTransferRuleId',
        'event_type': 'eventType',
        'from_group': 'fromGroup',
        'from_user': 'fromUser',
        'modified_date': 'modifiedDate',
        'modified_user': 'modifiedUser',
        'to_folder': 'toFolder',
        'to_user': 'toUser'
    }

    def __init__(self, carbon_copy_original_owner=None, enabled=None, envelope_transfer_rule_id=None, event_type=None, from_group=None, from_user=None, modified_date=None, modified_user=None, to_folder=None, to_user=None):  # noqa: E501
        """EnvelopeTransferRule - a model defined in Swagger"""  # noqa: E501

        self._carbon_copy_original_owner = None
        self._enabled = None
        self._envelope_transfer_rule_id = None
        self._event_type = None
        self._from_group = None
        self._from_user = None
        self._modified_date = None
        self._modified_user = None
        self._to_folder = None
        self._to_user = None
        self.discriminator = None

        if carbon_copy_original_owner is not None:
            self.carbon_copy_original_owner = carbon_copy_original_owner
        if enabled is not None:
            self.enabled = enabled
        if envelope_transfer_rule_id is not None:
            self.envelope_transfer_rule_id = envelope_transfer_rule_id
        if event_type is not None:
            self.event_type = event_type
        if from_group is not None:
            self.from_group = from_group
        if from_user is not None:
            self.from_user = from_user
        if modified_date is not None:
            self.modified_date = modified_date
        if modified_user is not None:
            self.modified_user = modified_user
        if to_folder is not None:
            self.to_folder = to_folder
        if to_user is not None:
            self.to_user = to_user

    @property
    def carbon_copy_original_owner(self):
        """Gets the carbon_copy_original_owner of this EnvelopeTransferRule.  # noqa: E501

          # noqa: E501

        :return: The carbon_copy_original_owner of this EnvelopeTransferRule.  # noqa: E501
        :rtype: str
        """
        return self._carbon_copy_original_owner

    @carbon_copy_original_owner.setter
    def carbon_copy_original_owner(self, carbon_copy_original_owner):
        """Sets the carbon_copy_original_owner of this EnvelopeTransferRule.

          # noqa: E501

        :param carbon_copy_original_owner: The carbon_copy_original_owner of this EnvelopeTransferRule.  # noqa: E501
        :type: str
        """

        self._carbon_copy_original_owner = carbon_copy_original_owner

    @property
    def enabled(self):
        """Gets the enabled of this EnvelopeTransferRule.  # noqa: E501

          # noqa: E501

        :return: The enabled of this EnvelopeTransferRule.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EnvelopeTransferRule.

          # noqa: E501

        :param enabled: The enabled of this EnvelopeTransferRule.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def envelope_transfer_rule_id(self):
        """Gets the envelope_transfer_rule_id of this EnvelopeTransferRule.  # noqa: E501

          # noqa: E501

        :return: The envelope_transfer_rule_id of this EnvelopeTransferRule.  # noqa: E501
        :rtype: str
        """
        return self._envelope_transfer_rule_id

    @envelope_transfer_rule_id.setter
    def envelope_transfer_rule_id(self, envelope_transfer_rule_id):
        """Sets the envelope_transfer_rule_id of this EnvelopeTransferRule.

          # noqa: E501

        :param envelope_transfer_rule_id: The envelope_transfer_rule_id of this EnvelopeTransferRule.  # noqa: E501
        :type: str
        """

        self._envelope_transfer_rule_id = envelope_transfer_rule_id

    @property
    def event_type(self):
        """Gets the event_type of this EnvelopeTransferRule.  # noqa: E501

          # noqa: E501

        :return: The event_type of this EnvelopeTransferRule.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EnvelopeTransferRule.

          # noqa: E501

        :param event_type: The event_type of this EnvelopeTransferRule.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def from_group(self):
        """Gets the from_group of this EnvelopeTransferRule.  # noqa: E501


        :return: The from_group of this EnvelopeTransferRule.  # noqa: E501
        :rtype: Group
        """
        return self._from_group

    @from_group.setter
    def from_group(self, from_group):
        """Sets the from_group of this EnvelopeTransferRule.


        :param from_group: The from_group of this EnvelopeTransferRule.  # noqa: E501
        :type: Group
        """

        self._from_group = from_group

    @property
    def from_user(self):
        """Gets the from_user of this EnvelopeTransferRule.  # noqa: E501


        :return: The from_user of this EnvelopeTransferRule.  # noqa: E501
        :rtype: UserInformation
        """
        return self._from_user

    @from_user.setter
    def from_user(self, from_user):
        """Sets the from_user of this EnvelopeTransferRule.


        :param from_user: The from_user of this EnvelopeTransferRule.  # noqa: E501
        :type: UserInformation
        """

        self._from_user = from_user

    @property
    def modified_date(self):
        """Gets the modified_date of this EnvelopeTransferRule.  # noqa: E501

          # noqa: E501

        :return: The modified_date of this EnvelopeTransferRule.  # noqa: E501
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this EnvelopeTransferRule.

          # noqa: E501

        :param modified_date: The modified_date of this EnvelopeTransferRule.  # noqa: E501
        :type: str
        """

        self._modified_date = modified_date

    @property
    def modified_user(self):
        """Gets the modified_user of this EnvelopeTransferRule.  # noqa: E501


        :return: The modified_user of this EnvelopeTransferRule.  # noqa: E501
        :rtype: UserInformation
        """
        return self._modified_user

    @modified_user.setter
    def modified_user(self, modified_user):
        """Sets the modified_user of this EnvelopeTransferRule.


        :param modified_user: The modified_user of this EnvelopeTransferRule.  # noqa: E501
        :type: UserInformation
        """

        self._modified_user = modified_user

    @property
    def to_folder(self):
        """Gets the to_folder of this EnvelopeTransferRule.  # noqa: E501


        :return: The to_folder of this EnvelopeTransferRule.  # noqa: E501
        :rtype: Folder
        """
        return self._to_folder

    @to_folder.setter
    def to_folder(self, to_folder):
        """Sets the to_folder of this EnvelopeTransferRule.


        :param to_folder: The to_folder of this EnvelopeTransferRule.  # noqa: E501
        :type: Folder
        """

        self._to_folder = to_folder

    @property
    def to_user(self):
        """Gets the to_user of this EnvelopeTransferRule.  # noqa: E501


        :return: The to_user of this EnvelopeTransferRule.  # noqa: E501
        :rtype: UserInformation
        """
        return self._to_user

    @to_user.setter
    def to_user(self, to_user):
        """Sets the to_user of this EnvelopeTransferRule.


        :param to_user: The to_user of this EnvelopeTransferRule.  # noqa: E501
        :type: UserInformation
        """

        self._to_user = to_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvelopeTransferRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvelopeTransferRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
