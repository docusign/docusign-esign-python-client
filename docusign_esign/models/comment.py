# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Comment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'envelope_id': 'str',
        'hmac': 'str',
        'id': 'str',
        'mentions': 'list[str]',
        'read': 'bool',
        'sent_by_email': 'str',
        'sent_by_full_name': 'str',
        'sent_by_image_id': 'str',
        'sent_by_initials': 'str',
        'sent_by_recipient_id': 'str',
        'sent_by_user_id': 'str',
        'signing_group_id': 'str',
        'signing_group_name': 'str',
        'subject': 'str',
        'tab_id': 'str',
        'text': 'str',
        'thread_id': 'str',
        'thread_originator_id': 'str',
        'timestamp': 'str',
        'time_stamp_formatted': 'str',
        'visible_to': 'list[str]'
    }

    attribute_map = {
        'envelope_id': 'envelopeId',
        'hmac': 'hmac',
        'id': 'id',
        'mentions': 'mentions',
        'read': 'read',
        'sent_by_email': 'sentByEmail',
        'sent_by_full_name': 'sentByFullName',
        'sent_by_image_id': 'sentByImageId',
        'sent_by_initials': 'sentByInitials',
        'sent_by_recipient_id': 'sentByRecipientId',
        'sent_by_user_id': 'sentByUserId',
        'signing_group_id': 'signingGroupId',
        'signing_group_name': 'signingGroupName',
        'subject': 'subject',
        'tab_id': 'tabId',
        'text': 'text',
        'thread_id': 'threadId',
        'thread_originator_id': 'threadOriginatorId',
        'timestamp': 'timestamp',
        'time_stamp_formatted': 'timeStampFormatted',
        'visible_to': 'visibleTo'
    }

    def __init__(self, envelope_id=None, hmac=None, id=None, mentions=None, read=None, sent_by_email=None, sent_by_full_name=None, sent_by_image_id=None, sent_by_initials=None, sent_by_recipient_id=None, sent_by_user_id=None, signing_group_id=None, signing_group_name=None, subject=None, tab_id=None, text=None, thread_id=None, thread_originator_id=None, timestamp=None, time_stamp_formatted=None, visible_to=None):  # noqa: E501
        """Comment - a model defined in Swagger"""  # noqa: E501

        self._envelope_id = None
        self._hmac = None
        self._id = None
        self._mentions = None
        self._read = None
        self._sent_by_email = None
        self._sent_by_full_name = None
        self._sent_by_image_id = None
        self._sent_by_initials = None
        self._sent_by_recipient_id = None
        self._sent_by_user_id = None
        self._signing_group_id = None
        self._signing_group_name = None
        self._subject = None
        self._tab_id = None
        self._text = None
        self._thread_id = None
        self._thread_originator_id = None
        self._timestamp = None
        self._time_stamp_formatted = None
        self._visible_to = None
        self.discriminator = None

        if envelope_id is not None:
            self.envelope_id = envelope_id
        if hmac is not None:
            self.hmac = hmac
        if id is not None:
            self.id = id
        if mentions is not None:
            self.mentions = mentions
        if read is not None:
            self.read = read
        if sent_by_email is not None:
            self.sent_by_email = sent_by_email
        if sent_by_full_name is not None:
            self.sent_by_full_name = sent_by_full_name
        if sent_by_image_id is not None:
            self.sent_by_image_id = sent_by_image_id
        if sent_by_initials is not None:
            self.sent_by_initials = sent_by_initials
        if sent_by_recipient_id is not None:
            self.sent_by_recipient_id = sent_by_recipient_id
        if sent_by_user_id is not None:
            self.sent_by_user_id = sent_by_user_id
        if signing_group_id is not None:
            self.signing_group_id = signing_group_id
        if signing_group_name is not None:
            self.signing_group_name = signing_group_name
        if subject is not None:
            self.subject = subject
        if tab_id is not None:
            self.tab_id = tab_id
        if text is not None:
            self.text = text
        if thread_id is not None:
            self.thread_id = thread_id
        if thread_originator_id is not None:
            self.thread_originator_id = thread_originator_id
        if timestamp is not None:
            self.timestamp = timestamp
        if time_stamp_formatted is not None:
            self.time_stamp_formatted = time_stamp_formatted
        if visible_to is not None:
            self.visible_to = visible_to

    @property
    def envelope_id(self):
        """Gets the envelope_id of this Comment.  # noqa: E501

        The envelope ID of the envelope status that failed to post.  # noqa: E501

        :return: The envelope_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._envelope_id

    @envelope_id.setter
    def envelope_id(self, envelope_id):
        """Sets the envelope_id of this Comment.

        The envelope ID of the envelope status that failed to post.  # noqa: E501

        :param envelope_id: The envelope_id of this Comment.  # noqa: E501
        :type: str
        """

        self._envelope_id = envelope_id

    @property
    def hmac(self):
        """Gets the hmac of this Comment.  # noqa: E501

          # noqa: E501

        :return: The hmac of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._hmac

    @hmac.setter
    def hmac(self, hmac):
        """Sets the hmac of this Comment.

          # noqa: E501

        :param hmac: The hmac of this Comment.  # noqa: E501
        :type: str
        """

        self._hmac = hmac

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501

          # noqa: E501

        :return: The id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

          # noqa: E501

        :param id: The id of this Comment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mentions(self):
        """Gets the mentions of this Comment.  # noqa: E501

          # noqa: E501

        :return: The mentions of this Comment.  # noqa: E501
        :rtype: list[str]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Comment.

          # noqa: E501

        :param mentions: The mentions of this Comment.  # noqa: E501
        :type: list[str]
        """

        self._mentions = mentions

    @property
    def read(self):
        """Gets the read of this Comment.  # noqa: E501

          # noqa: E501

        :return: The read of this Comment.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Comment.

          # noqa: E501

        :param read: The read of this Comment.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def sent_by_email(self):
        """Gets the sent_by_email of this Comment.  # noqa: E501

          # noqa: E501

        :return: The sent_by_email of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._sent_by_email

    @sent_by_email.setter
    def sent_by_email(self, sent_by_email):
        """Sets the sent_by_email of this Comment.

          # noqa: E501

        :param sent_by_email: The sent_by_email of this Comment.  # noqa: E501
        :type: str
        """

        self._sent_by_email = sent_by_email

    @property
    def sent_by_full_name(self):
        """Gets the sent_by_full_name of this Comment.  # noqa: E501

          # noqa: E501

        :return: The sent_by_full_name of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._sent_by_full_name

    @sent_by_full_name.setter
    def sent_by_full_name(self, sent_by_full_name):
        """Sets the sent_by_full_name of this Comment.

          # noqa: E501

        :param sent_by_full_name: The sent_by_full_name of this Comment.  # noqa: E501
        :type: str
        """

        self._sent_by_full_name = sent_by_full_name

    @property
    def sent_by_image_id(self):
        """Gets the sent_by_image_id of this Comment.  # noqa: E501

          # noqa: E501

        :return: The sent_by_image_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._sent_by_image_id

    @sent_by_image_id.setter
    def sent_by_image_id(self, sent_by_image_id):
        """Sets the sent_by_image_id of this Comment.

          # noqa: E501

        :param sent_by_image_id: The sent_by_image_id of this Comment.  # noqa: E501
        :type: str
        """

        self._sent_by_image_id = sent_by_image_id

    @property
    def sent_by_initials(self):
        """Gets the sent_by_initials of this Comment.  # noqa: E501

          # noqa: E501

        :return: The sent_by_initials of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._sent_by_initials

    @sent_by_initials.setter
    def sent_by_initials(self, sent_by_initials):
        """Sets the sent_by_initials of this Comment.

          # noqa: E501

        :param sent_by_initials: The sent_by_initials of this Comment.  # noqa: E501
        :type: str
        """

        self._sent_by_initials = sent_by_initials

    @property
    def sent_by_recipient_id(self):
        """Gets the sent_by_recipient_id of this Comment.  # noqa: E501

          # noqa: E501

        :return: The sent_by_recipient_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._sent_by_recipient_id

    @sent_by_recipient_id.setter
    def sent_by_recipient_id(self, sent_by_recipient_id):
        """Sets the sent_by_recipient_id of this Comment.

          # noqa: E501

        :param sent_by_recipient_id: The sent_by_recipient_id of this Comment.  # noqa: E501
        :type: str
        """

        self._sent_by_recipient_id = sent_by_recipient_id

    @property
    def sent_by_user_id(self):
        """Gets the sent_by_user_id of this Comment.  # noqa: E501

          # noqa: E501

        :return: The sent_by_user_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._sent_by_user_id

    @sent_by_user_id.setter
    def sent_by_user_id(self, sent_by_user_id):
        """Sets the sent_by_user_id of this Comment.

          # noqa: E501

        :param sent_by_user_id: The sent_by_user_id of this Comment.  # noqa: E501
        :type: str
        """

        self._sent_by_user_id = sent_by_user_id

    @property
    def signing_group_id(self):
        """Gets the signing_group_id of this Comment.  # noqa: E501

        When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).  # noqa: E501

        :return: The signing_group_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._signing_group_id

    @signing_group_id.setter
    def signing_group_id(self, signing_group_id):
        """Sets the signing_group_id of this Comment.

        When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).  # noqa: E501

        :param signing_group_id: The signing_group_id of this Comment.  # noqa: E501
        :type: str
        """

        self._signing_group_id = signing_group_id

    @property
    def signing_group_name(self):
        """Gets the signing_group_name of this Comment.  # noqa: E501

        The display name for the signing group.   Maximum Length: 100 characters.   # noqa: E501

        :return: The signing_group_name of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._signing_group_name

    @signing_group_name.setter
    def signing_group_name(self, signing_group_name):
        """Sets the signing_group_name of this Comment.

        The display name for the signing group.   Maximum Length: 100 characters.   # noqa: E501

        :param signing_group_name: The signing_group_name of this Comment.  # noqa: E501
        :type: str
        """

        self._signing_group_name = signing_group_name

    @property
    def subject(self):
        """Gets the subject of this Comment.  # noqa: E501

          # noqa: E501

        :return: The subject of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Comment.

          # noqa: E501

        :param subject: The subject of this Comment.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def tab_id(self):
        """Gets the tab_id of this Comment.  # noqa: E501

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :return: The tab_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._tab_id

    @tab_id.setter
    def tab_id(self, tab_id):
        """Sets the tab_id of this Comment.

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :param tab_id: The tab_id of this Comment.  # noqa: E501
        :type: str
        """

        self._tab_id = tab_id

    @property
    def text(self):
        """Gets the text of this Comment.  # noqa: E501

          # noqa: E501

        :return: The text of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Comment.

          # noqa: E501

        :param text: The text of this Comment.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def thread_id(self):
        """Gets the thread_id of this Comment.  # noqa: E501

          # noqa: E501

        :return: The thread_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this Comment.

          # noqa: E501

        :param thread_id: The thread_id of this Comment.  # noqa: E501
        :type: str
        """

        self._thread_id = thread_id

    @property
    def thread_originator_id(self):
        """Gets the thread_originator_id of this Comment.  # noqa: E501

          # noqa: E501

        :return: The thread_originator_id of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._thread_originator_id

    @thread_originator_id.setter
    def thread_originator_id(self, thread_originator_id):
        """Sets the thread_originator_id of this Comment.

          # noqa: E501

        :param thread_originator_id: The thread_originator_id of this Comment.  # noqa: E501
        :type: str
        """

        self._thread_originator_id = thread_originator_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Comment.  # noqa: E501

          # noqa: E501

        :return: The timestamp of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Comment.

          # noqa: E501

        :param timestamp: The timestamp of this Comment.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def time_stamp_formatted(self):
        """Gets the time_stamp_formatted of this Comment.  # noqa: E501

          # noqa: E501

        :return: The time_stamp_formatted of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp_formatted

    @time_stamp_formatted.setter
    def time_stamp_formatted(self, time_stamp_formatted):
        """Sets the time_stamp_formatted of this Comment.

          # noqa: E501

        :param time_stamp_formatted: The time_stamp_formatted of this Comment.  # noqa: E501
        :type: str
        """

        self._time_stamp_formatted = time_stamp_formatted

    @property
    def visible_to(self):
        """Gets the visible_to of this Comment.  # noqa: E501

          # noqa: E501

        :return: The visible_to of this Comment.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to):
        """Sets the visible_to of this Comment.

          # noqa: E501

        :param visible_to: The visible_to of this Comment.  # noqa: E501
        :type: list[str]
        """

        self._visible_to = visible_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Comment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
