# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class CurrencyPlanPrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'currency_symbol': 'str',
        'per_seat_price': 'str',
        'supported_card_types': 'CreditCardTypes',
        'support_incident_fee': 'str',
        'support_plan_fee': 'str'
    }

    attribute_map = {
        'currency_code': 'currencyCode',
        'currency_symbol': 'currencySymbol',
        'per_seat_price': 'perSeatPrice',
        'supported_card_types': 'supportedCardTypes',
        'support_incident_fee': 'supportIncidentFee',
        'support_plan_fee': 'supportPlanFee'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """CurrencyPlanPrice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency_code = None
        self._currency_symbol = None
        self._per_seat_price = None
        self._supported_card_types = None
        self._support_incident_fee = None
        self._support_plan_fee = None
        self.discriminator = None

        setattr(self, "_{}".format('currency_code'), kwargs.get('currency_code', None))
        setattr(self, "_{}".format('currency_symbol'), kwargs.get('currency_symbol', None))
        setattr(self, "_{}".format('per_seat_price'), kwargs.get('per_seat_price', None))
        setattr(self, "_{}".format('supported_card_types'), kwargs.get('supported_card_types', None))
        setattr(self, "_{}".format('support_incident_fee'), kwargs.get('support_incident_fee', None))
        setattr(self, "_{}".format('support_plan_fee'), kwargs.get('support_plan_fee', None))

    @property
    def currency_code(self):
        """Gets the currency_code of this CurrencyPlanPrice.  # noqa: E501

        Specifies the ISO currency code for the account.  # noqa: E501

        :return: The currency_code of this CurrencyPlanPrice.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CurrencyPlanPrice.

        Specifies the ISO currency code for the account.  # noqa: E501

        :param currency_code: The currency_code of this CurrencyPlanPrice.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this CurrencyPlanPrice.  # noqa: E501

        Specifies the currency symbol for the account.  # noqa: E501

        :return: The currency_symbol of this CurrencyPlanPrice.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this CurrencyPlanPrice.

        Specifies the currency symbol for the account.  # noqa: E501

        :param currency_symbol: The currency_symbol of this CurrencyPlanPrice.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def per_seat_price(self):
        """Gets the per_seat_price of this CurrencyPlanPrice.  # noqa: E501

          # noqa: E501

        :return: The per_seat_price of this CurrencyPlanPrice.  # noqa: E501
        :rtype: str
        """
        return self._per_seat_price

    @per_seat_price.setter
    def per_seat_price(self, per_seat_price):
        """Sets the per_seat_price of this CurrencyPlanPrice.

          # noqa: E501

        :param per_seat_price: The per_seat_price of this CurrencyPlanPrice.  # noqa: E501
        :type: str
        """

        self._per_seat_price = per_seat_price

    @property
    def supported_card_types(self):
        """Gets the supported_card_types of this CurrencyPlanPrice.  # noqa: E501

        A simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi).  # noqa: E501

        :return: The supported_card_types of this CurrencyPlanPrice.  # noqa: E501
        :rtype: CreditCardTypes
        """
        return self._supported_card_types

    @supported_card_types.setter
    def supported_card_types(self, supported_card_types):
        """Sets the supported_card_types of this CurrencyPlanPrice.

        A simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi).  # noqa: E501

        :param supported_card_types: The supported_card_types of this CurrencyPlanPrice.  # noqa: E501
        :type: CreditCardTypes
        """

        self._supported_card_types = supported_card_types

    @property
    def support_incident_fee(self):
        """Gets the support_incident_fee of this CurrencyPlanPrice.  # noqa: E501

        The support incident fee charged for each support incident.  # noqa: E501

        :return: The support_incident_fee of this CurrencyPlanPrice.  # noqa: E501
        :rtype: str
        """
        return self._support_incident_fee

    @support_incident_fee.setter
    def support_incident_fee(self, support_incident_fee):
        """Sets the support_incident_fee of this CurrencyPlanPrice.

        The support incident fee charged for each support incident.  # noqa: E501

        :param support_incident_fee: The support_incident_fee of this CurrencyPlanPrice.  # noqa: E501
        :type: str
        """

        self._support_incident_fee = support_incident_fee

    @property
    def support_plan_fee(self):
        """Gets the support_plan_fee of this CurrencyPlanPrice.  # noqa: E501

        The support plan fee charged for this plan.  # noqa: E501

        :return: The support_plan_fee of this CurrencyPlanPrice.  # noqa: E501
        :rtype: str
        """
        return self._support_plan_fee

    @support_plan_fee.setter
    def support_plan_fee(self, support_plan_fee):
        """Sets the support_plan_fee of this CurrencyPlanPrice.

        The support plan fee charged for this plan.  # noqa: E501

        :param support_plan_fee: The support_plan_fee of this CurrencyPlanPrice.  # noqa: E501
        :type: str
        """

        self._support_plan_fee = support_plan_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyPlanPrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyPlanPrice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrencyPlanPrice):
            return True

        return self.to_dict() != other.to_dict()
