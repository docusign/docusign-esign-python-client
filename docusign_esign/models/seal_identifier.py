# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SealIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seal_display_name': 'str',
        'seal_name': 'str'
    }

    attribute_map = {
        'seal_display_name': 'sealDisplayName',
        'seal_name': 'sealName'
    }

    def __init__(self, seal_display_name=None, seal_name=None):  # noqa: E501
        """SealIdentifier - a model defined in Swagger"""  # noqa: E501

        self._seal_display_name = None
        self._seal_name = None
        self.discriminator = None

        if seal_display_name is not None:
            self.seal_display_name = seal_display_name
        if seal_name is not None:
            self.seal_name = seal_name

    @property
    def seal_display_name(self):
        """Gets the seal_display_name of this SealIdentifier.  # noqa: E501

          # noqa: E501

        :return: The seal_display_name of this SealIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._seal_display_name

    @seal_display_name.setter
    def seal_display_name(self, seal_display_name):
        """Sets the seal_display_name of this SealIdentifier.

          # noqa: E501

        :param seal_display_name: The seal_display_name of this SealIdentifier.  # noqa: E501
        :type: str
        """

        self._seal_display_name = seal_display_name

    @property
    def seal_name(self):
        """Gets the seal_name of this SealIdentifier.  # noqa: E501

          # noqa: E501

        :return: The seal_name of this SealIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._seal_name

    @seal_name.setter
    def seal_name(self, seal_name):
        """Sets the seal_name of this SealIdentifier.

          # noqa: E501

        :param seal_name: The seal_name of this SealIdentifier.  # noqa: E501
        :type: str
        """

        self._seal_name = seal_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SealIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SealIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
