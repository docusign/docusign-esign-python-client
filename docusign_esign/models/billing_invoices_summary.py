# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class BillingInvoicesSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_balance': 'str',
        'billing_invoices': 'list[BillingInvoice]',
        'currency_code': 'str',
        'past_due_balance': 'str',
        'payment_allowed': 'str'
    }

    attribute_map = {
        'account_balance': 'accountBalance',
        'billing_invoices': 'billingInvoices',
        'currency_code': 'currencyCode',
        'past_due_balance': 'pastDueBalance',
        'payment_allowed': 'paymentAllowed'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """BillingInvoicesSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_balance = None
        self._billing_invoices = None
        self._currency_code = None
        self._past_due_balance = None
        self._payment_allowed = None
        self.discriminator = None

        setattr(self, "_{}".format('account_balance'), kwargs.get('account_balance', None))
        setattr(self, "_{}".format('billing_invoices'), kwargs.get('billing_invoices', None))
        setattr(self, "_{}".format('currency_code'), kwargs.get('currency_code', None))
        setattr(self, "_{}".format('past_due_balance'), kwargs.get('past_due_balance', None))
        setattr(self, "_{}".format('payment_allowed'), kwargs.get('payment_allowed', None))

    @property
    def account_balance(self):
        """Gets the account_balance of this BillingInvoicesSummary.  # noqa: E501

          # noqa: E501

        :return: The account_balance of this BillingInvoicesSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this BillingInvoicesSummary.

          # noqa: E501

        :param account_balance: The account_balance of this BillingInvoicesSummary.  # noqa: E501
        :type: str
        """

        self._account_balance = account_balance

    @property
    def billing_invoices(self):
        """Gets the billing_invoices of this BillingInvoicesSummary.  # noqa: E501

        Reserved: TBD  # noqa: E501

        :return: The billing_invoices of this BillingInvoicesSummary.  # noqa: E501
        :rtype: list[BillingInvoice]
        """
        return self._billing_invoices

    @billing_invoices.setter
    def billing_invoices(self, billing_invoices):
        """Sets the billing_invoices of this BillingInvoicesSummary.

        Reserved: TBD  # noqa: E501

        :param billing_invoices: The billing_invoices of this BillingInvoicesSummary.  # noqa: E501
        :type: list[BillingInvoice]
        """

        self._billing_invoices = billing_invoices

    @property
    def currency_code(self):
        """Gets the currency_code of this BillingInvoicesSummary.  # noqa: E501

          # noqa: E501

        :return: The currency_code of this BillingInvoicesSummary.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BillingInvoicesSummary.

          # noqa: E501

        :param currency_code: The currency_code of this BillingInvoicesSummary.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def past_due_balance(self):
        """Gets the past_due_balance of this BillingInvoicesSummary.  # noqa: E501

          # noqa: E501

        :return: The past_due_balance of this BillingInvoicesSummary.  # noqa: E501
        :rtype: str
        """
        return self._past_due_balance

    @past_due_balance.setter
    def past_due_balance(self, past_due_balance):
        """Sets the past_due_balance of this BillingInvoicesSummary.

          # noqa: E501

        :param past_due_balance: The past_due_balance of this BillingInvoicesSummary.  # noqa: E501
        :type: str
        """

        self._past_due_balance = past_due_balance

    @property
    def payment_allowed(self):
        """Gets the payment_allowed of this BillingInvoicesSummary.  # noqa: E501

          # noqa: E501

        :return: The payment_allowed of this BillingInvoicesSummary.  # noqa: E501
        :rtype: str
        """
        return self._payment_allowed

    @payment_allowed.setter
    def payment_allowed(self, payment_allowed):
        """Sets the payment_allowed of this BillingInvoicesSummary.

          # noqa: E501

        :param payment_allowed: The payment_allowed of this BillingInvoicesSummary.  # noqa: E501
        :type: str
        """

        self._payment_allowed = payment_allowed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingInvoicesSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingInvoicesSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillingInvoicesSummary):
            return True

        return self.to_dict() != other.to_dict()
