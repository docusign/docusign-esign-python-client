# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class Page(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dpi': 'str',
        'error_details': 'ErrorDetails',
        'height': 'str',
        'image_bytes': 'str',
        'mime_type': 'str',
        'page_id': 'str',
        'sequence': 'str',
        'width': 'str'
    }

    attribute_map = {
        'dpi': 'dpi',
        'error_details': 'errorDetails',
        'height': 'height',
        'image_bytes': 'imageBytes',
        'mime_type': 'mimeType',
        'page_id': 'pageId',
        'sequence': 'sequence',
        'width': 'width'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """Page - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dpi = None
        self._error_details = None
        self._height = None
        self._image_bytes = None
        self._mime_type = None
        self._page_id = None
        self._sequence = None
        self._width = None
        self.discriminator = None

        setattr(self, "_{}".format('dpi'), kwargs.get('dpi', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('height'), kwargs.get('height', None))
        setattr(self, "_{}".format('image_bytes'), kwargs.get('image_bytes', None))
        setattr(self, "_{}".format('mime_type'), kwargs.get('mime_type', None))
        setattr(self, "_{}".format('page_id'), kwargs.get('page_id', None))
        setattr(self, "_{}".format('sequence'), kwargs.get('sequence', None))
        setattr(self, "_{}".format('width'), kwargs.get('width', None))

    @property
    def dpi(self):
        """Gets the dpi of this Page.  # noqa: E501

        The number of dots per inch used for the page image.  # noqa: E501

        :return: The dpi of this Page.  # noqa: E501
        :rtype: str
        """
        return self._dpi

    @dpi.setter
    def dpi(self, dpi):
        """Sets the dpi of this Page.

        The number of dots per inch used for the page image.  # noqa: E501

        :param dpi: The dpi of this Page.  # noqa: E501
        :type: str
        """

        self._dpi = dpi

    @property
    def error_details(self):
        """Gets the error_details of this Page.  # noqa: E501

        If an error occurs, this property describes the error.  # noqa: E501

        :return: The error_details of this Page.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this Page.

        If an error occurs, this property describes the error.  # noqa: E501

        :param error_details: The error_details of this Page.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def height(self):
        """Gets the height of this Page.  # noqa: E501

        Height of the tab in pixels.  # noqa: E501

        :return: The height of this Page.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Page.

        Height of the tab in pixels.  # noqa: E501

        :param height: The height of this Page.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def image_bytes(self):
        """Gets the image_bytes of this Page.  # noqa: E501

          # noqa: E501

        :return: The image_bytes of this Page.  # noqa: E501
        :rtype: str
        """
        return self._image_bytes

    @image_bytes.setter
    def image_bytes(self, image_bytes):
        """Sets the image_bytes of this Page.

          # noqa: E501

        :param image_bytes: The image_bytes of this Page.  # noqa: E501
        :type: str
        """

        self._image_bytes = image_bytes

    @property
    def mime_type(self):
        """Gets the mime_type of this Page.  # noqa: E501

          # noqa: E501

        :return: The mime_type of this Page.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Page.

          # noqa: E501

        :param mime_type: The mime_type of this Page.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def page_id(self):
        """Gets the page_id of this Page.  # noqa: E501

          # noqa: E501

        :return: The page_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this Page.

          # noqa: E501

        :param page_id: The page_id of this Page.  # noqa: E501
        :type: str
        """

        self._page_id = page_id

    @property
    def sequence(self):
        """Gets the sequence of this Page.  # noqa: E501

          # noqa: E501

        :return: The sequence of this Page.  # noqa: E501
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Page.

          # noqa: E501

        :param sequence: The sequence of this Page.  # noqa: E501
        :type: str
        """

        self._sequence = sequence

    @property
    def width(self):
        """Gets the width of this Page.  # noqa: E501

        Width of the tab in pixels.  # noqa: E501

        :return: The width of this Page.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Page.

        Width of the tab in pixels.  # noqa: E501

        :param width: The width of this Page.  # noqa: E501
        :type: str
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Page, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Page):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Page):
            return True

        return self.to_dict() != other.to_dict()
