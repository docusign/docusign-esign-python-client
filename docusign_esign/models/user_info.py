# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class UserInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_name': 'str',
        'activation_access_code': 'str',
        'email': 'str',
        'error_details': 'ErrorDetails',
        'login_status': 'str',
        'membership_id': 'str',
        'send_activation_email': 'str',
        'uri': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'user_status': 'str',
        'user_type': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_name': 'accountName',
        'activation_access_code': 'activationAccessCode',
        'email': 'email',
        'error_details': 'errorDetails',
        'login_status': 'loginStatus',
        'membership_id': 'membershipId',
        'send_activation_email': 'sendActivationEmail',
        'uri': 'uri',
        'user_id': 'userId',
        'user_name': 'userName',
        'user_status': 'userStatus',
        'user_type': 'userType'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """UserInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._account_name = None
        self._activation_access_code = None
        self._email = None
        self._error_details = None
        self._login_status = None
        self._membership_id = None
        self._send_activation_email = None
        self._uri = None
        self._user_id = None
        self._user_name = None
        self._user_status = None
        self._user_type = None
        self.discriminator = None

        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('account_name'), kwargs.get('account_name', None))
        setattr(self, "_{}".format('activation_access_code'), kwargs.get('activation_access_code', None))
        setattr(self, "_{}".format('email'), kwargs.get('email', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('login_status'), kwargs.get('login_status', None))
        setattr(self, "_{}".format('membership_id'), kwargs.get('membership_id', None))
        setattr(self, "_{}".format('send_activation_email'), kwargs.get('send_activation_email', None))
        setattr(self, "_{}".format('uri'), kwargs.get('uri', None))
        setattr(self, "_{}".format('user_id'), kwargs.get('user_id', None))
        setattr(self, "_{}".format('user_name'), kwargs.get('user_name', None))
        setattr(self, "_{}".format('user_status'), kwargs.get('user_status', None))
        setattr(self, "_{}".format('user_type'), kwargs.get('user_type', None))

    @property
    def account_id(self):
        """Gets the account_id of this UserInfo.  # noqa: E501

        The account ID associated with the envelope.  # noqa: E501

        :return: The account_id of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserInfo.

        The account ID associated with the envelope.  # noqa: E501

        :param account_id: The account_id of this UserInfo.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The account_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this UserInfo.

          # noqa: E501

        :param account_name: The account_name of this UserInfo.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def activation_access_code(self):
        """Gets the activation_access_code of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The activation_access_code of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._activation_access_code

    @activation_access_code.setter
    def activation_access_code(self, activation_access_code):
        """Sets the activation_access_code of this UserInfo.

          # noqa: E501

        :param activation_access_code: The activation_access_code of this UserInfo.  # noqa: E501
        :type: str
        """

        self._activation_access_code = activation_access_code

    @property
    def email(self):
        """Gets the email of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The email of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.

          # noqa: E501

        :param email: The email of this UserInfo.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def error_details(self):
        """Gets the error_details of this UserInfo.  # noqa: E501

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :return: The error_details of this UserInfo.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this UserInfo.

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :param error_details: The error_details of this UserInfo.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def login_status(self):
        """Gets the login_status of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The login_status of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._login_status

    @login_status.setter
    def login_status(self, login_status):
        """Sets the login_status of this UserInfo.

          # noqa: E501

        :param login_status: The login_status of this UserInfo.  # noqa: E501
        :type: str
        """

        self._login_status = login_status

    @property
    def membership_id(self):
        """Gets the membership_id of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The membership_id of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this UserInfo.

          # noqa: E501

        :param membership_id: The membership_id of this UserInfo.  # noqa: E501
        :type: str
        """

        self._membership_id = membership_id

    @property
    def send_activation_email(self):
        """Gets the send_activation_email of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The send_activation_email of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._send_activation_email

    @send_activation_email.setter
    def send_activation_email(self, send_activation_email):
        """Sets the send_activation_email of this UserInfo.

          # noqa: E501

        :param send_activation_email: The send_activation_email of this UserInfo.  # noqa: E501
        :type: str
        """

        self._send_activation_email = send_activation_email

    @property
    def uri(self):
        """Gets the uri of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The uri of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this UserInfo.

          # noqa: E501

        :param uri: The uri of this UserInfo.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def user_id(self):
        """Gets the user_id of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The user_id of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserInfo.

          # noqa: E501

        :param user_id: The user_id of this UserInfo.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The user_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserInfo.

          # noqa: E501

        :param user_name: The user_name of this UserInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_status(self):
        """Gets the user_status of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The user_status of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this UserInfo.

          # noqa: E501

        :param user_status: The user_status of this UserInfo.  # noqa: E501
        :type: str
        """

        self._user_status = user_status

    @property
    def user_type(self):
        """Gets the user_type of this UserInfo.  # noqa: E501

          # noqa: E501

        :return: The user_type of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserInfo.

          # noqa: E501

        :param user_type: The user_type of this UserInfo.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInfo):
            return True

        return self.to_dict() != other.to_dict()
