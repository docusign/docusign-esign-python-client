# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, account_name=None, activation_access_code=None, email=None, error_details=None, login_status=None, membership_id=None, send_activation_email=None, uri=None, user_id=None, user_name=None, user_status=None, user_type=None):
        """
        UserInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'str',
            'account_name': 'str',
            'activation_access_code': 'str',
            'email': 'str',
            'error_details': 'ErrorDetails',
            'login_status': 'str',
            'membership_id': 'str',
            'send_activation_email': 'str',
            'uri': 'str',
            'user_id': 'str',
            'user_name': 'str',
            'user_status': 'str',
            'user_type': 'str'
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_name': 'accountName',
            'activation_access_code': 'activationAccessCode',
            'email': 'email',
            'error_details': 'errorDetails',
            'login_status': 'loginStatus',
            'membership_id': 'membershipId',
            'send_activation_email': 'sendActivationEmail',
            'uri': 'uri',
            'user_id': 'userId',
            'user_name': 'userName',
            'user_status': 'userStatus',
            'user_type': 'userType'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._activation_access_code = activation_access_code
        self._email = email
        self._error_details = error_details
        self._login_status = login_status
        self._membership_id = membership_id
        self._send_activation_email = send_activation_email
        self._uri = uri
        self._user_id = user_id
        self._user_name = user_name
        self._user_status = user_status
        self._user_type = user_type

    @property
    def account_id(self):
        """
        Gets the account_id of this UserInfo.
        The account ID associated with the envelope.

        :return: The account_id of this UserInfo.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this UserInfo.
        The account ID associated with the envelope.

        :param account_id: The account_id of this UserInfo.
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """
        Gets the account_name of this UserInfo.
        

        :return: The account_name of this UserInfo.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """
        Sets the account_name of this UserInfo.
        

        :param account_name: The account_name of this UserInfo.
        :type: str
        """

        self._account_name = account_name

    @property
    def activation_access_code(self):
        """
        Gets the activation_access_code of this UserInfo.
        

        :return: The activation_access_code of this UserInfo.
        :rtype: str
        """
        return self._activation_access_code

    @activation_access_code.setter
    def activation_access_code(self, activation_access_code):
        """
        Sets the activation_access_code of this UserInfo.
        

        :param activation_access_code: The activation_access_code of this UserInfo.
        :type: str
        """

        self._activation_access_code = activation_access_code

    @property
    def email(self):
        """
        Gets the email of this UserInfo.
        

        :return: The email of this UserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserInfo.
        

        :param email: The email of this UserInfo.
        :type: str
        """

        self._email = email

    @property
    def error_details(self):
        """
        Gets the error_details of this UserInfo.

        :return: The error_details of this UserInfo.
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """
        Sets the error_details of this UserInfo.

        :param error_details: The error_details of this UserInfo.
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def login_status(self):
        """
        Gets the login_status of this UserInfo.
        

        :return: The login_status of this UserInfo.
        :rtype: str
        """
        return self._login_status

    @login_status.setter
    def login_status(self, login_status):
        """
        Sets the login_status of this UserInfo.
        

        :param login_status: The login_status of this UserInfo.
        :type: str
        """

        self._login_status = login_status

    @property
    def membership_id(self):
        """
        Gets the membership_id of this UserInfo.
        

        :return: The membership_id of this UserInfo.
        :rtype: str
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """
        Sets the membership_id of this UserInfo.
        

        :param membership_id: The membership_id of this UserInfo.
        :type: str
        """

        self._membership_id = membership_id

    @property
    def send_activation_email(self):
        """
        Gets the send_activation_email of this UserInfo.
        

        :return: The send_activation_email of this UserInfo.
        :rtype: str
        """
        return self._send_activation_email

    @send_activation_email.setter
    def send_activation_email(self, send_activation_email):
        """
        Sets the send_activation_email of this UserInfo.
        

        :param send_activation_email: The send_activation_email of this UserInfo.
        :type: str
        """

        self._send_activation_email = send_activation_email

    @property
    def uri(self):
        """
        Gets the uri of this UserInfo.
        

        :return: The uri of this UserInfo.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this UserInfo.
        

        :param uri: The uri of this UserInfo.
        :type: str
        """

        self._uri = uri

    @property
    def user_id(self):
        """
        Gets the user_id of this UserInfo.
        

        :return: The user_id of this UserInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this UserInfo.
        

        :param user_id: The user_id of this UserInfo.
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """
        Gets the user_name of this UserInfo.
        

        :return: The user_name of this UserInfo.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this UserInfo.
        

        :param user_name: The user_name of this UserInfo.
        :type: str
        """

        self._user_name = user_name

    @property
    def user_status(self):
        """
        Gets the user_status of this UserInfo.
        

        :return: The user_status of this UserInfo.
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """
        Sets the user_status of this UserInfo.
        

        :param user_status: The user_status of this UserInfo.
        :type: str
        """

        self._user_status = user_status

    @property
    def user_type(self):
        """
        Gets the user_type of this UserInfo.
        

        :return: The user_type of this UserInfo.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """
        Sets the user_type of this UserInfo.
        

        :param user_type: The user_type of this UserInfo.
        :type: str
        """

        self._user_type = user_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
