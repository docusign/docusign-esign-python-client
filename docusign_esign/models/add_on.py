# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddOn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'str',
        'add_on_id': 'str',
        'id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'active': 'active',
        'add_on_id': 'addOnId',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, active=None, add_on_id=None, id=None, name=None):  # noqa: E501
        """AddOn - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._add_on_id = None
        self._id = None
        self._name = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if add_on_id is not None:
            self.add_on_id = add_on_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def active(self):
        """Gets the active of this AddOn.  # noqa: E501

        Reserved:  # noqa: E501

        :return: The active of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AddOn.

        Reserved:  # noqa: E501

        :param active: The active of this AddOn.  # noqa: E501
        :type: str
        """

        self._active = active

    @property
    def add_on_id(self):
        """Gets the add_on_id of this AddOn.  # noqa: E501

        Reserved:  # noqa: E501

        :return: The add_on_id of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._add_on_id

    @add_on_id.setter
    def add_on_id(self, add_on_id):
        """Sets the add_on_id of this AddOn.

        Reserved:  # noqa: E501

        :param add_on_id: The add_on_id of this AddOn.  # noqa: E501
        :type: str
        """

        self._add_on_id = add_on_id

    @property
    def id(self):
        """Gets the id of this AddOn.  # noqa: E501

          # noqa: E501

        :return: The id of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddOn.

          # noqa: E501

        :param id: The id of this AddOn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AddOn.  # noqa: E501

        Reserved:  # noqa: E501

        :return: The name of this AddOn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddOn.

        Reserved:  # noqa: E501

        :param name: The name of this AddOn.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
