# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class EnvelopeViewSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'back_button_action': 'str',
        'document_settings': 'EnvelopeViewDocumentSettings',
        'envelope_custom_field_settings': 'EnvelopeViewEnvelopeCustomFieldSettings',
        'lock_token': 'str',
        'recipient_settings': 'EnvelopeViewRecipientSettings',
        'send_button_action': 'str',
        'show_advanced_options': 'str',
        'show_back_button': 'str',
        'show_discard_action': 'str',
        'show_header_actions': 'str',
        'starting_screen': 'str',
        'tagger_settings': 'EnvelopeViewTaggerSettings',
        'template_settings': 'EnvelopeViewTemplateSettings'
    }

    attribute_map = {
        'back_button_action': 'backButtonAction',
        'document_settings': 'documentSettings',
        'envelope_custom_field_settings': 'envelopeCustomFieldSettings',
        'lock_token': 'lockToken',
        'recipient_settings': 'recipientSettings',
        'send_button_action': 'sendButtonAction',
        'show_advanced_options': 'showAdvancedOptions',
        'show_back_button': 'showBackButton',
        'show_discard_action': 'showDiscardAction',
        'show_header_actions': 'showHeaderActions',
        'starting_screen': 'startingScreen',
        'tagger_settings': 'taggerSettings',
        'template_settings': 'templateSettings'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """EnvelopeViewSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._back_button_action = None
        self._document_settings = None
        self._envelope_custom_field_settings = None
        self._lock_token = None
        self._recipient_settings = None
        self._send_button_action = None
        self._show_advanced_options = None
        self._show_back_button = None
        self._show_discard_action = None
        self._show_header_actions = None
        self._starting_screen = None
        self._tagger_settings = None
        self._template_settings = None
        self.discriminator = None

        setattr(self, "_{}".format('back_button_action'), kwargs.get('back_button_action', None))
        setattr(self, "_{}".format('document_settings'), kwargs.get('document_settings', None))
        setattr(self, "_{}".format('envelope_custom_field_settings'), kwargs.get('envelope_custom_field_settings', None))
        setattr(self, "_{}".format('lock_token'), kwargs.get('lock_token', None))
        setattr(self, "_{}".format('recipient_settings'), kwargs.get('recipient_settings', None))
        setattr(self, "_{}".format('send_button_action'), kwargs.get('send_button_action', None))
        setattr(self, "_{}".format('show_advanced_options'), kwargs.get('show_advanced_options', None))
        setattr(self, "_{}".format('show_back_button'), kwargs.get('show_back_button', None))
        setattr(self, "_{}".format('show_discard_action'), kwargs.get('show_discard_action', None))
        setattr(self, "_{}".format('show_header_actions'), kwargs.get('show_header_actions', None))
        setattr(self, "_{}".format('starting_screen'), kwargs.get('starting_screen', None))
        setattr(self, "_{}".format('tagger_settings'), kwargs.get('tagger_settings', None))
        setattr(self, "_{}".format('template_settings'), kwargs.get('template_settings', None))

    @property
    def back_button_action(self):
        """Gets the back_button_action of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The back_button_action of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._back_button_action

    @back_button_action.setter
    def back_button_action(self, back_button_action):
        """Sets the back_button_action of this EnvelopeViewSettings.

          # noqa: E501

        :param back_button_action: The back_button_action of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._back_button_action = back_button_action

    @property
    def document_settings(self):
        """Gets the document_settings of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The document_settings of this EnvelopeViewSettings.  # noqa: E501
        :rtype: EnvelopeViewDocumentSettings
        """
        return self._document_settings

    @document_settings.setter
    def document_settings(self, document_settings):
        """Sets the document_settings of this EnvelopeViewSettings.

          # noqa: E501

        :param document_settings: The document_settings of this EnvelopeViewSettings.  # noqa: E501
        :type: EnvelopeViewDocumentSettings
        """

        self._document_settings = document_settings

    @property
    def envelope_custom_field_settings(self):
        """Gets the envelope_custom_field_settings of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The envelope_custom_field_settings of this EnvelopeViewSettings.  # noqa: E501
        :rtype: EnvelopeViewEnvelopeCustomFieldSettings
        """
        return self._envelope_custom_field_settings

    @envelope_custom_field_settings.setter
    def envelope_custom_field_settings(self, envelope_custom_field_settings):
        """Sets the envelope_custom_field_settings of this EnvelopeViewSettings.

          # noqa: E501

        :param envelope_custom_field_settings: The envelope_custom_field_settings of this EnvelopeViewSettings.  # noqa: E501
        :type: EnvelopeViewEnvelopeCustomFieldSettings
        """

        self._envelope_custom_field_settings = envelope_custom_field_settings

    @property
    def lock_token(self):
        """Gets the lock_token of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The lock_token of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._lock_token

    @lock_token.setter
    def lock_token(self, lock_token):
        """Sets the lock_token of this EnvelopeViewSettings.

          # noqa: E501

        :param lock_token: The lock_token of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._lock_token = lock_token

    @property
    def recipient_settings(self):
        """Gets the recipient_settings of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The recipient_settings of this EnvelopeViewSettings.  # noqa: E501
        :rtype: EnvelopeViewRecipientSettings
        """
        return self._recipient_settings

    @recipient_settings.setter
    def recipient_settings(self, recipient_settings):
        """Sets the recipient_settings of this EnvelopeViewSettings.

          # noqa: E501

        :param recipient_settings: The recipient_settings of this EnvelopeViewSettings.  # noqa: E501
        :type: EnvelopeViewRecipientSettings
        """

        self._recipient_settings = recipient_settings

    @property
    def send_button_action(self):
        """Gets the send_button_action of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The send_button_action of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._send_button_action

    @send_button_action.setter
    def send_button_action(self, send_button_action):
        """Sets the send_button_action of this EnvelopeViewSettings.

          # noqa: E501

        :param send_button_action: The send_button_action of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._send_button_action = send_button_action

    @property
    def show_advanced_options(self):
        """Gets the show_advanced_options of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The show_advanced_options of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_advanced_options

    @show_advanced_options.setter
    def show_advanced_options(self, show_advanced_options):
        """Sets the show_advanced_options of this EnvelopeViewSettings.

          # noqa: E501

        :param show_advanced_options: The show_advanced_options of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._show_advanced_options = show_advanced_options

    @property
    def show_back_button(self):
        """Gets the show_back_button of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The show_back_button of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_back_button

    @show_back_button.setter
    def show_back_button(self, show_back_button):
        """Sets the show_back_button of this EnvelopeViewSettings.

          # noqa: E501

        :param show_back_button: The show_back_button of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._show_back_button = show_back_button

    @property
    def show_discard_action(self):
        """Gets the show_discard_action of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The show_discard_action of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_discard_action

    @show_discard_action.setter
    def show_discard_action(self, show_discard_action):
        """Sets the show_discard_action of this EnvelopeViewSettings.

          # noqa: E501

        :param show_discard_action: The show_discard_action of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._show_discard_action = show_discard_action

    @property
    def show_header_actions(self):
        """Gets the show_header_actions of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The show_header_actions of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._show_header_actions

    @show_header_actions.setter
    def show_header_actions(self, show_header_actions):
        """Sets the show_header_actions of this EnvelopeViewSettings.

          # noqa: E501

        :param show_header_actions: The show_header_actions of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._show_header_actions = show_header_actions

    @property
    def starting_screen(self):
        """Gets the starting_screen of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The starting_screen of this EnvelopeViewSettings.  # noqa: E501
        :rtype: str
        """
        return self._starting_screen

    @starting_screen.setter
    def starting_screen(self, starting_screen):
        """Sets the starting_screen of this EnvelopeViewSettings.

          # noqa: E501

        :param starting_screen: The starting_screen of this EnvelopeViewSettings.  # noqa: E501
        :type: str
        """

        self._starting_screen = starting_screen

    @property
    def tagger_settings(self):
        """Gets the tagger_settings of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The tagger_settings of this EnvelopeViewSettings.  # noqa: E501
        :rtype: EnvelopeViewTaggerSettings
        """
        return self._tagger_settings

    @tagger_settings.setter
    def tagger_settings(self, tagger_settings):
        """Sets the tagger_settings of this EnvelopeViewSettings.

          # noqa: E501

        :param tagger_settings: The tagger_settings of this EnvelopeViewSettings.  # noqa: E501
        :type: EnvelopeViewTaggerSettings
        """

        self._tagger_settings = tagger_settings

    @property
    def template_settings(self):
        """Gets the template_settings of this EnvelopeViewSettings.  # noqa: E501

          # noqa: E501

        :return: The template_settings of this EnvelopeViewSettings.  # noqa: E501
        :rtype: EnvelopeViewTemplateSettings
        """
        return self._template_settings

    @template_settings.setter
    def template_settings(self, template_settings):
        """Sets the template_settings of this EnvelopeViewSettings.

          # noqa: E501

        :param template_settings: The template_settings of this EnvelopeViewSettings.  # noqa: E501
        :type: EnvelopeViewTemplateSettings
        """

        self._template_settings = template_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvelopeViewSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvelopeViewSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvelopeViewSettings):
            return True

        return self.to_dict() != other.to_dict()
