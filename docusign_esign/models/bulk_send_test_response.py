# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BulkSendTestResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_be_sent': 'bool',
        'validation_error_details': 'list[str]',
        'validation_errors': 'list[str]'
    }

    attribute_map = {
        'can_be_sent': 'canBeSent',
        'validation_error_details': 'validationErrorDetails',
        'validation_errors': 'validationErrors'
    }

    def __init__(self, can_be_sent=None, validation_error_details=None, validation_errors=None):  # noqa: E501
        """BulkSendTestResponse - a model defined in Swagger"""  # noqa: E501

        self._can_be_sent = None
        self._validation_error_details = None
        self._validation_errors = None
        self.discriminator = None

        if can_be_sent is not None:
            self.can_be_sent = can_be_sent
        if validation_error_details is not None:
            self.validation_error_details = validation_error_details
        if validation_errors is not None:
            self.validation_errors = validation_errors

    @property
    def can_be_sent(self):
        """Gets the can_be_sent of this BulkSendTestResponse.  # noqa: E501

          # noqa: E501

        :return: The can_be_sent of this BulkSendTestResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_sent

    @can_be_sent.setter
    def can_be_sent(self, can_be_sent):
        """Sets the can_be_sent of this BulkSendTestResponse.

          # noqa: E501

        :param can_be_sent: The can_be_sent of this BulkSendTestResponse.  # noqa: E501
        :type: bool
        """

        self._can_be_sent = can_be_sent

    @property
    def validation_error_details(self):
        """Gets the validation_error_details of this BulkSendTestResponse.  # noqa: E501

          # noqa: E501

        :return: The validation_error_details of this BulkSendTestResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._validation_error_details

    @validation_error_details.setter
    def validation_error_details(self, validation_error_details):
        """Sets the validation_error_details of this BulkSendTestResponse.

          # noqa: E501

        :param validation_error_details: The validation_error_details of this BulkSendTestResponse.  # noqa: E501
        :type: list[str]
        """

        self._validation_error_details = validation_error_details

    @property
    def validation_errors(self):
        """Gets the validation_errors of this BulkSendTestResponse.  # noqa: E501

          # noqa: E501

        :return: The validation_errors of this BulkSendTestResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this BulkSendTestResponse.

          # noqa: E501

        :param validation_errors: The validation_errors of this BulkSendTestResponse.  # noqa: E501
        :type: list[str]
        """

        self._validation_errors = validation_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkSendTestResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkSendTestResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
