# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class Radio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anchor_allow_white_space_in_characters': 'str',
        'anchor_allow_white_space_in_characters_metadata': 'PropertyMetadata',
        'anchor_case_sensitive': 'str',
        'anchor_case_sensitive_metadata': 'PropertyMetadata',
        'anchor_horizontal_alignment': 'str',
        'anchor_horizontal_alignment_metadata': 'PropertyMetadata',
        'anchor_ignore_if_not_present': 'str',
        'anchor_ignore_if_not_present_metadata': 'PropertyMetadata',
        'anchor_match_whole_word': 'str',
        'anchor_match_whole_word_metadata': 'PropertyMetadata',
        'anchor_string': 'str',
        'anchor_string_metadata': 'PropertyMetadata',
        'anchor_tab_processor_version': 'str',
        'anchor_tab_processor_version_metadata': 'PropertyMetadata',
        'anchor_units': 'str',
        'anchor_units_metadata': 'PropertyMetadata',
        'anchor_x_offset': 'str',
        'anchor_x_offset_metadata': 'PropertyMetadata',
        'anchor_y_offset': 'str',
        'anchor_y_offset_metadata': 'PropertyMetadata',
        'bold': 'str',
        'bold_metadata': 'PropertyMetadata',
        'caption': 'str',
        'caption_metadata': 'PropertyMetadata',
        'error_details': 'ErrorDetails',
        'font': 'str',
        'font_color': 'str',
        'font_color_metadata': 'PropertyMetadata',
        'font_metadata': 'PropertyMetadata',
        'font_size': 'str',
        'font_size_metadata': 'PropertyMetadata',
        'italic': 'str',
        'italic_metadata': 'PropertyMetadata',
        'locked': 'str',
        'locked_metadata': 'PropertyMetadata',
        'page_number': 'str',
        'page_number_metadata': 'PropertyMetadata',
        'required': 'str',
        'required_metadata': 'PropertyMetadata',
        'selected': 'str',
        'selected_metadata': 'PropertyMetadata',
        'status': 'str',
        'status_metadata': 'PropertyMetadata',
        'tab_id': 'str',
        'tab_id_metadata': 'PropertyMetadata',
        'tab_order': 'str',
        'tab_order_metadata': 'PropertyMetadata',
        'underline': 'str',
        'underline_metadata': 'PropertyMetadata',
        'value': 'str',
        'value_metadata': 'PropertyMetadata',
        'x_position': 'str',
        'x_position_metadata': 'PropertyMetadata',
        'y_position': 'str',
        'y_position_metadata': 'PropertyMetadata'
    }

    attribute_map = {
        'anchor_allow_white_space_in_characters': 'anchorAllowWhiteSpaceInCharacters',
        'anchor_allow_white_space_in_characters_metadata': 'anchorAllowWhiteSpaceInCharactersMetadata',
        'anchor_case_sensitive': 'anchorCaseSensitive',
        'anchor_case_sensitive_metadata': 'anchorCaseSensitiveMetadata',
        'anchor_horizontal_alignment': 'anchorHorizontalAlignment',
        'anchor_horizontal_alignment_metadata': 'anchorHorizontalAlignmentMetadata',
        'anchor_ignore_if_not_present': 'anchorIgnoreIfNotPresent',
        'anchor_ignore_if_not_present_metadata': 'anchorIgnoreIfNotPresentMetadata',
        'anchor_match_whole_word': 'anchorMatchWholeWord',
        'anchor_match_whole_word_metadata': 'anchorMatchWholeWordMetadata',
        'anchor_string': 'anchorString',
        'anchor_string_metadata': 'anchorStringMetadata',
        'anchor_tab_processor_version': 'anchorTabProcessorVersion',
        'anchor_tab_processor_version_metadata': 'anchorTabProcessorVersionMetadata',
        'anchor_units': 'anchorUnits',
        'anchor_units_metadata': 'anchorUnitsMetadata',
        'anchor_x_offset': 'anchorXOffset',
        'anchor_x_offset_metadata': 'anchorXOffsetMetadata',
        'anchor_y_offset': 'anchorYOffset',
        'anchor_y_offset_metadata': 'anchorYOffsetMetadata',
        'bold': 'bold',
        'bold_metadata': 'boldMetadata',
        'caption': 'caption',
        'caption_metadata': 'captionMetadata',
        'error_details': 'errorDetails',
        'font': 'font',
        'font_color': 'fontColor',
        'font_color_metadata': 'fontColorMetadata',
        'font_metadata': 'fontMetadata',
        'font_size': 'fontSize',
        'font_size_metadata': 'fontSizeMetadata',
        'italic': 'italic',
        'italic_metadata': 'italicMetadata',
        'locked': 'locked',
        'locked_metadata': 'lockedMetadata',
        'page_number': 'pageNumber',
        'page_number_metadata': 'pageNumberMetadata',
        'required': 'required',
        'required_metadata': 'requiredMetadata',
        'selected': 'selected',
        'selected_metadata': 'selectedMetadata',
        'status': 'status',
        'status_metadata': 'statusMetadata',
        'tab_id': 'tabId',
        'tab_id_metadata': 'tabIdMetadata',
        'tab_order': 'tabOrder',
        'tab_order_metadata': 'tabOrderMetadata',
        'underline': 'underline',
        'underline_metadata': 'underlineMetadata',
        'value': 'value',
        'value_metadata': 'valueMetadata',
        'x_position': 'xPosition',
        'x_position_metadata': 'xPositionMetadata',
        'y_position': 'yPosition',
        'y_position_metadata': 'yPositionMetadata'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """Radio - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._anchor_allow_white_space_in_characters = None
        self._anchor_allow_white_space_in_characters_metadata = None
        self._anchor_case_sensitive = None
        self._anchor_case_sensitive_metadata = None
        self._anchor_horizontal_alignment = None
        self._anchor_horizontal_alignment_metadata = None
        self._anchor_ignore_if_not_present = None
        self._anchor_ignore_if_not_present_metadata = None
        self._anchor_match_whole_word = None
        self._anchor_match_whole_word_metadata = None
        self._anchor_string = None
        self._anchor_string_metadata = None
        self._anchor_tab_processor_version = None
        self._anchor_tab_processor_version_metadata = None
        self._anchor_units = None
        self._anchor_units_metadata = None
        self._anchor_x_offset = None
        self._anchor_x_offset_metadata = None
        self._anchor_y_offset = None
        self._anchor_y_offset_metadata = None
        self._bold = None
        self._bold_metadata = None
        self._caption = None
        self._caption_metadata = None
        self._error_details = None
        self._font = None
        self._font_color = None
        self._font_color_metadata = None
        self._font_metadata = None
        self._font_size = None
        self._font_size_metadata = None
        self._italic = None
        self._italic_metadata = None
        self._locked = None
        self._locked_metadata = None
        self._page_number = None
        self._page_number_metadata = None
        self._required = None
        self._required_metadata = None
        self._selected = None
        self._selected_metadata = None
        self._status = None
        self._status_metadata = None
        self._tab_id = None
        self._tab_id_metadata = None
        self._tab_order = None
        self._tab_order_metadata = None
        self._underline = None
        self._underline_metadata = None
        self._value = None
        self._value_metadata = None
        self._x_position = None
        self._x_position_metadata = None
        self._y_position = None
        self._y_position_metadata = None
        self.discriminator = None

        setattr(self, "_{}".format('anchor_allow_white_space_in_characters'), kwargs.get('anchor_allow_white_space_in_characters', None))
        setattr(self, "_{}".format('anchor_allow_white_space_in_characters_metadata'), kwargs.get('anchor_allow_white_space_in_characters_metadata', None))
        setattr(self, "_{}".format('anchor_case_sensitive'), kwargs.get('anchor_case_sensitive', None))
        setattr(self, "_{}".format('anchor_case_sensitive_metadata'), kwargs.get('anchor_case_sensitive_metadata', None))
        setattr(self, "_{}".format('anchor_horizontal_alignment'), kwargs.get('anchor_horizontal_alignment', None))
        setattr(self, "_{}".format('anchor_horizontal_alignment_metadata'), kwargs.get('anchor_horizontal_alignment_metadata', None))
        setattr(self, "_{}".format('anchor_ignore_if_not_present'), kwargs.get('anchor_ignore_if_not_present', None))
        setattr(self, "_{}".format('anchor_ignore_if_not_present_metadata'), kwargs.get('anchor_ignore_if_not_present_metadata', None))
        setattr(self, "_{}".format('anchor_match_whole_word'), kwargs.get('anchor_match_whole_word', None))
        setattr(self, "_{}".format('anchor_match_whole_word_metadata'), kwargs.get('anchor_match_whole_word_metadata', None))
        setattr(self, "_{}".format('anchor_string'), kwargs.get('anchor_string', None))
        setattr(self, "_{}".format('anchor_string_metadata'), kwargs.get('anchor_string_metadata', None))
        setattr(self, "_{}".format('anchor_tab_processor_version'), kwargs.get('anchor_tab_processor_version', None))
        setattr(self, "_{}".format('anchor_tab_processor_version_metadata'), kwargs.get('anchor_tab_processor_version_metadata', None))
        setattr(self, "_{}".format('anchor_units'), kwargs.get('anchor_units', None))
        setattr(self, "_{}".format('anchor_units_metadata'), kwargs.get('anchor_units_metadata', None))
        setattr(self, "_{}".format('anchor_x_offset'), kwargs.get('anchor_x_offset', None))
        setattr(self, "_{}".format('anchor_x_offset_metadata'), kwargs.get('anchor_x_offset_metadata', None))
        setattr(self, "_{}".format('anchor_y_offset'), kwargs.get('anchor_y_offset', None))
        setattr(self, "_{}".format('anchor_y_offset_metadata'), kwargs.get('anchor_y_offset_metadata', None))
        setattr(self, "_{}".format('bold'), kwargs.get('bold', None))
        setattr(self, "_{}".format('bold_metadata'), kwargs.get('bold_metadata', None))
        setattr(self, "_{}".format('caption'), kwargs.get('caption', None))
        setattr(self, "_{}".format('caption_metadata'), kwargs.get('caption_metadata', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('font'), kwargs.get('font', None))
        setattr(self, "_{}".format('font_color'), kwargs.get('font_color', None))
        setattr(self, "_{}".format('font_color_metadata'), kwargs.get('font_color_metadata', None))
        setattr(self, "_{}".format('font_metadata'), kwargs.get('font_metadata', None))
        setattr(self, "_{}".format('font_size'), kwargs.get('font_size', None))
        setattr(self, "_{}".format('font_size_metadata'), kwargs.get('font_size_metadata', None))
        setattr(self, "_{}".format('italic'), kwargs.get('italic', None))
        setattr(self, "_{}".format('italic_metadata'), kwargs.get('italic_metadata', None))
        setattr(self, "_{}".format('locked'), kwargs.get('locked', None))
        setattr(self, "_{}".format('locked_metadata'), kwargs.get('locked_metadata', None))
        setattr(self, "_{}".format('page_number'), kwargs.get('page_number', None))
        setattr(self, "_{}".format('page_number_metadata'), kwargs.get('page_number_metadata', None))
        setattr(self, "_{}".format('required'), kwargs.get('required', None))
        setattr(self, "_{}".format('required_metadata'), kwargs.get('required_metadata', None))
        setattr(self, "_{}".format('selected'), kwargs.get('selected', None))
        setattr(self, "_{}".format('selected_metadata'), kwargs.get('selected_metadata', None))
        setattr(self, "_{}".format('status'), kwargs.get('status', None))
        setattr(self, "_{}".format('status_metadata'), kwargs.get('status_metadata', None))
        setattr(self, "_{}".format('tab_id'), kwargs.get('tab_id', None))
        setattr(self, "_{}".format('tab_id_metadata'), kwargs.get('tab_id_metadata', None))
        setattr(self, "_{}".format('tab_order'), kwargs.get('tab_order', None))
        setattr(self, "_{}".format('tab_order_metadata'), kwargs.get('tab_order_metadata', None))
        setattr(self, "_{}".format('underline'), kwargs.get('underline', None))
        setattr(self, "_{}".format('underline_metadata'), kwargs.get('underline_metadata', None))
        setattr(self, "_{}".format('value'), kwargs.get('value', None))
        setattr(self, "_{}".format('value_metadata'), kwargs.get('value_metadata', None))
        setattr(self, "_{}".format('x_position'), kwargs.get('x_position', None))
        setattr(self, "_{}".format('x_position_metadata'), kwargs.get('x_position_metadata', None))
        setattr(self, "_{}".format('y_position'), kwargs.get('y_position', None))
        setattr(self, "_{}".format('y_position_metadata'), kwargs.get('y_position_metadata', None))

    @property
    def anchor_allow_white_space_in_characters(self):
        """Gets the anchor_allow_white_space_in_characters of this Radio.  # noqa: E501

          # noqa: E501

        :return: The anchor_allow_white_space_in_characters of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_allow_white_space_in_characters

    @anchor_allow_white_space_in_characters.setter
    def anchor_allow_white_space_in_characters(self, anchor_allow_white_space_in_characters):
        """Sets the anchor_allow_white_space_in_characters of this Radio.

          # noqa: E501

        :param anchor_allow_white_space_in_characters: The anchor_allow_white_space_in_characters of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_allow_white_space_in_characters = anchor_allow_white_space_in_characters

    @property
    def anchor_allow_white_space_in_characters_metadata(self):
        """Gets the anchor_allow_white_space_in_characters_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorAllowWhiteSpaceInCharacters` property is editable.  # noqa: E501

        :return: The anchor_allow_white_space_in_characters_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_allow_white_space_in_characters_metadata

    @anchor_allow_white_space_in_characters_metadata.setter
    def anchor_allow_white_space_in_characters_metadata(self, anchor_allow_white_space_in_characters_metadata):
        """Sets the anchor_allow_white_space_in_characters_metadata of this Radio.

        Metadata that indicates whether the `anchorAllowWhiteSpaceInCharacters` property is editable.  # noqa: E501

        :param anchor_allow_white_space_in_characters_metadata: The anchor_allow_white_space_in_characters_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_allow_white_space_in_characters_metadata = anchor_allow_white_space_in_characters_metadata

    @property
    def anchor_case_sensitive(self):
        """Gets the anchor_case_sensitive of this Radio.  # noqa: E501

        When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.  # noqa: E501

        :return: The anchor_case_sensitive of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_case_sensitive

    @anchor_case_sensitive.setter
    def anchor_case_sensitive(self, anchor_case_sensitive):
        """Sets the anchor_case_sensitive of this Radio.

        When set to **true**, the anchor string does not consider case when matching strings in the document. The default value is **true**.  # noqa: E501

        :param anchor_case_sensitive: The anchor_case_sensitive of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_case_sensitive = anchor_case_sensitive

    @property
    def anchor_case_sensitive_metadata(self):
        """Gets the anchor_case_sensitive_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorCaseSensitive` property is editable.  # noqa: E501

        :return: The anchor_case_sensitive_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_case_sensitive_metadata

    @anchor_case_sensitive_metadata.setter
    def anchor_case_sensitive_metadata(self, anchor_case_sensitive_metadata):
        """Sets the anchor_case_sensitive_metadata of this Radio.

        Metadata that indicates whether the `anchorCaseSensitive` property is editable.  # noqa: E501

        :param anchor_case_sensitive_metadata: The anchor_case_sensitive_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_case_sensitive_metadata = anchor_case_sensitive_metadata

    @property
    def anchor_horizontal_alignment(self):
        """Gets the anchor_horizontal_alignment of this Radio.  # noqa: E501

        Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.  # noqa: E501

        :return: The anchor_horizontal_alignment of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_horizontal_alignment

    @anchor_horizontal_alignment.setter
    def anchor_horizontal_alignment(self, anchor_horizontal_alignment):
        """Sets the anchor_horizontal_alignment of this Radio.

        Specifies the alignment of anchor tabs with anchor strings. Possible values are **left** or **right**. The default value is **left**.  # noqa: E501

        :param anchor_horizontal_alignment: The anchor_horizontal_alignment of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_horizontal_alignment = anchor_horizontal_alignment

    @property
    def anchor_horizontal_alignment_metadata(self):
        """Gets the anchor_horizontal_alignment_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.  # noqa: E501

        :return: The anchor_horizontal_alignment_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_horizontal_alignment_metadata

    @anchor_horizontal_alignment_metadata.setter
    def anchor_horizontal_alignment_metadata(self, anchor_horizontal_alignment_metadata):
        """Sets the anchor_horizontal_alignment_metadata of this Radio.

        Metadata that indicates whether the `anchorHorizontalAlignment` property is editable.  # noqa: E501

        :param anchor_horizontal_alignment_metadata: The anchor_horizontal_alignment_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_horizontal_alignment_metadata = anchor_horizontal_alignment_metadata

    @property
    def anchor_ignore_if_not_present(self):
        """Gets the anchor_ignore_if_not_present of this Radio.  # noqa: E501

        When set to **true**, this tab is ignored if anchorString is not found in the document.  # noqa: E501

        :return: The anchor_ignore_if_not_present of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_ignore_if_not_present

    @anchor_ignore_if_not_present.setter
    def anchor_ignore_if_not_present(self, anchor_ignore_if_not_present):
        """Sets the anchor_ignore_if_not_present of this Radio.

        When set to **true**, this tab is ignored if anchorString is not found in the document.  # noqa: E501

        :param anchor_ignore_if_not_present: The anchor_ignore_if_not_present of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_ignore_if_not_present = anchor_ignore_if_not_present

    @property
    def anchor_ignore_if_not_present_metadata(self):
        """Gets the anchor_ignore_if_not_present_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.  # noqa: E501

        :return: The anchor_ignore_if_not_present_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_ignore_if_not_present_metadata

    @anchor_ignore_if_not_present_metadata.setter
    def anchor_ignore_if_not_present_metadata(self, anchor_ignore_if_not_present_metadata):
        """Sets the anchor_ignore_if_not_present_metadata of this Radio.

        Metadata that indicates whether the `anchorIgnoreIfNotPresent` property is editable.  # noqa: E501

        :param anchor_ignore_if_not_present_metadata: The anchor_ignore_if_not_present_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_ignore_if_not_present_metadata = anchor_ignore_if_not_present_metadata

    @property
    def anchor_match_whole_word(self):
        """Gets the anchor_match_whole_word of this Radio.  # noqa: E501

        When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.  # noqa: E501

        :return: The anchor_match_whole_word of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_match_whole_word

    @anchor_match_whole_word.setter
    def anchor_match_whole_word(self, anchor_match_whole_word):
        """Sets the anchor_match_whole_word of this Radio.

        When set to **true**, the anchor string in this tab matches whole words only (strings embedded in other strings are ignored.) The default value is **true**.  # noqa: E501

        :param anchor_match_whole_word: The anchor_match_whole_word of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_match_whole_word = anchor_match_whole_word

    @property
    def anchor_match_whole_word_metadata(self):
        """Gets the anchor_match_whole_word_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorMatchWholeWord` property is editable.  # noqa: E501

        :return: The anchor_match_whole_word_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_match_whole_word_metadata

    @anchor_match_whole_word_metadata.setter
    def anchor_match_whole_word_metadata(self, anchor_match_whole_word_metadata):
        """Sets the anchor_match_whole_word_metadata of this Radio.

        Metadata that indicates whether the `anchorMatchWholeWord` property is editable.  # noqa: E501

        :param anchor_match_whole_word_metadata: The anchor_match_whole_word_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_match_whole_word_metadata = anchor_match_whole_word_metadata

    @property
    def anchor_string(self):
        """Gets the anchor_string of this Radio.  # noqa: E501

        Anchor text information for a radio button.  # noqa: E501

        :return: The anchor_string of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_string

    @anchor_string.setter
    def anchor_string(self, anchor_string):
        """Sets the anchor_string of this Radio.

        Anchor text information for a radio button.  # noqa: E501

        :param anchor_string: The anchor_string of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_string = anchor_string

    @property
    def anchor_string_metadata(self):
        """Gets the anchor_string_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorString` property is editable.  # noqa: E501

        :return: The anchor_string_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_string_metadata

    @anchor_string_metadata.setter
    def anchor_string_metadata(self, anchor_string_metadata):
        """Sets the anchor_string_metadata of this Radio.

        Metadata that indicates whether the `anchorString` property is editable.  # noqa: E501

        :param anchor_string_metadata: The anchor_string_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_string_metadata = anchor_string_metadata

    @property
    def anchor_tab_processor_version(self):
        """Gets the anchor_tab_processor_version of this Radio.  # noqa: E501

          # noqa: E501

        :return: The anchor_tab_processor_version of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_tab_processor_version

    @anchor_tab_processor_version.setter
    def anchor_tab_processor_version(self, anchor_tab_processor_version):
        """Sets the anchor_tab_processor_version of this Radio.

          # noqa: E501

        :param anchor_tab_processor_version: The anchor_tab_processor_version of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_tab_processor_version = anchor_tab_processor_version

    @property
    def anchor_tab_processor_version_metadata(self):
        """Gets the anchor_tab_processor_version_metadata of this Radio.  # noqa: E501

        Reserved for DocuSign.  # noqa: E501

        :return: The anchor_tab_processor_version_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_tab_processor_version_metadata

    @anchor_tab_processor_version_metadata.setter
    def anchor_tab_processor_version_metadata(self, anchor_tab_processor_version_metadata):
        """Sets the anchor_tab_processor_version_metadata of this Radio.

        Reserved for DocuSign.  # noqa: E501

        :param anchor_tab_processor_version_metadata: The anchor_tab_processor_version_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_tab_processor_version_metadata = anchor_tab_processor_version_metadata

    @property
    def anchor_units(self):
        """Gets the anchor_units of this Radio.  # noqa: E501

        Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.  # noqa: E501

        :return: The anchor_units of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_units

    @anchor_units.setter
    def anchor_units(self, anchor_units):
        """Sets the anchor_units of this Radio.

        Specifies units of the X and Y offset. Units could be pixels, millimeters, centimeters, or inches.  # noqa: E501

        :param anchor_units: The anchor_units of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_units = anchor_units

    @property
    def anchor_units_metadata(self):
        """Gets the anchor_units_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorUnits` property is editable.  # noqa: E501

        :return: The anchor_units_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_units_metadata

    @anchor_units_metadata.setter
    def anchor_units_metadata(self, anchor_units_metadata):
        """Sets the anchor_units_metadata of this Radio.

        Metadata that indicates whether the `anchorUnits` property is editable.  # noqa: E501

        :param anchor_units_metadata: The anchor_units_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_units_metadata = anchor_units_metadata

    @property
    def anchor_x_offset(self):
        """Gets the anchor_x_offset of this Radio.  # noqa: E501

        Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :return: The anchor_x_offset of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_x_offset

    @anchor_x_offset.setter
    def anchor_x_offset(self, anchor_x_offset):
        """Sets the anchor_x_offset of this Radio.

        Specifies the X axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :param anchor_x_offset: The anchor_x_offset of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_x_offset = anchor_x_offset

    @property
    def anchor_x_offset_metadata(self):
        """Gets the anchor_x_offset_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorXOffset` property is editable.  # noqa: E501

        :return: The anchor_x_offset_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_x_offset_metadata

    @anchor_x_offset_metadata.setter
    def anchor_x_offset_metadata(self, anchor_x_offset_metadata):
        """Sets the anchor_x_offset_metadata of this Radio.

        Metadata that indicates whether the `anchorXOffset` property is editable.  # noqa: E501

        :param anchor_x_offset_metadata: The anchor_x_offset_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_x_offset_metadata = anchor_x_offset_metadata

    @property
    def anchor_y_offset(self):
        """Gets the anchor_y_offset of this Radio.  # noqa: E501

        Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :return: The anchor_y_offset of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._anchor_y_offset

    @anchor_y_offset.setter
    def anchor_y_offset(self, anchor_y_offset):
        """Sets the anchor_y_offset of this Radio.

        Specifies the Y axis location of the tab, in anchorUnits, relative to the anchorString.  # noqa: E501

        :param anchor_y_offset: The anchor_y_offset of this Radio.  # noqa: E501
        :type: str
        """

        self._anchor_y_offset = anchor_y_offset

    @property
    def anchor_y_offset_metadata(self):
        """Gets the anchor_y_offset_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `anchorYOffset` property is editable.  # noqa: E501

        :return: The anchor_y_offset_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._anchor_y_offset_metadata

    @anchor_y_offset_metadata.setter
    def anchor_y_offset_metadata(self, anchor_y_offset_metadata):
        """Sets the anchor_y_offset_metadata of this Radio.

        Metadata that indicates whether the `anchorYOffset` property is editable.  # noqa: E501

        :param anchor_y_offset_metadata: The anchor_y_offset_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._anchor_y_offset_metadata = anchor_y_offset_metadata

    @property
    def bold(self):
        """Gets the bold of this Radio.  # noqa: E501

        When set to **true**, the information in the tab is bold.  # noqa: E501

        :return: The bold of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this Radio.

        When set to **true**, the information in the tab is bold.  # noqa: E501

        :param bold: The bold of this Radio.  # noqa: E501
        :type: str
        """

        self._bold = bold

    @property
    def bold_metadata(self):
        """Gets the bold_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `bold` property is editable.  # noqa: E501

        :return: The bold_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._bold_metadata

    @bold_metadata.setter
    def bold_metadata(self, bold_metadata):
        """Sets the bold_metadata of this Radio.

        Metadata that indicates whether the `bold` property is editable.  # noqa: E501

        :param bold_metadata: The bold_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._bold_metadata = bold_metadata

    @property
    def caption(self):
        """Gets the caption of this Radio.  # noqa: E501

          # noqa: E501

        :return: The caption of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this Radio.

          # noqa: E501

        :param caption: The caption of this Radio.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def caption_metadata(self):
        """Gets the caption_metadata of this Radio.  # noqa: E501


        :return: The caption_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._caption_metadata

    @caption_metadata.setter
    def caption_metadata(self, caption_metadata):
        """Sets the caption_metadata of this Radio.


        :param caption_metadata: The caption_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._caption_metadata = caption_metadata

    @property
    def error_details(self):
        """Gets the error_details of this Radio.  # noqa: E501

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :return: The error_details of this Radio.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this Radio.

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :param error_details: The error_details of this Radio.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def font(self):
        """Gets the font of this Radio.  # noqa: E501

        The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.  # noqa: E501

        :return: The font of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this Radio.

        The font to be used for the tab value. Supported Fonts: Arial, Arial, ArialNarrow, Calibri, CourierNew, Garamond, Georgia, Helvetica,   LucidaConsole, Tahoma, TimesNewRoman, Trebuchet, Verdana, MSGothic, MSMincho, Default.  # noqa: E501

        :param font: The font of this Radio.  # noqa: E501
        :type: str
        """

        self._font = font

    @property
    def font_color(self):
        """Gets the font_color of this Radio.  # noqa: E501

        The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.  # noqa: E501

        :return: The font_color of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._font_color

    @font_color.setter
    def font_color(self, font_color):
        """Sets the font_color of this Radio.

        The font color used for the information in the tab.  Possible values are: Black, BrightBlue, BrightRed, DarkGreen, DarkRed, Gold, Green, NavyBlue, Purple, or White.  # noqa: E501

        :param font_color: The font_color of this Radio.  # noqa: E501
        :type: str
        """

        self._font_color = font_color

    @property
    def font_color_metadata(self):
        """Gets the font_color_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `fontColor` property is editable.  # noqa: E501

        :return: The font_color_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_color_metadata

    @font_color_metadata.setter
    def font_color_metadata(self, font_color_metadata):
        """Sets the font_color_metadata of this Radio.

        Metadata that indicates whether the `fontColor` property is editable.  # noqa: E501

        :param font_color_metadata: The font_color_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_color_metadata = font_color_metadata

    @property
    def font_metadata(self):
        """Gets the font_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `font` property is editable.  # noqa: E501

        :return: The font_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_metadata

    @font_metadata.setter
    def font_metadata(self, font_metadata):
        """Sets the font_metadata of this Radio.

        Metadata that indicates whether the `font` property is editable.  # noqa: E501

        :param font_metadata: The font_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_metadata = font_metadata

    @property
    def font_size(self):
        """Gets the font_size of this Radio.  # noqa: E501

        The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.  # noqa: E501

        :return: The font_size of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this Radio.

        The font size used for the information in the tab.  Possible values are: Size7, Size8, Size9, Size10, Size11, Size12, Size14, Size16, Size18, Size20, Size22, Size24, Size26, Size28, Size36, Size48, or Size72.  # noqa: E501

        :param font_size: The font_size of this Radio.  # noqa: E501
        :type: str
        """

        self._font_size = font_size

    @property
    def font_size_metadata(self):
        """Gets the font_size_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `fontSize` property is editable.  # noqa: E501

        :return: The font_size_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._font_size_metadata

    @font_size_metadata.setter
    def font_size_metadata(self, font_size_metadata):
        """Sets the font_size_metadata of this Radio.

        Metadata that indicates whether the `fontSize` property is editable.  # noqa: E501

        :param font_size_metadata: The font_size_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._font_size_metadata = font_size_metadata

    @property
    def italic(self):
        """Gets the italic of this Radio.  # noqa: E501

        When set to **true**, the information in the tab is italic.  # noqa: E501

        :return: The italic of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._italic

    @italic.setter
    def italic(self, italic):
        """Sets the italic of this Radio.

        When set to **true**, the information in the tab is italic.  # noqa: E501

        :param italic: The italic of this Radio.  # noqa: E501
        :type: str
        """

        self._italic = italic

    @property
    def italic_metadata(self):
        """Gets the italic_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `italic` property is editable.  # noqa: E501

        :return: The italic_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._italic_metadata

    @italic_metadata.setter
    def italic_metadata(self, italic_metadata):
        """Sets the italic_metadata of this Radio.

        Metadata that indicates whether the `italic` property is editable.  # noqa: E501

        :param italic_metadata: The italic_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._italic_metadata = italic_metadata

    @property
    def locked(self):
        """Gets the locked of this Radio.  # noqa: E501

        When set to **true**, the signer cannot change the data of the custom tab.  # noqa: E501

        :return: The locked of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Radio.

        When set to **true**, the signer cannot change the data of the custom tab.  # noqa: E501

        :param locked: The locked of this Radio.  # noqa: E501
        :type: str
        """

        self._locked = locked

    @property
    def locked_metadata(self):
        """Gets the locked_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `locked` property is editable.  # noqa: E501

        :return: The locked_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._locked_metadata

    @locked_metadata.setter
    def locked_metadata(self, locked_metadata):
        """Sets the locked_metadata of this Radio.

        Metadata that indicates whether the `locked` property is editable.  # noqa: E501

        :param locked_metadata: The locked_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._locked_metadata = locked_metadata

    @property
    def page_number(self):
        """Gets the page_number of this Radio.  # noqa: E501

        Specifies the page number on which the tab is located.  # noqa: E501

        :return: The page_number of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this Radio.

        Specifies the page number on which the tab is located.  # noqa: E501

        :param page_number: The page_number of this Radio.  # noqa: E501
        :type: str
        """

        self._page_number = page_number

    @property
    def page_number_metadata(self):
        """Gets the page_number_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `pageNumber` property is editable.  # noqa: E501

        :return: The page_number_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._page_number_metadata

    @page_number_metadata.setter
    def page_number_metadata(self, page_number_metadata):
        """Sets the page_number_metadata of this Radio.

        Metadata that indicates whether the `pageNumber` property is editable.  # noqa: E501

        :param page_number_metadata: The page_number_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._page_number_metadata = page_number_metadata

    @property
    def required(self):
        """Gets the required of this Radio.  # noqa: E501

        When set to **true**, the signer is required to fill out this tab  # noqa: E501

        :return: The required of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Radio.

        When set to **true**, the signer is required to fill out this tab  # noqa: E501

        :param required: The required of this Radio.  # noqa: E501
        :type: str
        """

        self._required = required

    @property
    def required_metadata(self):
        """Gets the required_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `required` property is editable.  # noqa: E501

        :return: The required_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._required_metadata

    @required_metadata.setter
    def required_metadata(self, required_metadata):
        """Sets the required_metadata of this Radio.

        Metadata that indicates whether the `required` property is editable.  # noqa: E501

        :param required_metadata: The required_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._required_metadata = required_metadata

    @property
    def selected(self):
        """Gets the selected of this Radio.  # noqa: E501

        When set to **true**, the radio button is selected.  # noqa: E501

        :return: The selected of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this Radio.

        When set to **true**, the radio button is selected.  # noqa: E501

        :param selected: The selected of this Radio.  # noqa: E501
        :type: str
        """

        self._selected = selected

    @property
    def selected_metadata(self):
        """Gets the selected_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `selected` property is editable.  # noqa: E501

        :return: The selected_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._selected_metadata

    @selected_metadata.setter
    def selected_metadata(self, selected_metadata):
        """Sets the selected_metadata of this Radio.

        Metadata that indicates whether the `selected` property is editable.  # noqa: E501

        :param selected_metadata: The selected_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._selected_metadata = selected_metadata

    @property
    def status(self):
        """Gets the status of this Radio.  # noqa: E501

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :return: The status of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Radio.

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :param status: The status of this Radio.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_metadata(self):
        """Gets the status_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `status` property is editable.  # noqa: E501

        :return: The status_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._status_metadata

    @status_metadata.setter
    def status_metadata(self, status_metadata):
        """Sets the status_metadata of this Radio.

        Metadata that indicates whether the `status` property is editable.  # noqa: E501

        :param status_metadata: The status_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._status_metadata = status_metadata

    @property
    def tab_id(self):
        """Gets the tab_id of this Radio.  # noqa: E501

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :return: The tab_id of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._tab_id

    @tab_id.setter
    def tab_id(self, tab_id):
        """Sets the tab_id of this Radio.

        The unique identifier for the tab. The tabid can be retrieved with the [ML:GET call].       # noqa: E501

        :param tab_id: The tab_id of this Radio.  # noqa: E501
        :type: str
        """

        self._tab_id = tab_id

    @property
    def tab_id_metadata(self):
        """Gets the tab_id_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `tabId` property is editable.  # noqa: E501

        :return: The tab_id_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_id_metadata

    @tab_id_metadata.setter
    def tab_id_metadata(self, tab_id_metadata):
        """Sets the tab_id_metadata of this Radio.

        Metadata that indicates whether the `tabId` property is editable.  # noqa: E501

        :param tab_id_metadata: The tab_id_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_id_metadata = tab_id_metadata

    @property
    def tab_order(self):
        """Gets the tab_order of this Radio.  # noqa: E501

          # noqa: E501

        :return: The tab_order of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._tab_order

    @tab_order.setter
    def tab_order(self, tab_order):
        """Sets the tab_order of this Radio.

          # noqa: E501

        :param tab_order: The tab_order of this Radio.  # noqa: E501
        :type: str
        """

        self._tab_order = tab_order

    @property
    def tab_order_metadata(self):
        """Gets the tab_order_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `tabOrder` property is editable.  # noqa: E501

        :return: The tab_order_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._tab_order_metadata

    @tab_order_metadata.setter
    def tab_order_metadata(self, tab_order_metadata):
        """Sets the tab_order_metadata of this Radio.

        Metadata that indicates whether the `tabOrder` property is editable.  # noqa: E501

        :param tab_order_metadata: The tab_order_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._tab_order_metadata = tab_order_metadata

    @property
    def underline(self):
        """Gets the underline of this Radio.  # noqa: E501

        When set to **true**, the information in the tab is underlined.  # noqa: E501

        :return: The underline of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this Radio.

        When set to **true**, the information in the tab is underlined.  # noqa: E501

        :param underline: The underline of this Radio.  # noqa: E501
        :type: str
        """

        self._underline = underline

    @property
    def underline_metadata(self):
        """Gets the underline_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `underline` property is editable.  # noqa: E501

        :return: The underline_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._underline_metadata

    @underline_metadata.setter
    def underline_metadata(self, underline_metadata):
        """Sets the underline_metadata of this Radio.

        Metadata that indicates whether the `underline` property is editable.  # noqa: E501

        :param underline_metadata: The underline_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._underline_metadata = underline_metadata

    @property
    def value(self):
        """Gets the value of this Radio.  # noqa: E501

        Specifies the value of the tab.   # noqa: E501

        :return: The value of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Radio.

        Specifies the value of the tab.   # noqa: E501

        :param value: The value of this Radio.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_metadata(self):
        """Gets the value_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `value` property is editable.  # noqa: E501

        :return: The value_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._value_metadata

    @value_metadata.setter
    def value_metadata(self, value_metadata):
        """Sets the value_metadata of this Radio.

        Metadata that indicates whether the `value` property is editable.  # noqa: E501

        :param value_metadata: The value_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._value_metadata = value_metadata

    @property
    def x_position(self):
        """Gets the x_position of this Radio.  # noqa: E501

        This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :return: The x_position of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._x_position

    @x_position.setter
    def x_position(self, x_position):
        """Sets the x_position of this Radio.

        This indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :param x_position: The x_position of this Radio.  # noqa: E501
        :type: str
        """

        self._x_position = x_position

    @property
    def x_position_metadata(self):
        """Gets the x_position_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `xPosition` property is editable.  # noqa: E501

        :return: The x_position_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._x_position_metadata

    @x_position_metadata.setter
    def x_position_metadata(self, x_position_metadata):
        """Sets the x_position_metadata of this Radio.

        Metadata that indicates whether the `xPosition` property is editable.  # noqa: E501

        :param x_position_metadata: The x_position_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._x_position_metadata = x_position_metadata

    @property
    def y_position(self):
        """Gets the y_position of this Radio.  # noqa: E501

        This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :return: The y_position of this Radio.  # noqa: E501
        :rtype: str
        """
        return self._y_position

    @y_position.setter
    def y_position(self, y_position):
        """Sets the y_position of this Radio.

        This indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position.  # noqa: E501

        :param y_position: The y_position of this Radio.  # noqa: E501
        :type: str
        """

        self._y_position = y_position

    @property
    def y_position_metadata(self):
        """Gets the y_position_metadata of this Radio.  # noqa: E501

        Metadata that indicates whether the `yPosition` property is editable.  # noqa: E501

        :return: The y_position_metadata of this Radio.  # noqa: E501
        :rtype: PropertyMetadata
        """
        return self._y_position_metadata

    @y_position_metadata.setter
    def y_position_metadata(self, y_position_metadata):
        """Sets the y_position_metadata of this Radio.

        Metadata that indicates whether the `yPosition` property is editable.  # noqa: E501

        :param y_position_metadata: The y_position_metadata of this Radio.  # noqa: E501
        :type: PropertyMetadata
        """

        self._y_position_metadata = y_position_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Radio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Radio):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Radio):
            return True

        return self.to_dict() != other.to_dict()
