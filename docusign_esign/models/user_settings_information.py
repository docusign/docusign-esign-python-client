# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserSettingsInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_management_granular': 'UserAccountManagementGranularInformation',
        'sender_email_notifications': 'SenderEmailNotifications',
        'signer_email_notifications': 'SignerEmailNotifications',
        'user_settings': 'list[NameValue]'
    }

    attribute_map = {
        'account_management_granular': 'accountManagementGranular',
        'sender_email_notifications': 'senderEmailNotifications',
        'signer_email_notifications': 'signerEmailNotifications',
        'user_settings': 'userSettings'
    }

    def __init__(self, account_management_granular=None, sender_email_notifications=None, signer_email_notifications=None, user_settings=None):  # noqa: E501
        """UserSettingsInformation - a model defined in Swagger"""  # noqa: E501

        self._account_management_granular = None
        self._sender_email_notifications = None
        self._signer_email_notifications = None
        self._user_settings = None
        self.discriminator = None

        if account_management_granular is not None:
            self.account_management_granular = account_management_granular
        if sender_email_notifications is not None:
            self.sender_email_notifications = sender_email_notifications
        if signer_email_notifications is not None:
            self.signer_email_notifications = signer_email_notifications
        if user_settings is not None:
            self.user_settings = user_settings

    @property
    def account_management_granular(self):
        """Gets the account_management_granular of this UserSettingsInformation.  # noqa: E501


        :return: The account_management_granular of this UserSettingsInformation.  # noqa: E501
        :rtype: UserAccountManagementGranularInformation
        """
        return self._account_management_granular

    @account_management_granular.setter
    def account_management_granular(self, account_management_granular):
        """Sets the account_management_granular of this UserSettingsInformation.


        :param account_management_granular: The account_management_granular of this UserSettingsInformation.  # noqa: E501
        :type: UserAccountManagementGranularInformation
        """

        self._account_management_granular = account_management_granular

    @property
    def sender_email_notifications(self):
        """Gets the sender_email_notifications of this UserSettingsInformation.  # noqa: E501


        :return: The sender_email_notifications of this UserSettingsInformation.  # noqa: E501
        :rtype: SenderEmailNotifications
        """
        return self._sender_email_notifications

    @sender_email_notifications.setter
    def sender_email_notifications(self, sender_email_notifications):
        """Sets the sender_email_notifications of this UserSettingsInformation.


        :param sender_email_notifications: The sender_email_notifications of this UserSettingsInformation.  # noqa: E501
        :type: SenderEmailNotifications
        """

        self._sender_email_notifications = sender_email_notifications

    @property
    def signer_email_notifications(self):
        """Gets the signer_email_notifications of this UserSettingsInformation.  # noqa: E501


        :return: The signer_email_notifications of this UserSettingsInformation.  # noqa: E501
        :rtype: SignerEmailNotifications
        """
        return self._signer_email_notifications

    @signer_email_notifications.setter
    def signer_email_notifications(self, signer_email_notifications):
        """Sets the signer_email_notifications of this UserSettingsInformation.


        :param signer_email_notifications: The signer_email_notifications of this UserSettingsInformation.  # noqa: E501
        :type: SignerEmailNotifications
        """

        self._signer_email_notifications = signer_email_notifications

    @property
    def user_settings(self):
        """Gets the user_settings of this UserSettingsInformation.  # noqa: E501

          # noqa: E501

        :return: The user_settings of this UserSettingsInformation.  # noqa: E501
        :rtype: list[NameValue]
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """Sets the user_settings of this UserSettingsInformation.

          # noqa: E501

        :param user_settings: The user_settings of this UserSettingsInformation.  # noqa: E501
        :type: list[NameValue]
        """

        self._user_settings = user_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSettingsInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettingsInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
