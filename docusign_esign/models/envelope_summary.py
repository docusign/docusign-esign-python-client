# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EnvelopeSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'envelope_id': 'str',
        'status': 'str',
        'status_date_time': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'envelope_id': 'envelopeId',
        'status': 'status',
        'status_date_time': 'statusDateTime',
        'uri': 'uri'
    }

    def __init__(self, envelope_id=None, status=None, status_date_time=None, uri=None):  # noqa: E501
        """EnvelopeSummary - a model defined in Swagger"""  # noqa: E501

        self._envelope_id = None
        self._status = None
        self._status_date_time = None
        self._uri = None
        self.discriminator = None

        if envelope_id is not None:
            self.envelope_id = envelope_id
        if status is not None:
            self.status = status
        if status_date_time is not None:
            self.status_date_time = status_date_time
        if uri is not None:
            self.uri = uri

    @property
    def envelope_id(self):
        """Gets the envelope_id of this EnvelopeSummary.  # noqa: E501

        The envelope ID of the envelope status that failed to post.  # noqa: E501

        :return: The envelope_id of this EnvelopeSummary.  # noqa: E501
        :rtype: str
        """
        return self._envelope_id

    @envelope_id.setter
    def envelope_id(self, envelope_id):
        """Sets the envelope_id of this EnvelopeSummary.

        The envelope ID of the envelope status that failed to post.  # noqa: E501

        :param envelope_id: The envelope_id of this EnvelopeSummary.  # noqa: E501
        :type: str
        """

        self._envelope_id = envelope_id

    @property
    def status(self):
        """Gets the status of this EnvelopeSummary.  # noqa: E501

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :return: The status of this EnvelopeSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvelopeSummary.

        Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.  # noqa: E501

        :param status: The status of this EnvelopeSummary.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_date_time(self):
        """Gets the status_date_time of this EnvelopeSummary.  # noqa: E501

        The DateTime that the envelope changed status (i.e. was created or sent.)  # noqa: E501

        :return: The status_date_time of this EnvelopeSummary.  # noqa: E501
        :rtype: str
        """
        return self._status_date_time

    @status_date_time.setter
    def status_date_time(self, status_date_time):
        """Sets the status_date_time of this EnvelopeSummary.

        The DateTime that the envelope changed status (i.e. was created or sent.)  # noqa: E501

        :param status_date_time: The status_date_time of this EnvelopeSummary.  # noqa: E501
        :type: str
        """

        self._status_date_time = status_date_time

    @property
    def uri(self):
        """Gets the uri of this EnvelopeSummary.  # noqa: E501

          # noqa: E501

        :return: The uri of this EnvelopeSummary.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EnvelopeSummary.

          # noqa: E501

        :param uri: The uri of this EnvelopeSummary.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvelopeSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvelopeSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
