# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BillingPrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, begin_quantity=None, end_quantity=None, unit_price=None):
        """
        BillingPrice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'begin_quantity': 'str',
            'end_quantity': 'str',
            'unit_price': 'str'
        }

        self.attribute_map = {
            'begin_quantity': 'beginQuantity',
            'end_quantity': 'endQuantity',
            'unit_price': 'unitPrice'
        }

        self._begin_quantity = begin_quantity
        self._end_quantity = end_quantity
        self._unit_price = unit_price

    @property
    def begin_quantity(self):
        """
        Gets the begin_quantity of this BillingPrice.
        Reserved: TBD

        :return: The begin_quantity of this BillingPrice.
        :rtype: str
        """
        return self._begin_quantity

    @begin_quantity.setter
    def begin_quantity(self, begin_quantity):
        """
        Sets the begin_quantity of this BillingPrice.
        Reserved: TBD

        :param begin_quantity: The begin_quantity of this BillingPrice.
        :type: str
        """

        self._begin_quantity = begin_quantity

    @property
    def end_quantity(self):
        """
        Gets the end_quantity of this BillingPrice.
        

        :return: The end_quantity of this BillingPrice.
        :rtype: str
        """
        return self._end_quantity

    @end_quantity.setter
    def end_quantity(self, end_quantity):
        """
        Sets the end_quantity of this BillingPrice.
        

        :param end_quantity: The end_quantity of this BillingPrice.
        :type: str
        """

        self._end_quantity = end_quantity

    @property
    def unit_price(self):
        """
        Gets the unit_price of this BillingPrice.
        Reserved: TBD

        :return: The unit_price of this BillingPrice.
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """
        Sets the unit_price of this BillingPrice.
        Reserved: TBD

        :param unit_price: The unit_price of this BillingPrice.
        :type: str
        """

        self._unit_price = unit_price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
