# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EnvelopeIdsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'envelope_ids': 'list[str]',
        'transaction_ids': 'list[str]'
    }

    attribute_map = {
        'envelope_ids': 'envelopeIds',
        'transaction_ids': 'transactionIds'
    }

    def __init__(self, envelope_ids=None, transaction_ids=None):  # noqa: E501
        """EnvelopeIdsRequest - a model defined in Swagger"""  # noqa: E501

        self._envelope_ids = None
        self._transaction_ids = None
        self.discriminator = None

        if envelope_ids is not None:
            self.envelope_ids = envelope_ids
        if transaction_ids is not None:
            self.transaction_ids = transaction_ids

    @property
    def envelope_ids(self):
        """Gets the envelope_ids of this EnvelopeIdsRequest.  # noqa: E501

          # noqa: E501

        :return: The envelope_ids of this EnvelopeIdsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._envelope_ids

    @envelope_ids.setter
    def envelope_ids(self, envelope_ids):
        """Sets the envelope_ids of this EnvelopeIdsRequest.

          # noqa: E501

        :param envelope_ids: The envelope_ids of this EnvelopeIdsRequest.  # noqa: E501
        :type: list[str]
        """

        self._envelope_ids = envelope_ids

    @property
    def transaction_ids(self):
        """Gets the transaction_ids of this EnvelopeIdsRequest.  # noqa: E501

         A list of transaction Id's used to determining the status of envelopes sent asynchronously. See **transactionId** property on envelopes.  # noqa: E501

        :return: The transaction_ids of this EnvelopeIdsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_ids

    @transaction_ids.setter
    def transaction_ids(self, transaction_ids):
        """Sets the transaction_ids of this EnvelopeIdsRequest.

         A list of transaction Id's used to determining the status of envelopes sent asynchronously. See **transactionId** property on envelopes.  # noqa: E501

        :param transaction_ids: The transaction_ids of this EnvelopeIdsRequest.  # noqa: E501
        :type: list[str]
        """

        self._transaction_ids = transaction_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvelopeIdsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvelopeIdsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
