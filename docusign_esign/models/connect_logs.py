# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failures': 'list[ConnectLog]',
        'logs': 'list[ConnectLog]',
        'total_records': 'str',
        'type': 'str'
    }

    attribute_map = {
        'failures': 'failures',
        'logs': 'logs',
        'total_records': 'totalRecords',
        'type': 'type'
    }

    def __init__(self, failures=None, logs=None, total_records=None, type=None):  # noqa: E501
        """ConnectLogs - a model defined in Swagger"""  # noqa: E501

        self._failures = None
        self._logs = None
        self._total_records = None
        self._type = None
        self.discriminator = None

        if failures is not None:
            self.failures = failures
        if logs is not None:
            self.logs = logs
        if total_records is not None:
            self.total_records = total_records
        if type is not None:
            self.type = type

    @property
    def failures(self):
        """Gets the failures of this ConnectLogs.  # noqa: E501

        An array of containing failure information from the Connect failure log.  # noqa: E501

        :return: The failures of this ConnectLogs.  # noqa: E501
        :rtype: list[ConnectLog]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this ConnectLogs.

        An array of containing failure information from the Connect failure log.  # noqa: E501

        :param failures: The failures of this ConnectLogs.  # noqa: E501
        :type: list[ConnectLog]
        """

        self._failures = failures

    @property
    def logs(self):
        """Gets the logs of this ConnectLogs.  # noqa: E501

        A complex type containing Connect log information. It is divided into two sections, one for regular logs and one for Connect failures.   # noqa: E501

        :return: The logs of this ConnectLogs.  # noqa: E501
        :rtype: list[ConnectLog]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ConnectLogs.

        A complex type containing Connect log information. It is divided into two sections, one for regular logs and one for Connect failures.   # noqa: E501

        :param logs: The logs of this ConnectLogs.  # noqa: E501
        :type: list[ConnectLog]
        """

        self._logs = logs

    @property
    def total_records(self):
        """Gets the total_records of this ConnectLogs.  # noqa: E501

          # noqa: E501

        :return: The total_records of this ConnectLogs.  # noqa: E501
        :rtype: str
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this ConnectLogs.

          # noqa: E501

        :param total_records: The total_records of this ConnectLogs.  # noqa: E501
        :type: str
        """

        self._total_records = total_records

    @property
    def type(self):
        """Gets the type of this ConnectLogs.  # noqa: E501

          # noqa: E501

        :return: The type of this ConnectLogs.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectLogs.

          # noqa: E501

        :param type: The type of this ConnectLogs.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
