# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class UserInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activation_access_code': 'str',
        'company': 'str',
        'connect_configurations': 'list[ConnectUserObject]',
        'country_code': 'str',
        'created_date_time': 'str',
        'custom_settings': 'list[NameValue]',
        'default_account_id': 'str',
        'email': 'str',
        'enable_connect_for_user': 'str',
        'error_details': 'ErrorDetails',
        'first_name': 'str',
        'forgotten_password_info': 'ForgottenPasswordInformation',
        'group_list': 'list[Group]',
        'has_remote_notary': 'bool',
        'home_address': 'AddressInformation',
        'initials_image_uri': 'str',
        'is_admin': 'str',
        'is_alternate_admin': 'str',
        'is_nar_enabled': 'str',
        'job_title': 'str',
        'last_login': 'str',
        'last_name': 'str',
        'login_status': 'str',
        'middle_name': 'str',
        'password': 'str',
        'password_expiration': 'str',
        'permission_profile_id': 'str',
        'permission_profile_name': 'str',
        'profile_image_uri': 'str',
        'send_activation_email': 'str',
        'send_activation_on_invalid_login': 'str',
        'signature_image_uri': 'str',
        'subscribe': 'str',
        'suffix_name': 'str',
        'title': 'str',
        'uri': 'str',
        'user_added_to_account_date_time': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'user_profile_last_modified_date': 'str',
        'user_settings': 'UserSettingsInformation',
        'user_status': 'str',
        'user_type': 'str',
        'work_address': 'AddressInformation'
    }

    attribute_map = {
        'activation_access_code': 'activationAccessCode',
        'company': 'company',
        'connect_configurations': 'connectConfigurations',
        'country_code': 'countryCode',
        'created_date_time': 'createdDateTime',
        'custom_settings': 'customSettings',
        'default_account_id': 'defaultAccountId',
        'email': 'email',
        'enable_connect_for_user': 'enableConnectForUser',
        'error_details': 'errorDetails',
        'first_name': 'firstName',
        'forgotten_password_info': 'forgottenPasswordInfo',
        'group_list': 'groupList',
        'has_remote_notary': 'hasRemoteNotary',
        'home_address': 'homeAddress',
        'initials_image_uri': 'initialsImageUri',
        'is_admin': 'isAdmin',
        'is_alternate_admin': 'isAlternateAdmin',
        'is_nar_enabled': 'isNAREnabled',
        'job_title': 'jobTitle',
        'last_login': 'lastLogin',
        'last_name': 'lastName',
        'login_status': 'loginStatus',
        'middle_name': 'middleName',
        'password': 'password',
        'password_expiration': 'passwordExpiration',
        'permission_profile_id': 'permissionProfileId',
        'permission_profile_name': 'permissionProfileName',
        'profile_image_uri': 'profileImageUri',
        'send_activation_email': 'sendActivationEmail',
        'send_activation_on_invalid_login': 'sendActivationOnInvalidLogin',
        'signature_image_uri': 'signatureImageUri',
        'subscribe': 'subscribe',
        'suffix_name': 'suffixName',
        'title': 'title',
        'uri': 'uri',
        'user_added_to_account_date_time': 'userAddedToAccountDateTime',
        'user_id': 'userId',
        'user_name': 'userName',
        'user_profile_last_modified_date': 'userProfileLastModifiedDate',
        'user_settings': 'userSettings',
        'user_status': 'userStatus',
        'user_type': 'userType',
        'work_address': 'workAddress'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """UserInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._activation_access_code = None
        self._company = None
        self._connect_configurations = None
        self._country_code = None
        self._created_date_time = None
        self._custom_settings = None
        self._default_account_id = None
        self._email = None
        self._enable_connect_for_user = None
        self._error_details = None
        self._first_name = None
        self._forgotten_password_info = None
        self._group_list = None
        self._has_remote_notary = None
        self._home_address = None
        self._initials_image_uri = None
        self._is_admin = None
        self._is_alternate_admin = None
        self._is_nar_enabled = None
        self._job_title = None
        self._last_login = None
        self._last_name = None
        self._login_status = None
        self._middle_name = None
        self._password = None
        self._password_expiration = None
        self._permission_profile_id = None
        self._permission_profile_name = None
        self._profile_image_uri = None
        self._send_activation_email = None
        self._send_activation_on_invalid_login = None
        self._signature_image_uri = None
        self._subscribe = None
        self._suffix_name = None
        self._title = None
        self._uri = None
        self._user_added_to_account_date_time = None
        self._user_id = None
        self._user_name = None
        self._user_profile_last_modified_date = None
        self._user_settings = None
        self._user_status = None
        self._user_type = None
        self._work_address = None
        self.discriminator = None

        setattr(self, "_{}".format('activation_access_code'), kwargs.get('activation_access_code', None))
        setattr(self, "_{}".format('company'), kwargs.get('company', None))
        setattr(self, "_{}".format('connect_configurations'), kwargs.get('connect_configurations', None))
        setattr(self, "_{}".format('country_code'), kwargs.get('country_code', None))
        setattr(self, "_{}".format('created_date_time'), kwargs.get('created_date_time', None))
        setattr(self, "_{}".format('custom_settings'), kwargs.get('custom_settings', None))
        setattr(self, "_{}".format('default_account_id'), kwargs.get('default_account_id', None))
        setattr(self, "_{}".format('email'), kwargs.get('email', None))
        setattr(self, "_{}".format('enable_connect_for_user'), kwargs.get('enable_connect_for_user', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('first_name'), kwargs.get('first_name', None))
        setattr(self, "_{}".format('forgotten_password_info'), kwargs.get('forgotten_password_info', None))
        setattr(self, "_{}".format('group_list'), kwargs.get('group_list', None))
        setattr(self, "_{}".format('has_remote_notary'), kwargs.get('has_remote_notary', None))
        setattr(self, "_{}".format('home_address'), kwargs.get('home_address', None))
        setattr(self, "_{}".format('initials_image_uri'), kwargs.get('initials_image_uri', None))
        setattr(self, "_{}".format('is_admin'), kwargs.get('is_admin', None))
        setattr(self, "_{}".format('is_alternate_admin'), kwargs.get('is_alternate_admin', None))
        setattr(self, "_{}".format('is_nar_enabled'), kwargs.get('is_nar_enabled', None))
        setattr(self, "_{}".format('job_title'), kwargs.get('job_title', None))
        setattr(self, "_{}".format('last_login'), kwargs.get('last_login', None))
        setattr(self, "_{}".format('last_name'), kwargs.get('last_name', None))
        setattr(self, "_{}".format('login_status'), kwargs.get('login_status', None))
        setattr(self, "_{}".format('middle_name'), kwargs.get('middle_name', None))
        setattr(self, "_{}".format('password'), kwargs.get('password', None))
        setattr(self, "_{}".format('password_expiration'), kwargs.get('password_expiration', None))
        setattr(self, "_{}".format('permission_profile_id'), kwargs.get('permission_profile_id', None))
        setattr(self, "_{}".format('permission_profile_name'), kwargs.get('permission_profile_name', None))
        setattr(self, "_{}".format('profile_image_uri'), kwargs.get('profile_image_uri', None))
        setattr(self, "_{}".format('send_activation_email'), kwargs.get('send_activation_email', None))
        setattr(self, "_{}".format('send_activation_on_invalid_login'), kwargs.get('send_activation_on_invalid_login', None))
        setattr(self, "_{}".format('signature_image_uri'), kwargs.get('signature_image_uri', None))
        setattr(self, "_{}".format('subscribe'), kwargs.get('subscribe', None))
        setattr(self, "_{}".format('suffix_name'), kwargs.get('suffix_name', None))
        setattr(self, "_{}".format('title'), kwargs.get('title', None))
        setattr(self, "_{}".format('uri'), kwargs.get('uri', None))
        setattr(self, "_{}".format('user_added_to_account_date_time'), kwargs.get('user_added_to_account_date_time', None))
        setattr(self, "_{}".format('user_id'), kwargs.get('user_id', None))
        setattr(self, "_{}".format('user_name'), kwargs.get('user_name', None))
        setattr(self, "_{}".format('user_profile_last_modified_date'), kwargs.get('user_profile_last_modified_date', None))
        setattr(self, "_{}".format('user_settings'), kwargs.get('user_settings', None))
        setattr(self, "_{}".format('user_status'), kwargs.get('user_status', None))
        setattr(self, "_{}".format('user_type'), kwargs.get('user_type', None))
        setattr(self, "_{}".format('work_address'), kwargs.get('work_address', None))

    @property
    def activation_access_code(self):
        """Gets the activation_access_code of this UserInformation.  # noqa: E501

        The activation code the new user must enter when activating their account.  # noqa: E501

        :return: The activation_access_code of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._activation_access_code

    @activation_access_code.setter
    def activation_access_code(self, activation_access_code):
        """Sets the activation_access_code of this UserInformation.

        The activation code the new user must enter when activating their account.  # noqa: E501

        :param activation_access_code: The activation_access_code of this UserInformation.  # noqa: E501
        :type: str
        """

        self._activation_access_code = activation_access_code

    @property
    def company(self):
        """Gets the company of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The company of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserInformation.

          # noqa: E501

        :param company: The company of this UserInformation.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def connect_configurations(self):
        """Gets the connect_configurations of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The connect_configurations of this UserInformation.  # noqa: E501
        :rtype: list[ConnectUserObject]
        """
        return self._connect_configurations

    @connect_configurations.setter
    def connect_configurations(self, connect_configurations):
        """Sets the connect_configurations of this UserInformation.

          # noqa: E501

        :param connect_configurations: The connect_configurations of this UserInformation.  # noqa: E501
        :type: list[ConnectUserObject]
        """

        self._connect_configurations = connect_configurations

    @property
    def country_code(self):
        """Gets the country_code of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The country_code of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this UserInformation.

          # noqa: E501

        :param country_code: The country_code of this UserInformation.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def created_date_time(self):
        """Gets the created_date_time of this UserInformation.  # noqa: E501

        Indicates the date and time the item was created.  # noqa: E501

        :return: The created_date_time of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this UserInformation.

        Indicates the date and time the item was created.  # noqa: E501

        :param created_date_time: The created_date_time of this UserInformation.  # noqa: E501
        :type: str
        """

        self._created_date_time = created_date_time

    @property
    def custom_settings(self):
        """Gets the custom_settings of this UserInformation.  # noqa: E501

        The name/value pair information for the user custom setting.  # noqa: E501

        :return: The custom_settings of this UserInformation.  # noqa: E501
        :rtype: list[NameValue]
        """
        return self._custom_settings

    @custom_settings.setter
    def custom_settings(self, custom_settings):
        """Sets the custom_settings of this UserInformation.

        The name/value pair information for the user custom setting.  # noqa: E501

        :param custom_settings: The custom_settings of this UserInformation.  # noqa: E501
        :type: list[NameValue]
        """

        self._custom_settings = custom_settings

    @property
    def default_account_id(self):
        """Gets the default_account_id of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The default_account_id of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._default_account_id

    @default_account_id.setter
    def default_account_id(self, default_account_id):
        """Sets the default_account_id of this UserInformation.

          # noqa: E501

        :param default_account_id: The default_account_id of this UserInformation.  # noqa: E501
        :type: str
        """

        self._default_account_id = default_account_id

    @property
    def email(self):
        """Gets the email of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The email of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInformation.

          # noqa: E501

        :param email: The email of this UserInformation.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enable_connect_for_user(self):
        """Gets the enable_connect_for_user of this UserInformation.  # noqa: E501

        Specifies whether the user is enabled for updates from DocuSign Connect. Valid values: true or false.  # noqa: E501

        :return: The enable_connect_for_user of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._enable_connect_for_user

    @enable_connect_for_user.setter
    def enable_connect_for_user(self, enable_connect_for_user):
        """Sets the enable_connect_for_user of this UserInformation.

        Specifies whether the user is enabled for updates from DocuSign Connect. Valid values: true or false.  # noqa: E501

        :param enable_connect_for_user: The enable_connect_for_user of this UserInformation.  # noqa: E501
        :type: str
        """

        self._enable_connect_for_user = enable_connect_for_user

    @property
    def error_details(self):
        """Gets the error_details of this UserInformation.  # noqa: E501

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :return: The error_details of this UserInformation.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this UserInformation.

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :param error_details: The error_details of this UserInformation.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def first_name(self):
        """Gets the first_name of this UserInformation.  # noqa: E501

        The user's first name.  Maximum Length: 50 characters.  # noqa: E501

        :return: The first_name of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInformation.

        The user's first name.  Maximum Length: 50 characters.  # noqa: E501

        :param first_name: The first_name of this UserInformation.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def forgotten_password_info(self):
        """Gets the forgotten_password_info of this UserInformation.  # noqa: E501

        A complex element containing up to four Question/Answer pairs for forgotten password information.  # noqa: E501

        :return: The forgotten_password_info of this UserInformation.  # noqa: E501
        :rtype: ForgottenPasswordInformation
        """
        return self._forgotten_password_info

    @forgotten_password_info.setter
    def forgotten_password_info(self, forgotten_password_info):
        """Sets the forgotten_password_info of this UserInformation.

        A complex element containing up to four Question/Answer pairs for forgotten password information.  # noqa: E501

        :param forgotten_password_info: The forgotten_password_info of this UserInformation.  # noqa: E501
        :type: ForgottenPasswordInformation
        """

        self._forgotten_password_info = forgotten_password_info

    @property
    def group_list(self):
        """Gets the group_list of this UserInformation.  # noqa: E501

        A list of the group information for groups to add the user to. Group information can be found by calling [ML:GET group information]. The only required parameter is groupId.   The parameters are:  * groupId - The DocuSign group ID for the group. * groupName - The name of the group * permissionProfileId - The ID of the permission profile associated with the group. * groupType - The group type.   # noqa: E501

        :return: The group_list of this UserInformation.  # noqa: E501
        :rtype: list[Group]
        """
        return self._group_list

    @group_list.setter
    def group_list(self, group_list):
        """Sets the group_list of this UserInformation.

        A list of the group information for groups to add the user to. Group information can be found by calling [ML:GET group information]. The only required parameter is groupId.   The parameters are:  * groupId - The DocuSign group ID for the group. * groupName - The name of the group * permissionProfileId - The ID of the permission profile associated with the group. * groupType - The group type.   # noqa: E501

        :param group_list: The group_list of this UserInformation.  # noqa: E501
        :type: list[Group]
        """

        self._group_list = group_list

    @property
    def has_remote_notary(self):
        """Gets the has_remote_notary of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The has_remote_notary of this UserInformation.  # noqa: E501
        :rtype: bool
        """
        return self._has_remote_notary

    @has_remote_notary.setter
    def has_remote_notary(self, has_remote_notary):
        """Sets the has_remote_notary of this UserInformation.

          # noqa: E501

        :param has_remote_notary: The has_remote_notary of this UserInformation.  # noqa: E501
        :type: bool
        """

        self._has_remote_notary = has_remote_notary

    @property
    def home_address(self):
        """Gets the home_address of this UserInformation.  # noqa: E501

        Specifies the email for the signing host. It is a Required element for In Person Signers recipient Type.  Maximum Length: 100 characters.  # noqa: E501

        :return: The home_address of this UserInformation.  # noqa: E501
        :rtype: AddressInformation
        """
        return self._home_address

    @home_address.setter
    def home_address(self, home_address):
        """Sets the home_address of this UserInformation.

        Specifies the email for the signing host. It is a Required element for In Person Signers recipient Type.  Maximum Length: 100 characters.  # noqa: E501

        :param home_address: The home_address of this UserInformation.  # noqa: E501
        :type: AddressInformation
        """

        self._home_address = home_address

    @property
    def initials_image_uri(self):
        """Gets the initials_image_uri of this UserInformation.  # noqa: E501

        Contains the URI for an endpoint that you can use to retrieve the initials image.  # noqa: E501

        :return: The initials_image_uri of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._initials_image_uri

    @initials_image_uri.setter
    def initials_image_uri(self, initials_image_uri):
        """Sets the initials_image_uri of this UserInformation.

        Contains the URI for an endpoint that you can use to retrieve the initials image.  # noqa: E501

        :param initials_image_uri: The initials_image_uri of this UserInformation.  # noqa: E501
        :type: str
        """

        self._initials_image_uri = initials_image_uri

    @property
    def is_admin(self):
        """Gets the is_admin of this UserInformation.  # noqa: E501

        Determines if the feature set is actively set as part of the plan.  # noqa: E501

        :return: The is_admin of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserInformation.

        Determines if the feature set is actively set as part of the plan.  # noqa: E501

        :param is_admin: The is_admin of this UserInformation.  # noqa: E501
        :type: str
        """

        self._is_admin = is_admin

    @property
    def is_alternate_admin(self):
        """Gets the is_alternate_admin of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The is_alternate_admin of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._is_alternate_admin

    @is_alternate_admin.setter
    def is_alternate_admin(self, is_alternate_admin):
        """Sets the is_alternate_admin of this UserInformation.

          # noqa: E501

        :param is_alternate_admin: The is_alternate_admin of this UserInformation.  # noqa: E501
        :type: str
        """

        self._is_alternate_admin = is_alternate_admin

    @property
    def is_nar_enabled(self):
        """Gets the is_nar_enabled of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The is_nar_enabled of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._is_nar_enabled

    @is_nar_enabled.setter
    def is_nar_enabled(self, is_nar_enabled):
        """Sets the is_nar_enabled of this UserInformation.

          # noqa: E501

        :param is_nar_enabled: The is_nar_enabled of this UserInformation.  # noqa: E501
        :type: str
        """

        self._is_nar_enabled = is_nar_enabled

    @property
    def job_title(self):
        """Gets the job_title of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The job_title of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this UserInformation.

          # noqa: E501

        :param job_title: The job_title of this UserInformation.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def last_login(self):
        """Gets the last_login of this UserInformation.  # noqa: E501

        Shows the date-time when the user last logged on to the system.  # noqa: E501

        :return: The last_login of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserInformation.

        Shows the date-time when the user last logged on to the system.  # noqa: E501

        :param last_login: The last_login of this UserInformation.  # noqa: E501
        :type: str
        """

        self._last_login = last_login

    @property
    def last_name(self):
        """Gets the last_name of this UserInformation.  # noqa: E501

        The user's last name.  Maximum Length: 50 characters.  # noqa: E501

        :return: The last_name of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInformation.

        The user's last name.  Maximum Length: 50 characters.  # noqa: E501

        :param last_name: The last_name of this UserInformation.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def login_status(self):
        """Gets the login_status of this UserInformation.  # noqa: E501

        Shows the current status of the user's password. Possible values are:   * password_reset * password_active * password_expired * password_locked * password_reset_failed    # noqa: E501

        :return: The login_status of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._login_status

    @login_status.setter
    def login_status(self, login_status):
        """Sets the login_status of this UserInformation.

        Shows the current status of the user's password. Possible values are:   * password_reset * password_active * password_expired * password_locked * password_reset_failed    # noqa: E501

        :param login_status: The login_status of this UserInformation.  # noqa: E501
        :type: str
        """

        self._login_status = login_status

    @property
    def middle_name(self):
        """Gets the middle_name of this UserInformation.  # noqa: E501

        The user's middle name.  Maximum Length: 50 characters.  # noqa: E501

        :return: The middle_name of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserInformation.

        The user's middle name.  Maximum Length: 50 characters.  # noqa: E501

        :param middle_name: The middle_name of this UserInformation.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def password(self):
        """Gets the password of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The password of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserInformation.

          # noqa: E501

        :param password: The password of this UserInformation.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_expiration(self):
        """Gets the password_expiration of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The password_expiration of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._password_expiration

    @password_expiration.setter
    def password_expiration(self, password_expiration):
        """Sets the password_expiration of this UserInformation.

          # noqa: E501

        :param password_expiration: The password_expiration of this UserInformation.  # noqa: E501
        :type: str
        """

        self._password_expiration = password_expiration

    @property
    def permission_profile_id(self):
        """Gets the permission_profile_id of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The permission_profile_id of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._permission_profile_id

    @permission_profile_id.setter
    def permission_profile_id(self, permission_profile_id):
        """Sets the permission_profile_id of this UserInformation.

          # noqa: E501

        :param permission_profile_id: The permission_profile_id of this UserInformation.  # noqa: E501
        :type: str
        """

        self._permission_profile_id = permission_profile_id

    @property
    def permission_profile_name(self):
        """Gets the permission_profile_name of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The permission_profile_name of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._permission_profile_name

    @permission_profile_name.setter
    def permission_profile_name(self, permission_profile_name):
        """Sets the permission_profile_name of this UserInformation.

          # noqa: E501

        :param permission_profile_name: The permission_profile_name of this UserInformation.  # noqa: E501
        :type: str
        """

        self._permission_profile_name = permission_profile_name

    @property
    def profile_image_uri(self):
        """Gets the profile_image_uri of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The profile_image_uri of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_uri

    @profile_image_uri.setter
    def profile_image_uri(self, profile_image_uri):
        """Sets the profile_image_uri of this UserInformation.

          # noqa: E501

        :param profile_image_uri: The profile_image_uri of this UserInformation.  # noqa: E501
        :type: str
        """

        self._profile_image_uri = profile_image_uri

    @property
    def send_activation_email(self):
        """Gets the send_activation_email of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The send_activation_email of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._send_activation_email

    @send_activation_email.setter
    def send_activation_email(self, send_activation_email):
        """Sets the send_activation_email of this UserInformation.

          # noqa: E501

        :param send_activation_email: The send_activation_email of this UserInformation.  # noqa: E501
        :type: str
        """

        self._send_activation_email = send_activation_email

    @property
    def send_activation_on_invalid_login(self):
        """Gets the send_activation_on_invalid_login of this UserInformation.  # noqa: E501

        When set to **true**, specifies that an additional activation email is sent to the user if they fail a log on before activating their account.   # noqa: E501

        :return: The send_activation_on_invalid_login of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._send_activation_on_invalid_login

    @send_activation_on_invalid_login.setter
    def send_activation_on_invalid_login(self, send_activation_on_invalid_login):
        """Sets the send_activation_on_invalid_login of this UserInformation.

        When set to **true**, specifies that an additional activation email is sent to the user if they fail a log on before activating their account.   # noqa: E501

        :param send_activation_on_invalid_login: The send_activation_on_invalid_login of this UserInformation.  # noqa: E501
        :type: str
        """

        self._send_activation_on_invalid_login = send_activation_on_invalid_login

    @property
    def signature_image_uri(self):
        """Gets the signature_image_uri of this UserInformation.  # noqa: E501

        Contains the URI for an endpoint that you can use to retrieve the signature image.  # noqa: E501

        :return: The signature_image_uri of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._signature_image_uri

    @signature_image_uri.setter
    def signature_image_uri(self, signature_image_uri):
        """Sets the signature_image_uri of this UserInformation.

        Contains the URI for an endpoint that you can use to retrieve the signature image.  # noqa: E501

        :param signature_image_uri: The signature_image_uri of this UserInformation.  # noqa: E501
        :type: str
        """

        self._signature_image_uri = signature_image_uri

    @property
    def subscribe(self):
        """Gets the subscribe of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The subscribe of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe):
        """Sets the subscribe of this UserInformation.

          # noqa: E501

        :param subscribe: The subscribe of this UserInformation.  # noqa: E501
        :type: str
        """

        self._subscribe = subscribe

    @property
    def suffix_name(self):
        """Gets the suffix_name of this UserInformation.  # noqa: E501

        The suffix for the user's name.   Maximum Length: 50 characters.   # noqa: E501

        :return: The suffix_name of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._suffix_name

    @suffix_name.setter
    def suffix_name(self, suffix_name):
        """Sets the suffix_name of this UserInformation.

        The suffix for the user's name.   Maximum Length: 50 characters.   # noqa: E501

        :param suffix_name: The suffix_name of this UserInformation.  # noqa: E501
        :type: str
        """

        self._suffix_name = suffix_name

    @property
    def title(self):
        """Gets the title of this UserInformation.  # noqa: E501

        The title of the user.  # noqa: E501

        :return: The title of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserInformation.

        The title of the user.  # noqa: E501

        :param title: The title of this UserInformation.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The uri of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this UserInformation.

          # noqa: E501

        :param uri: The uri of this UserInformation.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def user_added_to_account_date_time(self):
        """Gets the user_added_to_account_date_time of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The user_added_to_account_date_time of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_added_to_account_date_time

    @user_added_to_account_date_time.setter
    def user_added_to_account_date_time(self, user_added_to_account_date_time):
        """Sets the user_added_to_account_date_time of this UserInformation.

          # noqa: E501

        :param user_added_to_account_date_time: The user_added_to_account_date_time of this UserInformation.  # noqa: E501
        :type: str
        """

        self._user_added_to_account_date_time = user_added_to_account_date_time

    @property
    def user_id(self):
        """Gets the user_id of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The user_id of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserInformation.

          # noqa: E501

        :param user_id: The user_id of this UserInformation.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The user_name of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserInformation.

          # noqa: E501

        :param user_name: The user_name of this UserInformation.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_profile_last_modified_date(self):
        """Gets the user_profile_last_modified_date of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The user_profile_last_modified_date of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_profile_last_modified_date

    @user_profile_last_modified_date.setter
    def user_profile_last_modified_date(self, user_profile_last_modified_date):
        """Sets the user_profile_last_modified_date of this UserInformation.

          # noqa: E501

        :param user_profile_last_modified_date: The user_profile_last_modified_date of this UserInformation.  # noqa: E501
        :type: str
        """

        self._user_profile_last_modified_date = user_profile_last_modified_date

    @property
    def user_settings(self):
        """Gets the user_settings of this UserInformation.  # noqa: E501

        The collection of settings representing the actions a user can perform. See [userSettingsInformation](/docs/esign-rest-api/reference/users/users/get/#userSettingsInformation) for available settings.  # noqa: E501

        :return: The user_settings of this UserInformation.  # noqa: E501
        :rtype: UserSettingsInformation
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """Sets the user_settings of this UserInformation.

        The collection of settings representing the actions a user can perform. See [userSettingsInformation](/docs/esign-rest-api/reference/users/users/get/#userSettingsInformation) for available settings.  # noqa: E501

        :param user_settings: The user_settings of this UserInformation.  # noqa: E501
        :type: UserSettingsInformation
        """

        self._user_settings = user_settings

    @property
    def user_status(self):
        """Gets the user_status of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The user_status of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this UserInformation.

          # noqa: E501

        :param user_status: The user_status of this UserInformation.  # noqa: E501
        :type: str
        """

        self._user_status = user_status

    @property
    def user_type(self):
        """Gets the user_type of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The user_type of this UserInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserInformation.

          # noqa: E501

        :param user_type: The user_type of this UserInformation.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def work_address(self):
        """Gets the work_address of this UserInformation.  # noqa: E501

          # noqa: E501

        :return: The work_address of this UserInformation.  # noqa: E501
        :rtype: AddressInformation
        """
        return self._work_address

    @work_address.setter
    def work_address(self, work_address):
        """Sets the work_address of this UserInformation.

          # noqa: E501

        :param work_address: The work_address of this UserInformation.  # noqa: E501
        :type: AddressInformation
        """

        self._work_address = work_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInformation):
            return True

        return self.to_dict() != other.to_dict()
