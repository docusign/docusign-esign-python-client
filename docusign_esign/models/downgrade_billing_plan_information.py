# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DowngradeBillingPlanInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'downgrade_event_type': 'str',
        'plan_information': 'PlanInformation'
    }

    attribute_map = {
        'downgrade_event_type': 'downgradeEventType',
        'plan_information': 'planInformation'
    }

    def __init__(self, downgrade_event_type=None, plan_information=None):  # noqa: E501
        """DowngradeBillingPlanInformation - a model defined in Swagger"""  # noqa: E501

        self._downgrade_event_type = None
        self._plan_information = None
        self.discriminator = None

        if downgrade_event_type is not None:
            self.downgrade_event_type = downgrade_event_type
        if plan_information is not None:
            self.plan_information = plan_information

    @property
    def downgrade_event_type(self):
        """Gets the downgrade_event_type of this DowngradeBillingPlanInformation.  # noqa: E501

          # noqa: E501

        :return: The downgrade_event_type of this DowngradeBillingPlanInformation.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_event_type

    @downgrade_event_type.setter
    def downgrade_event_type(self, downgrade_event_type):
        """Sets the downgrade_event_type of this DowngradeBillingPlanInformation.

          # noqa: E501

        :param downgrade_event_type: The downgrade_event_type of this DowngradeBillingPlanInformation.  # noqa: E501
        :type: str
        """

        self._downgrade_event_type = downgrade_event_type

    @property
    def plan_information(self):
        """Gets the plan_information of this DowngradeBillingPlanInformation.  # noqa: E501


        :return: The plan_information of this DowngradeBillingPlanInformation.  # noqa: E501
        :rtype: PlanInformation
        """
        return self._plan_information

    @plan_information.setter
    def plan_information(self, plan_information):
        """Sets the plan_information of this DowngradeBillingPlanInformation.


        :param plan_information: The plan_information of this DowngradeBillingPlanInformation.  # noqa: E501
        :type: PlanInformation
        """

        self._plan_information = plan_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DowngradeBillingPlanInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DowngradeBillingPlanInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
