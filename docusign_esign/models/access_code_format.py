# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class AccessCodeFormat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format_required': 'str',
        'format_required_metadata': 'SettingsMetadata',
        'letter_required': 'str',
        'letter_required_metadata': 'SettingsMetadata',
        'minimum_length': 'str',
        'minimum_length_metadata': 'SettingsMetadata',
        'number_required': 'str',
        'number_required_metadata': 'SettingsMetadata',
        'special_character_required': 'str',
        'special_character_required_metadata': 'SettingsMetadata'
    }

    attribute_map = {
        'format_required': 'formatRequired',
        'format_required_metadata': 'formatRequiredMetadata',
        'letter_required': 'letterRequired',
        'letter_required_metadata': 'letterRequiredMetadata',
        'minimum_length': 'minimumLength',
        'minimum_length_metadata': 'minimumLengthMetadata',
        'number_required': 'numberRequired',
        'number_required_metadata': 'numberRequiredMetadata',
        'special_character_required': 'specialCharacterRequired',
        'special_character_required_metadata': 'specialCharacterRequiredMetadata'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AccessCodeFormat - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._format_required = None
        self._format_required_metadata = None
        self._letter_required = None
        self._letter_required_metadata = None
        self._minimum_length = None
        self._minimum_length_metadata = None
        self._number_required = None
        self._number_required_metadata = None
        self._special_character_required = None
        self._special_character_required_metadata = None
        self.discriminator = None

        setattr(self, "_{}".format('format_required'), kwargs.get('format_required', None))
        setattr(self, "_{}".format('format_required_metadata'), kwargs.get('format_required_metadata', None))
        setattr(self, "_{}".format('letter_required'), kwargs.get('letter_required', None))
        setattr(self, "_{}".format('letter_required_metadata'), kwargs.get('letter_required_metadata', None))
        setattr(self, "_{}".format('minimum_length'), kwargs.get('minimum_length', None))
        setattr(self, "_{}".format('minimum_length_metadata'), kwargs.get('minimum_length_metadata', None))
        setattr(self, "_{}".format('number_required'), kwargs.get('number_required', None))
        setattr(self, "_{}".format('number_required_metadata'), kwargs.get('number_required_metadata', None))
        setattr(self, "_{}".format('special_character_required'), kwargs.get('special_character_required', None))
        setattr(self, "_{}".format('special_character_required_metadata'), kwargs.get('special_character_required_metadata', None))

    @property
    def format_required(self):
        """Gets the format_required of this AccessCodeFormat.  # noqa: E501

          # noqa: E501

        :return: The format_required of this AccessCodeFormat.  # noqa: E501
        :rtype: str
        """
        return self._format_required

    @format_required.setter
    def format_required(self, format_required):
        """Sets the format_required of this AccessCodeFormat.

          # noqa: E501

        :param format_required: The format_required of this AccessCodeFormat.  # noqa: E501
        :type: str
        """

        self._format_required = format_required

    @property
    def format_required_metadata(self):
        """Gets the format_required_metadata of this AccessCodeFormat.  # noqa: E501

        Metadata indicating whether the `formatRequired` property is editable.  # noqa: E501

        :return: The format_required_metadata of this AccessCodeFormat.  # noqa: E501
        :rtype: SettingsMetadata
        """
        return self._format_required_metadata

    @format_required_metadata.setter
    def format_required_metadata(self, format_required_metadata):
        """Sets the format_required_metadata of this AccessCodeFormat.

        Metadata indicating whether the `formatRequired` property is editable.  # noqa: E501

        :param format_required_metadata: The format_required_metadata of this AccessCodeFormat.  # noqa: E501
        :type: SettingsMetadata
        """

        self._format_required_metadata = format_required_metadata

    @property
    def letter_required(self):
        """Gets the letter_required of this AccessCodeFormat.  # noqa: E501

          # noqa: E501

        :return: The letter_required of this AccessCodeFormat.  # noqa: E501
        :rtype: str
        """
        return self._letter_required

    @letter_required.setter
    def letter_required(self, letter_required):
        """Sets the letter_required of this AccessCodeFormat.

          # noqa: E501

        :param letter_required: The letter_required of this AccessCodeFormat.  # noqa: E501
        :type: str
        """

        self._letter_required = letter_required

    @property
    def letter_required_metadata(self):
        """Gets the letter_required_metadata of this AccessCodeFormat.  # noqa: E501

        Metadata indicating whether the `letterRequired` property is editable.  # noqa: E501

        :return: The letter_required_metadata of this AccessCodeFormat.  # noqa: E501
        :rtype: SettingsMetadata
        """
        return self._letter_required_metadata

    @letter_required_metadata.setter
    def letter_required_metadata(self, letter_required_metadata):
        """Sets the letter_required_metadata of this AccessCodeFormat.

        Metadata indicating whether the `letterRequired` property is editable.  # noqa: E501

        :param letter_required_metadata: The letter_required_metadata of this AccessCodeFormat.  # noqa: E501
        :type: SettingsMetadata
        """

        self._letter_required_metadata = letter_required_metadata

    @property
    def minimum_length(self):
        """Gets the minimum_length of this AccessCodeFormat.  # noqa: E501

          # noqa: E501

        :return: The minimum_length of this AccessCodeFormat.  # noqa: E501
        :rtype: str
        """
        return self._minimum_length

    @minimum_length.setter
    def minimum_length(self, minimum_length):
        """Sets the minimum_length of this AccessCodeFormat.

          # noqa: E501

        :param minimum_length: The minimum_length of this AccessCodeFormat.  # noqa: E501
        :type: str
        """

        self._minimum_length = minimum_length

    @property
    def minimum_length_metadata(self):
        """Gets the minimum_length_metadata of this AccessCodeFormat.  # noqa: E501

        Metadata indicating whether the `minimumLength` property is editable.  # noqa: E501

        :return: The minimum_length_metadata of this AccessCodeFormat.  # noqa: E501
        :rtype: SettingsMetadata
        """
        return self._minimum_length_metadata

    @minimum_length_metadata.setter
    def minimum_length_metadata(self, minimum_length_metadata):
        """Sets the minimum_length_metadata of this AccessCodeFormat.

        Metadata indicating whether the `minimumLength` property is editable.  # noqa: E501

        :param minimum_length_metadata: The minimum_length_metadata of this AccessCodeFormat.  # noqa: E501
        :type: SettingsMetadata
        """

        self._minimum_length_metadata = minimum_length_metadata

    @property
    def number_required(self):
        """Gets the number_required of this AccessCodeFormat.  # noqa: E501

          # noqa: E501

        :return: The number_required of this AccessCodeFormat.  # noqa: E501
        :rtype: str
        """
        return self._number_required

    @number_required.setter
    def number_required(self, number_required):
        """Sets the number_required of this AccessCodeFormat.

          # noqa: E501

        :param number_required: The number_required of this AccessCodeFormat.  # noqa: E501
        :type: str
        """

        self._number_required = number_required

    @property
    def number_required_metadata(self):
        """Gets the number_required_metadata of this AccessCodeFormat.  # noqa: E501

        Metadata indicating whether the `numberRequired` property is editable.  # noqa: E501

        :return: The number_required_metadata of this AccessCodeFormat.  # noqa: E501
        :rtype: SettingsMetadata
        """
        return self._number_required_metadata

    @number_required_metadata.setter
    def number_required_metadata(self, number_required_metadata):
        """Sets the number_required_metadata of this AccessCodeFormat.

        Metadata indicating whether the `numberRequired` property is editable.  # noqa: E501

        :param number_required_metadata: The number_required_metadata of this AccessCodeFormat.  # noqa: E501
        :type: SettingsMetadata
        """

        self._number_required_metadata = number_required_metadata

    @property
    def special_character_required(self):
        """Gets the special_character_required of this AccessCodeFormat.  # noqa: E501

          # noqa: E501

        :return: The special_character_required of this AccessCodeFormat.  # noqa: E501
        :rtype: str
        """
        return self._special_character_required

    @special_character_required.setter
    def special_character_required(self, special_character_required):
        """Sets the special_character_required of this AccessCodeFormat.

          # noqa: E501

        :param special_character_required: The special_character_required of this AccessCodeFormat.  # noqa: E501
        :type: str
        """

        self._special_character_required = special_character_required

    @property
    def special_character_required_metadata(self):
        """Gets the special_character_required_metadata of this AccessCodeFormat.  # noqa: E501

        Metadata indicating whether the `specialCharacterRequired` property is editable.  # noqa: E501

        :return: The special_character_required_metadata of this AccessCodeFormat.  # noqa: E501
        :rtype: SettingsMetadata
        """
        return self._special_character_required_metadata

    @special_character_required_metadata.setter
    def special_character_required_metadata(self, special_character_required_metadata):
        """Sets the special_character_required_metadata of this AccessCodeFormat.

        Metadata indicating whether the `specialCharacterRequired` property is editable.  # noqa: E501

        :param special_character_required_metadata: The special_character_required_metadata of this AccessCodeFormat.  # noqa: E501
        :type: SettingsMetadata
        """

        self._special_character_required_metadata = special_character_required_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessCodeFormat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessCodeFormat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessCodeFormat):
            return True

        return self.to_dict() != other.to_dict()
