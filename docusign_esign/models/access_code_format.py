# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccessCodeFormat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, format_required=None, format_required_metadata=None, letter_required=None, letter_required_metadata=None, minimum_length=None, minimum_length_metadata=None, number_required=None, number_required_metadata=None, special_character_required=None, special_character_required_metadata=None):
        """
        AccessCodeFormat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'format_required': 'str',
            'format_required_metadata': 'SettingsMetadata',
            'letter_required': 'str',
            'letter_required_metadata': 'SettingsMetadata',
            'minimum_length': 'str',
            'minimum_length_metadata': 'SettingsMetadata',
            'number_required': 'str',
            'number_required_metadata': 'SettingsMetadata',
            'special_character_required': 'str',
            'special_character_required_metadata': 'SettingsMetadata'
        }

        self.attribute_map = {
            'format_required': 'formatRequired',
            'format_required_metadata': 'formatRequiredMetadata',
            'letter_required': 'letterRequired',
            'letter_required_metadata': 'letterRequiredMetadata',
            'minimum_length': 'minimumLength',
            'minimum_length_metadata': 'minimumLengthMetadata',
            'number_required': 'numberRequired',
            'number_required_metadata': 'numberRequiredMetadata',
            'special_character_required': 'specialCharacterRequired',
            'special_character_required_metadata': 'specialCharacterRequiredMetadata'
        }

        self._format_required = format_required
        self._format_required_metadata = format_required_metadata
        self._letter_required = letter_required
        self._letter_required_metadata = letter_required_metadata
        self._minimum_length = minimum_length
        self._minimum_length_metadata = minimum_length_metadata
        self._number_required = number_required
        self._number_required_metadata = number_required_metadata
        self._special_character_required = special_character_required
        self._special_character_required_metadata = special_character_required_metadata

    @property
    def format_required(self):
        """
        Gets the format_required of this AccessCodeFormat.
        

        :return: The format_required of this AccessCodeFormat.
        :rtype: str
        """
        return self._format_required

    @format_required.setter
    def format_required(self, format_required):
        """
        Sets the format_required of this AccessCodeFormat.
        

        :param format_required: The format_required of this AccessCodeFormat.
        :type: str
        """

        self._format_required = format_required

    @property
    def format_required_metadata(self):
        """
        Gets the format_required_metadata of this AccessCodeFormat.

        :return: The format_required_metadata of this AccessCodeFormat.
        :rtype: SettingsMetadata
        """
        return self._format_required_metadata

    @format_required_metadata.setter
    def format_required_metadata(self, format_required_metadata):
        """
        Sets the format_required_metadata of this AccessCodeFormat.

        :param format_required_metadata: The format_required_metadata of this AccessCodeFormat.
        :type: SettingsMetadata
        """

        self._format_required_metadata = format_required_metadata

    @property
    def letter_required(self):
        """
        Gets the letter_required of this AccessCodeFormat.
        

        :return: The letter_required of this AccessCodeFormat.
        :rtype: str
        """
        return self._letter_required

    @letter_required.setter
    def letter_required(self, letter_required):
        """
        Sets the letter_required of this AccessCodeFormat.
        

        :param letter_required: The letter_required of this AccessCodeFormat.
        :type: str
        """

        self._letter_required = letter_required

    @property
    def letter_required_metadata(self):
        """
        Gets the letter_required_metadata of this AccessCodeFormat.

        :return: The letter_required_metadata of this AccessCodeFormat.
        :rtype: SettingsMetadata
        """
        return self._letter_required_metadata

    @letter_required_metadata.setter
    def letter_required_metadata(self, letter_required_metadata):
        """
        Sets the letter_required_metadata of this AccessCodeFormat.

        :param letter_required_metadata: The letter_required_metadata of this AccessCodeFormat.
        :type: SettingsMetadata
        """

        self._letter_required_metadata = letter_required_metadata

    @property
    def minimum_length(self):
        """
        Gets the minimum_length of this AccessCodeFormat.
        

        :return: The minimum_length of this AccessCodeFormat.
        :rtype: str
        """
        return self._minimum_length

    @minimum_length.setter
    def minimum_length(self, minimum_length):
        """
        Sets the minimum_length of this AccessCodeFormat.
        

        :param minimum_length: The minimum_length of this AccessCodeFormat.
        :type: str
        """

        self._minimum_length = minimum_length

    @property
    def minimum_length_metadata(self):
        """
        Gets the minimum_length_metadata of this AccessCodeFormat.

        :return: The minimum_length_metadata of this AccessCodeFormat.
        :rtype: SettingsMetadata
        """
        return self._minimum_length_metadata

    @minimum_length_metadata.setter
    def minimum_length_metadata(self, minimum_length_metadata):
        """
        Sets the minimum_length_metadata of this AccessCodeFormat.

        :param minimum_length_metadata: The minimum_length_metadata of this AccessCodeFormat.
        :type: SettingsMetadata
        """

        self._minimum_length_metadata = minimum_length_metadata

    @property
    def number_required(self):
        """
        Gets the number_required of this AccessCodeFormat.
        

        :return: The number_required of this AccessCodeFormat.
        :rtype: str
        """
        return self._number_required

    @number_required.setter
    def number_required(self, number_required):
        """
        Sets the number_required of this AccessCodeFormat.
        

        :param number_required: The number_required of this AccessCodeFormat.
        :type: str
        """

        self._number_required = number_required

    @property
    def number_required_metadata(self):
        """
        Gets the number_required_metadata of this AccessCodeFormat.

        :return: The number_required_metadata of this AccessCodeFormat.
        :rtype: SettingsMetadata
        """
        return self._number_required_metadata

    @number_required_metadata.setter
    def number_required_metadata(self, number_required_metadata):
        """
        Sets the number_required_metadata of this AccessCodeFormat.

        :param number_required_metadata: The number_required_metadata of this AccessCodeFormat.
        :type: SettingsMetadata
        """

        self._number_required_metadata = number_required_metadata

    @property
    def special_character_required(self):
        """
        Gets the special_character_required of this AccessCodeFormat.
        

        :return: The special_character_required of this AccessCodeFormat.
        :rtype: str
        """
        return self._special_character_required

    @special_character_required.setter
    def special_character_required(self, special_character_required):
        """
        Sets the special_character_required of this AccessCodeFormat.
        

        :param special_character_required: The special_character_required of this AccessCodeFormat.
        :type: str
        """

        self._special_character_required = special_character_required

    @property
    def special_character_required_metadata(self):
        """
        Gets the special_character_required_metadata of this AccessCodeFormat.

        :return: The special_character_required_metadata of this AccessCodeFormat.
        :rtype: SettingsMetadata
        """
        return self._special_character_required_metadata

    @special_character_required_metadata.setter
    def special_character_required_metadata(self, special_character_required_metadata):
        """
        Sets the special_character_required_metadata of this AccessCodeFormat.

        :param special_character_required_metadata: The special_character_required_metadata of this AccessCodeFormat.
        :type: SettingsMetadata
        """

        self._special_character_required_metadata = special_character_required_metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
