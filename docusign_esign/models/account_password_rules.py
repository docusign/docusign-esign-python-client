# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountPasswordRules(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, expire_password=None, expire_password_days=None, expire_password_days_metadata=None, lockout_duration_minutes=None, lockout_duration_minutes_metadata=None, lockout_duration_type=None, lockout_duration_type_metadata=None, minimum_password_age_days=None, minimum_password_age_days_metadata=None, minimum_password_length=None, minimum_password_length_metadata=None, password_include_digit=None, password_include_digit_or_special_character=None, password_include_lower_case=None, password_include_special_character=None, password_include_upper_case=None, password_strength_type=None, password_strength_type_metadata=None, questions_required=None, questions_required_metadata=None):
        """
        AccountPasswordRules - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'expire_password': 'str',
            'expire_password_days': 'str',
            'expire_password_days_metadata': 'AccountPasswordExpirePasswordDays',
            'lockout_duration_minutes': 'str',
            'lockout_duration_minutes_metadata': 'AccountPasswordLockoutDurationMinutes',
            'lockout_duration_type': 'str',
            'lockout_duration_type_metadata': 'AccountPasswordLockoutDurationType',
            'minimum_password_age_days': 'str',
            'minimum_password_age_days_metadata': 'AccountPasswordMinimumPasswordAgeDays',
            'minimum_password_length': 'str',
            'minimum_password_length_metadata': 'AccountMinimumPasswordLength',
            'password_include_digit': 'str',
            'password_include_digit_or_special_character': 'str',
            'password_include_lower_case': 'str',
            'password_include_special_character': 'str',
            'password_include_upper_case': 'str',
            'password_strength_type': 'str',
            'password_strength_type_metadata': 'AccountPasswordStrengthType',
            'questions_required': 'str',
            'questions_required_metadata': 'AccountPasswordQuestionsRequired'
        }

        self.attribute_map = {
            'expire_password': 'expirePassword',
            'expire_password_days': 'expirePasswordDays',
            'expire_password_days_metadata': 'expirePasswordDaysMetadata',
            'lockout_duration_minutes': 'lockoutDurationMinutes',
            'lockout_duration_minutes_metadata': 'lockoutDurationMinutesMetadata',
            'lockout_duration_type': 'lockoutDurationType',
            'lockout_duration_type_metadata': 'lockoutDurationTypeMetadata',
            'minimum_password_age_days': 'minimumPasswordAgeDays',
            'minimum_password_age_days_metadata': 'minimumPasswordAgeDaysMetadata',
            'minimum_password_length': 'minimumPasswordLength',
            'minimum_password_length_metadata': 'minimumPasswordLengthMetadata',
            'password_include_digit': 'passwordIncludeDigit',
            'password_include_digit_or_special_character': 'passwordIncludeDigitOrSpecialCharacter',
            'password_include_lower_case': 'passwordIncludeLowerCase',
            'password_include_special_character': 'passwordIncludeSpecialCharacter',
            'password_include_upper_case': 'passwordIncludeUpperCase',
            'password_strength_type': 'passwordStrengthType',
            'password_strength_type_metadata': 'passwordStrengthTypeMetadata',
            'questions_required': 'questionsRequired',
            'questions_required_metadata': 'questionsRequiredMetadata'
        }

        self._expire_password = expire_password
        self._expire_password_days = expire_password_days
        self._expire_password_days_metadata = expire_password_days_metadata
        self._lockout_duration_minutes = lockout_duration_minutes
        self._lockout_duration_minutes_metadata = lockout_duration_minutes_metadata
        self._lockout_duration_type = lockout_duration_type
        self._lockout_duration_type_metadata = lockout_duration_type_metadata
        self._minimum_password_age_days = minimum_password_age_days
        self._minimum_password_age_days_metadata = minimum_password_age_days_metadata
        self._minimum_password_length = minimum_password_length
        self._minimum_password_length_metadata = minimum_password_length_metadata
        self._password_include_digit = password_include_digit
        self._password_include_digit_or_special_character = password_include_digit_or_special_character
        self._password_include_lower_case = password_include_lower_case
        self._password_include_special_character = password_include_special_character
        self._password_include_upper_case = password_include_upper_case
        self._password_strength_type = password_strength_type
        self._password_strength_type_metadata = password_strength_type_metadata
        self._questions_required = questions_required
        self._questions_required_metadata = questions_required_metadata

    @property
    def expire_password(self):
        """
        Gets the expire_password of this AccountPasswordRules.
        

        :return: The expire_password of this AccountPasswordRules.
        :rtype: str
        """
        return self._expire_password

    @expire_password.setter
    def expire_password(self, expire_password):
        """
        Sets the expire_password of this AccountPasswordRules.
        

        :param expire_password: The expire_password of this AccountPasswordRules.
        :type: str
        """

        self._expire_password = expire_password

    @property
    def expire_password_days(self):
        """
        Gets the expire_password_days of this AccountPasswordRules.
        

        :return: The expire_password_days of this AccountPasswordRules.
        :rtype: str
        """
        return self._expire_password_days

    @expire_password_days.setter
    def expire_password_days(self, expire_password_days):
        """
        Sets the expire_password_days of this AccountPasswordRules.
        

        :param expire_password_days: The expire_password_days of this AccountPasswordRules.
        :type: str
        """

        self._expire_password_days = expire_password_days

    @property
    def expire_password_days_metadata(self):
        """
        Gets the expire_password_days_metadata of this AccountPasswordRules.

        :return: The expire_password_days_metadata of this AccountPasswordRules.
        :rtype: AccountPasswordExpirePasswordDays
        """
        return self._expire_password_days_metadata

    @expire_password_days_metadata.setter
    def expire_password_days_metadata(self, expire_password_days_metadata):
        """
        Sets the expire_password_days_metadata of this AccountPasswordRules.

        :param expire_password_days_metadata: The expire_password_days_metadata of this AccountPasswordRules.
        :type: AccountPasswordExpirePasswordDays
        """

        self._expire_password_days_metadata = expire_password_days_metadata

    @property
    def lockout_duration_minutes(self):
        """
        Gets the lockout_duration_minutes of this AccountPasswordRules.
        

        :return: The lockout_duration_minutes of this AccountPasswordRules.
        :rtype: str
        """
        return self._lockout_duration_minutes

    @lockout_duration_minutes.setter
    def lockout_duration_minutes(self, lockout_duration_minutes):
        """
        Sets the lockout_duration_minutes of this AccountPasswordRules.
        

        :param lockout_duration_minutes: The lockout_duration_minutes of this AccountPasswordRules.
        :type: str
        """

        self._lockout_duration_minutes = lockout_duration_minutes

    @property
    def lockout_duration_minutes_metadata(self):
        """
        Gets the lockout_duration_minutes_metadata of this AccountPasswordRules.

        :return: The lockout_duration_minutes_metadata of this AccountPasswordRules.
        :rtype: AccountPasswordLockoutDurationMinutes
        """
        return self._lockout_duration_minutes_metadata

    @lockout_duration_minutes_metadata.setter
    def lockout_duration_minutes_metadata(self, lockout_duration_minutes_metadata):
        """
        Sets the lockout_duration_minutes_metadata of this AccountPasswordRules.

        :param lockout_duration_minutes_metadata: The lockout_duration_minutes_metadata of this AccountPasswordRules.
        :type: AccountPasswordLockoutDurationMinutes
        """

        self._lockout_duration_minutes_metadata = lockout_duration_minutes_metadata

    @property
    def lockout_duration_type(self):
        """
        Gets the lockout_duration_type of this AccountPasswordRules.
        

        :return: The lockout_duration_type of this AccountPasswordRules.
        :rtype: str
        """
        return self._lockout_duration_type

    @lockout_duration_type.setter
    def lockout_duration_type(self, lockout_duration_type):
        """
        Sets the lockout_duration_type of this AccountPasswordRules.
        

        :param lockout_duration_type: The lockout_duration_type of this AccountPasswordRules.
        :type: str
        """

        self._lockout_duration_type = lockout_duration_type

    @property
    def lockout_duration_type_metadata(self):
        """
        Gets the lockout_duration_type_metadata of this AccountPasswordRules.

        :return: The lockout_duration_type_metadata of this AccountPasswordRules.
        :rtype: AccountPasswordLockoutDurationType
        """
        return self._lockout_duration_type_metadata

    @lockout_duration_type_metadata.setter
    def lockout_duration_type_metadata(self, lockout_duration_type_metadata):
        """
        Sets the lockout_duration_type_metadata of this AccountPasswordRules.

        :param lockout_duration_type_metadata: The lockout_duration_type_metadata of this AccountPasswordRules.
        :type: AccountPasswordLockoutDurationType
        """

        self._lockout_duration_type_metadata = lockout_duration_type_metadata

    @property
    def minimum_password_age_days(self):
        """
        Gets the minimum_password_age_days of this AccountPasswordRules.
        

        :return: The minimum_password_age_days of this AccountPasswordRules.
        :rtype: str
        """
        return self._minimum_password_age_days

    @minimum_password_age_days.setter
    def minimum_password_age_days(self, minimum_password_age_days):
        """
        Sets the minimum_password_age_days of this AccountPasswordRules.
        

        :param minimum_password_age_days: The minimum_password_age_days of this AccountPasswordRules.
        :type: str
        """

        self._minimum_password_age_days = minimum_password_age_days

    @property
    def minimum_password_age_days_metadata(self):
        """
        Gets the minimum_password_age_days_metadata of this AccountPasswordRules.

        :return: The minimum_password_age_days_metadata of this AccountPasswordRules.
        :rtype: AccountPasswordMinimumPasswordAgeDays
        """
        return self._minimum_password_age_days_metadata

    @minimum_password_age_days_metadata.setter
    def minimum_password_age_days_metadata(self, minimum_password_age_days_metadata):
        """
        Sets the minimum_password_age_days_metadata of this AccountPasswordRules.

        :param minimum_password_age_days_metadata: The minimum_password_age_days_metadata of this AccountPasswordRules.
        :type: AccountPasswordMinimumPasswordAgeDays
        """

        self._minimum_password_age_days_metadata = minimum_password_age_days_metadata

    @property
    def minimum_password_length(self):
        """
        Gets the minimum_password_length of this AccountPasswordRules.
        

        :return: The minimum_password_length of this AccountPasswordRules.
        :rtype: str
        """
        return self._minimum_password_length

    @minimum_password_length.setter
    def minimum_password_length(self, minimum_password_length):
        """
        Sets the minimum_password_length of this AccountPasswordRules.
        

        :param minimum_password_length: The minimum_password_length of this AccountPasswordRules.
        :type: str
        """

        self._minimum_password_length = minimum_password_length

    @property
    def minimum_password_length_metadata(self):
        """
        Gets the minimum_password_length_metadata of this AccountPasswordRules.

        :return: The minimum_password_length_metadata of this AccountPasswordRules.
        :rtype: AccountMinimumPasswordLength
        """
        return self._minimum_password_length_metadata

    @minimum_password_length_metadata.setter
    def minimum_password_length_metadata(self, minimum_password_length_metadata):
        """
        Sets the minimum_password_length_metadata of this AccountPasswordRules.

        :param minimum_password_length_metadata: The minimum_password_length_metadata of this AccountPasswordRules.
        :type: AccountMinimumPasswordLength
        """

        self._minimum_password_length_metadata = minimum_password_length_metadata

    @property
    def password_include_digit(self):
        """
        Gets the password_include_digit of this AccountPasswordRules.
        

        :return: The password_include_digit of this AccountPasswordRules.
        :rtype: str
        """
        return self._password_include_digit

    @password_include_digit.setter
    def password_include_digit(self, password_include_digit):
        """
        Sets the password_include_digit of this AccountPasswordRules.
        

        :param password_include_digit: The password_include_digit of this AccountPasswordRules.
        :type: str
        """

        self._password_include_digit = password_include_digit

    @property
    def password_include_digit_or_special_character(self):
        """
        Gets the password_include_digit_or_special_character of this AccountPasswordRules.
        

        :return: The password_include_digit_or_special_character of this AccountPasswordRules.
        :rtype: str
        """
        return self._password_include_digit_or_special_character

    @password_include_digit_or_special_character.setter
    def password_include_digit_or_special_character(self, password_include_digit_or_special_character):
        """
        Sets the password_include_digit_or_special_character of this AccountPasswordRules.
        

        :param password_include_digit_or_special_character: The password_include_digit_or_special_character of this AccountPasswordRules.
        :type: str
        """

        self._password_include_digit_or_special_character = password_include_digit_or_special_character

    @property
    def password_include_lower_case(self):
        """
        Gets the password_include_lower_case of this AccountPasswordRules.
        

        :return: The password_include_lower_case of this AccountPasswordRules.
        :rtype: str
        """
        return self._password_include_lower_case

    @password_include_lower_case.setter
    def password_include_lower_case(self, password_include_lower_case):
        """
        Sets the password_include_lower_case of this AccountPasswordRules.
        

        :param password_include_lower_case: The password_include_lower_case of this AccountPasswordRules.
        :type: str
        """

        self._password_include_lower_case = password_include_lower_case

    @property
    def password_include_special_character(self):
        """
        Gets the password_include_special_character of this AccountPasswordRules.
        

        :return: The password_include_special_character of this AccountPasswordRules.
        :rtype: str
        """
        return self._password_include_special_character

    @password_include_special_character.setter
    def password_include_special_character(self, password_include_special_character):
        """
        Sets the password_include_special_character of this AccountPasswordRules.
        

        :param password_include_special_character: The password_include_special_character of this AccountPasswordRules.
        :type: str
        """

        self._password_include_special_character = password_include_special_character

    @property
    def password_include_upper_case(self):
        """
        Gets the password_include_upper_case of this AccountPasswordRules.
        

        :return: The password_include_upper_case of this AccountPasswordRules.
        :rtype: str
        """
        return self._password_include_upper_case

    @password_include_upper_case.setter
    def password_include_upper_case(self, password_include_upper_case):
        """
        Sets the password_include_upper_case of this AccountPasswordRules.
        

        :param password_include_upper_case: The password_include_upper_case of this AccountPasswordRules.
        :type: str
        """

        self._password_include_upper_case = password_include_upper_case

    @property
    def password_strength_type(self):
        """
        Gets the password_strength_type of this AccountPasswordRules.
        

        :return: The password_strength_type of this AccountPasswordRules.
        :rtype: str
        """
        return self._password_strength_type

    @password_strength_type.setter
    def password_strength_type(self, password_strength_type):
        """
        Sets the password_strength_type of this AccountPasswordRules.
        

        :param password_strength_type: The password_strength_type of this AccountPasswordRules.
        :type: str
        """

        self._password_strength_type = password_strength_type

    @property
    def password_strength_type_metadata(self):
        """
        Gets the password_strength_type_metadata of this AccountPasswordRules.

        :return: The password_strength_type_metadata of this AccountPasswordRules.
        :rtype: AccountPasswordStrengthType
        """
        return self._password_strength_type_metadata

    @password_strength_type_metadata.setter
    def password_strength_type_metadata(self, password_strength_type_metadata):
        """
        Sets the password_strength_type_metadata of this AccountPasswordRules.

        :param password_strength_type_metadata: The password_strength_type_metadata of this AccountPasswordRules.
        :type: AccountPasswordStrengthType
        """

        self._password_strength_type_metadata = password_strength_type_metadata

    @property
    def questions_required(self):
        """
        Gets the questions_required of this AccountPasswordRules.
        

        :return: The questions_required of this AccountPasswordRules.
        :rtype: str
        """
        return self._questions_required

    @questions_required.setter
    def questions_required(self, questions_required):
        """
        Sets the questions_required of this AccountPasswordRules.
        

        :param questions_required: The questions_required of this AccountPasswordRules.
        :type: str
        """

        self._questions_required = questions_required

    @property
    def questions_required_metadata(self):
        """
        Gets the questions_required_metadata of this AccountPasswordRules.

        :return: The questions_required_metadata of this AccountPasswordRules.
        :rtype: AccountPasswordQuestionsRequired
        """
        return self._questions_required_metadata

    @questions_required_metadata.setter
    def questions_required_metadata(self, questions_required_metadata):
        """
        Sets the questions_required_metadata of this AccountPasswordRules.

        :param questions_required_metadata: The questions_required_metadata of this AccountPasswordRules.
        :type: AccountPasswordQuestionsRequired
        """

        self._questions_required_metadata = questions_required_metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
