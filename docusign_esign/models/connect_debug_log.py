# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class ConnectDebugLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connect_config': 'str',
        'error_details': 'ErrorDetails',
        'event_date_time': 'str',
        'event_description': 'str',
        'payload': 'str'
    }

    attribute_map = {
        'connect_config': 'connectConfig',
        'error_details': 'errorDetails',
        'event_date_time': 'eventDateTime',
        'event_description': 'eventDescription',
        'payload': 'payload'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ConnectDebugLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connect_config = None
        self._error_details = None
        self._event_date_time = None
        self._event_description = None
        self._payload = None
        self.discriminator = None

        setattr(self, "_{}".format('connect_config'), kwargs.get('connect_config', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('event_date_time'), kwargs.get('event_date_time', None))
        setattr(self, "_{}".format('event_description'), kwargs.get('event_description', None))
        setattr(self, "_{}".format('payload'), kwargs.get('payload', None))

    @property
    def connect_config(self):
        """Gets the connect_config of this ConnectDebugLog.  # noqa: E501

          # noqa: E501

        :return: The connect_config of this ConnectDebugLog.  # noqa: E501
        :rtype: str
        """
        return self._connect_config

    @connect_config.setter
    def connect_config(self, connect_config):
        """Sets the connect_config of this ConnectDebugLog.

          # noqa: E501

        :param connect_config: The connect_config of this ConnectDebugLog.  # noqa: E501
        :type: str
        """

        self._connect_config = connect_config

    @property
    def error_details(self):
        """Gets the error_details of this ConnectDebugLog.  # noqa: E501

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :return: The error_details of this ConnectDebugLog.  # noqa: E501
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this ConnectDebugLog.

        This object describes errors that occur. It is only valid for responses and ignored in requests.  # noqa: E501

        :param error_details: The error_details of this ConnectDebugLog.  # noqa: E501
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def event_date_time(self):
        """Gets the event_date_time of this ConnectDebugLog.  # noqa: E501

          # noqa: E501

        :return: The event_date_time of this ConnectDebugLog.  # noqa: E501
        :rtype: str
        """
        return self._event_date_time

    @event_date_time.setter
    def event_date_time(self, event_date_time):
        """Sets the event_date_time of this ConnectDebugLog.

          # noqa: E501

        :param event_date_time: The event_date_time of this ConnectDebugLog.  # noqa: E501
        :type: str
        """

        self._event_date_time = event_date_time

    @property
    def event_description(self):
        """Gets the event_description of this ConnectDebugLog.  # noqa: E501

          # noqa: E501

        :return: The event_description of this ConnectDebugLog.  # noqa: E501
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this ConnectDebugLog.

          # noqa: E501

        :param event_description: The event_description of this ConnectDebugLog.  # noqa: E501
        :type: str
        """

        self._event_description = event_description

    @property
    def payload(self):
        """Gets the payload of this ConnectDebugLog.  # noqa: E501

          # noqa: E501

        :return: The payload of this ConnectDebugLog.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ConnectDebugLog.

          # noqa: E501

        :param payload: The payload of this ConnectDebugLog.  # noqa: E501
        :type: str
        """

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectDebugLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectDebugLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectDebugLog):
            return True

        return self.to_dict() != other.to_dict()
