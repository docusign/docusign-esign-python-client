# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class AccountSignatureDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_stamp_properties': 'DateStampProperties',
        'disallow_user_resize_stamp': 'str',
        'external_id': 'str',
        'image_type': 'str',
        'is_default': 'str',
        'nrds_id': 'str',
        'nrds_last_name': 'str',
        'phonetic_name': 'str',
        'signature_font': 'str',
        'signature_groups': 'list[SignatureGroupDef]',
        'signature_id': 'str',
        'signature_initials': 'str',
        'signature_name': 'str',
        'signature_type': 'str',
        'signature_users': 'list[SignatureUserDef]',
        'stamp_format': 'str',
        'stamp_size_mm': 'str'
    }

    attribute_map = {
        'date_stamp_properties': 'dateStampProperties',
        'disallow_user_resize_stamp': 'disallowUserResizeStamp',
        'external_id': 'externalID',
        'image_type': 'imageType',
        'is_default': 'isDefault',
        'nrds_id': 'nrdsId',
        'nrds_last_name': 'nrdsLastName',
        'phonetic_name': 'phoneticName',
        'signature_font': 'signatureFont',
        'signature_groups': 'signatureGroups',
        'signature_id': 'signatureId',
        'signature_initials': 'signatureInitials',
        'signature_name': 'signatureName',
        'signature_type': 'signatureType',
        'signature_users': 'signatureUsers',
        'stamp_format': 'stampFormat',
        'stamp_size_mm': 'stampSizeMM'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AccountSignatureDefinition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_stamp_properties = None
        self._disallow_user_resize_stamp = None
        self._external_id = None
        self._image_type = None
        self._is_default = None
        self._nrds_id = None
        self._nrds_last_name = None
        self._phonetic_name = None
        self._signature_font = None
        self._signature_groups = None
        self._signature_id = None
        self._signature_initials = None
        self._signature_name = None
        self._signature_type = None
        self._signature_users = None
        self._stamp_format = None
        self._stamp_size_mm = None
        self.discriminator = None

        setattr(self, "_{}".format('date_stamp_properties'), kwargs.get('date_stamp_properties', None))
        setattr(self, "_{}".format('disallow_user_resize_stamp'), kwargs.get('disallow_user_resize_stamp', None))
        setattr(self, "_{}".format('external_id'), kwargs.get('external_id', None))
        setattr(self, "_{}".format('image_type'), kwargs.get('image_type', None))
        setattr(self, "_{}".format('is_default'), kwargs.get('is_default', None))
        setattr(self, "_{}".format('nrds_id'), kwargs.get('nrds_id', None))
        setattr(self, "_{}".format('nrds_last_name'), kwargs.get('nrds_last_name', None))
        setattr(self, "_{}".format('phonetic_name'), kwargs.get('phonetic_name', None))
        setattr(self, "_{}".format('signature_font'), kwargs.get('signature_font', None))
        setattr(self, "_{}".format('signature_groups'), kwargs.get('signature_groups', None))
        setattr(self, "_{}".format('signature_id'), kwargs.get('signature_id', None))
        setattr(self, "_{}".format('signature_initials'), kwargs.get('signature_initials', None))
        setattr(self, "_{}".format('signature_name'), kwargs.get('signature_name', None))
        setattr(self, "_{}".format('signature_type'), kwargs.get('signature_type', None))
        setattr(self, "_{}".format('signature_users'), kwargs.get('signature_users', None))
        setattr(self, "_{}".format('stamp_format'), kwargs.get('stamp_format', None))
        setattr(self, "_{}".format('stamp_size_mm'), kwargs.get('stamp_size_mm', None))

    @property
    def date_stamp_properties(self):
        """Gets the date_stamp_properties of this AccountSignatureDefinition.  # noqa: E501

        Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.  This property contains the following information about the central rectangle:  - `DateAreaX`: The X axis position of the top-left corner. - `DateAreaY`: The Y axis position of the top-left corner. - `DateAreaWidth`: The width of the rectangle. - `DateAreaHeight`: The height of the rectangle.  # noqa: E501

        :return: The date_stamp_properties of this AccountSignatureDefinition.  # noqa: E501
        :rtype: DateStampProperties
        """
        return self._date_stamp_properties

    @date_stamp_properties.setter
    def date_stamp_properties(self, date_stamp_properties):
        """Sets the date_stamp_properties of this AccountSignatureDefinition.

        Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.  This property contains the following information about the central rectangle:  - `DateAreaX`: The X axis position of the top-left corner. - `DateAreaY`: The Y axis position of the top-left corner. - `DateAreaWidth`: The width of the rectangle. - `DateAreaHeight`: The height of the rectangle.  # noqa: E501

        :param date_stamp_properties: The date_stamp_properties of this AccountSignatureDefinition.  # noqa: E501
        :type: DateStampProperties
        """

        self._date_stamp_properties = date_stamp_properties

    @property
    def disallow_user_resize_stamp(self):
        """Gets the disallow_user_resize_stamp of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The disallow_user_resize_stamp of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._disallow_user_resize_stamp

    @disallow_user_resize_stamp.setter
    def disallow_user_resize_stamp(self, disallow_user_resize_stamp):
        """Sets the disallow_user_resize_stamp of this AccountSignatureDefinition.

          # noqa: E501

        :param disallow_user_resize_stamp: The disallow_user_resize_stamp of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._disallow_user_resize_stamp = disallow_user_resize_stamp

    @property
    def external_id(self):
        """Gets the external_id of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The external_id of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AccountSignatureDefinition.

          # noqa: E501

        :param external_id: The external_id of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def image_type(self):
        """Gets the image_type of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The image_type of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this AccountSignatureDefinition.

          # noqa: E501

        :param image_type: The image_type of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._image_type = image_type

    @property
    def is_default(self):
        """Gets the is_default of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The is_default of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AccountSignatureDefinition.

          # noqa: E501

        :param is_default: The is_default of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._is_default = is_default

    @property
    def nrds_id(self):
        """Gets the nrds_id of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The nrds_id of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._nrds_id

    @nrds_id.setter
    def nrds_id(self, nrds_id):
        """Sets the nrds_id of this AccountSignatureDefinition.

          # noqa: E501

        :param nrds_id: The nrds_id of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._nrds_id = nrds_id

    @property
    def nrds_last_name(self):
        """Gets the nrds_last_name of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The nrds_last_name of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._nrds_last_name

    @nrds_last_name.setter
    def nrds_last_name(self, nrds_last_name):
        """Sets the nrds_last_name of this AccountSignatureDefinition.

          # noqa: E501

        :param nrds_last_name: The nrds_last_name of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._nrds_last_name = nrds_last_name

    @property
    def phonetic_name(self):
        """Gets the phonetic_name of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The phonetic_name of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._phonetic_name

    @phonetic_name.setter
    def phonetic_name(self, phonetic_name):
        """Sets the phonetic_name of this AccountSignatureDefinition.

          # noqa: E501

        :param phonetic_name: The phonetic_name of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._phonetic_name = phonetic_name

    @property
    def signature_font(self):
        """Gets the signature_font of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The signature_font of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._signature_font

    @signature_font.setter
    def signature_font(self, signature_font):
        """Sets the signature_font of this AccountSignatureDefinition.

          # noqa: E501

        :param signature_font: The signature_font of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._signature_font = signature_font

    @property
    def signature_groups(self):
        """Gets the signature_groups of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The signature_groups of this AccountSignatureDefinition.  # noqa: E501
        :rtype: list[SignatureGroupDef]
        """
        return self._signature_groups

    @signature_groups.setter
    def signature_groups(self, signature_groups):
        """Sets the signature_groups of this AccountSignatureDefinition.

          # noqa: E501

        :param signature_groups: The signature_groups of this AccountSignatureDefinition.  # noqa: E501
        :type: list[SignatureGroupDef]
        """

        self._signature_groups = signature_groups

    @property
    def signature_id(self):
        """Gets the signature_id of this AccountSignatureDefinition.  # noqa: E501

        Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as \"&\", \"<\", \">\") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.  # noqa: E501

        :return: The signature_id of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._signature_id

    @signature_id.setter
    def signature_id(self, signature_id):
        """Sets the signature_id of this AccountSignatureDefinition.

        Specifies the signature ID associated with the signature name. You can use the signature ID in the URI in place of the signature name, and the value stored in the `signatureName` property in the body is used. This allows the use of special characters (such as \"&\", \"<\", \">\") in a the signature name. Note that with each update to signatures, the returned signature ID might change, so the caller will need to trigger off the signature name to get the new signature ID.  # noqa: E501

        :param signature_id: The signature_id of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._signature_id = signature_id

    @property
    def signature_initials(self):
        """Gets the signature_initials of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The signature_initials of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._signature_initials

    @signature_initials.setter
    def signature_initials(self, signature_initials):
        """Sets the signature_initials of this AccountSignatureDefinition.

          # noqa: E501

        :param signature_initials: The signature_initials of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._signature_initials = signature_initials

    @property
    def signature_name(self):
        """Gets the signature_name of this AccountSignatureDefinition.  # noqa: E501

        Specifies the user signature name.  # noqa: E501

        :return: The signature_name of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._signature_name

    @signature_name.setter
    def signature_name(self, signature_name):
        """Sets the signature_name of this AccountSignatureDefinition.

        Specifies the user signature name.  # noqa: E501

        :param signature_name: The signature_name of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._signature_name = signature_name

    @property
    def signature_type(self):
        """Gets the signature_type of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The signature_type of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._signature_type

    @signature_type.setter
    def signature_type(self, signature_type):
        """Sets the signature_type of this AccountSignatureDefinition.

          # noqa: E501

        :param signature_type: The signature_type of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._signature_type = signature_type

    @property
    def signature_users(self):
        """Gets the signature_users of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The signature_users of this AccountSignatureDefinition.  # noqa: E501
        :rtype: list[SignatureUserDef]
        """
        return self._signature_users

    @signature_users.setter
    def signature_users(self, signature_users):
        """Sets the signature_users of this AccountSignatureDefinition.

          # noqa: E501

        :param signature_users: The signature_users of this AccountSignatureDefinition.  # noqa: E501
        :type: list[SignatureUserDef]
        """

        self._signature_users = signature_users

    @property
    def stamp_format(self):
        """Gets the stamp_format of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The stamp_format of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._stamp_format

    @stamp_format.setter
    def stamp_format(self, stamp_format):
        """Sets the stamp_format of this AccountSignatureDefinition.

          # noqa: E501

        :param stamp_format: The stamp_format of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._stamp_format = stamp_format

    @property
    def stamp_size_mm(self):
        """Gets the stamp_size_mm of this AccountSignatureDefinition.  # noqa: E501

          # noqa: E501

        :return: The stamp_size_mm of this AccountSignatureDefinition.  # noqa: E501
        :rtype: str
        """
        return self._stamp_size_mm

    @stamp_size_mm.setter
    def stamp_size_mm(self, stamp_size_mm):
        """Sets the stamp_size_mm of this AccountSignatureDefinition.

          # noqa: E501

        :param stamp_size_mm: The stamp_size_mm of this AccountSignatureDefinition.  # noqa: E501
        :type: str
        """

        self._stamp_size_mm = stamp_size_mm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSignatureDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSignatureDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountSignatureDefinition):
            return True

        return self.to_dict() != other.to_dict()
