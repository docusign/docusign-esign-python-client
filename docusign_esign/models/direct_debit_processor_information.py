# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DirectDebitProcessorInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_branch_code': 'str',
        'bank_check_digit': 'str',
        'bank_code': 'str',
        'bank_name': 'str',
        'bank_transfer_account_name': 'str',
        'bank_transfer_account_number': 'str',
        'bank_transfer_type': 'str',
        'country': 'str',
        'email': 'str',
        'first_name': 'str',
        'i_ban': 'str',
        'last_name': 'str'
    }

    attribute_map = {
        'bank_branch_code': 'bankBranchCode',
        'bank_check_digit': 'bankCheckDigit',
        'bank_code': 'bankCode',
        'bank_name': 'bankName',
        'bank_transfer_account_name': 'bankTransferAccountName',
        'bank_transfer_account_number': 'bankTransferAccountNumber',
        'bank_transfer_type': 'bankTransferType',
        'country': 'country',
        'email': 'email',
        'first_name': 'firstName',
        'i_ban': 'iBAN',
        'last_name': 'lastName'
    }

    def __init__(self, bank_branch_code=None, bank_check_digit=None, bank_code=None, bank_name=None, bank_transfer_account_name=None, bank_transfer_account_number=None, bank_transfer_type=None, country=None, email=None, first_name=None, i_ban=None, last_name=None):  # noqa: E501
        """DirectDebitProcessorInformation - a model defined in Swagger"""  # noqa: E501

        self._bank_branch_code = None
        self._bank_check_digit = None
        self._bank_code = None
        self._bank_name = None
        self._bank_transfer_account_name = None
        self._bank_transfer_account_number = None
        self._bank_transfer_type = None
        self._country = None
        self._email = None
        self._first_name = None
        self._i_ban = None
        self._last_name = None
        self.discriminator = None

        if bank_branch_code is not None:
            self.bank_branch_code = bank_branch_code
        if bank_check_digit is not None:
            self.bank_check_digit = bank_check_digit
        if bank_code is not None:
            self.bank_code = bank_code
        if bank_name is not None:
            self.bank_name = bank_name
        if bank_transfer_account_name is not None:
            self.bank_transfer_account_name = bank_transfer_account_name
        if bank_transfer_account_number is not None:
            self.bank_transfer_account_number = bank_transfer_account_number
        if bank_transfer_type is not None:
            self.bank_transfer_type = bank_transfer_type
        if country is not None:
            self.country = country
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if i_ban is not None:
            self.i_ban = i_ban
        if last_name is not None:
            self.last_name = last_name

    @property
    def bank_branch_code(self):
        """Gets the bank_branch_code of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The bank_branch_code of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_branch_code

    @bank_branch_code.setter
    def bank_branch_code(self, bank_branch_code):
        """Sets the bank_branch_code of this DirectDebitProcessorInformation.

          # noqa: E501

        :param bank_branch_code: The bank_branch_code of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._bank_branch_code = bank_branch_code

    @property
    def bank_check_digit(self):
        """Gets the bank_check_digit of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The bank_check_digit of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_check_digit

    @bank_check_digit.setter
    def bank_check_digit(self, bank_check_digit):
        """Sets the bank_check_digit of this DirectDebitProcessorInformation.

          # noqa: E501

        :param bank_check_digit: The bank_check_digit of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._bank_check_digit = bank_check_digit

    @property
    def bank_code(self):
        """Gets the bank_code of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The bank_code of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this DirectDebitProcessorInformation.

          # noqa: E501

        :param bank_code: The bank_code of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def bank_name(self):
        """Gets the bank_name of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The bank_name of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this DirectDebitProcessorInformation.

          # noqa: E501

        :param bank_name: The bank_name of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def bank_transfer_account_name(self):
        """Gets the bank_transfer_account_name of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The bank_transfer_account_name of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_account_name

    @bank_transfer_account_name.setter
    def bank_transfer_account_name(self, bank_transfer_account_name):
        """Sets the bank_transfer_account_name of this DirectDebitProcessorInformation.

          # noqa: E501

        :param bank_transfer_account_name: The bank_transfer_account_name of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._bank_transfer_account_name = bank_transfer_account_name

    @property
    def bank_transfer_account_number(self):
        """Gets the bank_transfer_account_number of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The bank_transfer_account_number of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_account_number

    @bank_transfer_account_number.setter
    def bank_transfer_account_number(self, bank_transfer_account_number):
        """Sets the bank_transfer_account_number of this DirectDebitProcessorInformation.

          # noqa: E501

        :param bank_transfer_account_number: The bank_transfer_account_number of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._bank_transfer_account_number = bank_transfer_account_number

    @property
    def bank_transfer_type(self):
        """Gets the bank_transfer_type of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The bank_transfer_type of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_type

    @bank_transfer_type.setter
    def bank_transfer_type(self, bank_transfer_type):
        """Sets the bank_transfer_type of this DirectDebitProcessorInformation.

          # noqa: E501

        :param bank_transfer_type: The bank_transfer_type of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._bank_transfer_type = bank_transfer_type

    @property
    def country(self):
        """Gets the country of this DirectDebitProcessorInformation.  # noqa: E501

        Specifies the country associated with the address.  # noqa: E501

        :return: The country of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DirectDebitProcessorInformation.

        Specifies the country associated with the address.  # noqa: E501

        :param country: The country of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The email of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DirectDebitProcessorInformation.

          # noqa: E501

        :param email: The email of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this DirectDebitProcessorInformation.  # noqa: E501

        The user's first name.  Maximum Length: 50 characters.  # noqa: E501

        :return: The first_name of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DirectDebitProcessorInformation.

        The user's first name.  Maximum Length: 50 characters.  # noqa: E501

        :param first_name: The first_name of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def i_ban(self):
        """Gets the i_ban of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The i_ban of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._i_ban

    @i_ban.setter
    def i_ban(self, i_ban):
        """Sets the i_ban of this DirectDebitProcessorInformation.

          # noqa: E501

        :param i_ban: The i_ban of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._i_ban = i_ban

    @property
    def last_name(self):
        """Gets the last_name of this DirectDebitProcessorInformation.  # noqa: E501

          # noqa: E501

        :return: The last_name of this DirectDebitProcessorInformation.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DirectDebitProcessorInformation.

          # noqa: E501

        :param last_name: The last_name of this DirectDebitProcessorInformation.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectDebitProcessorInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectDebitProcessorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
