# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class PaymentGatewayAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_custom_metadata': 'bool',
        'config': 'PaymentGatewayAccountSetting',
        'display_name': 'str',
        'is_enabled': 'str',
        'is_legacy': 'str',
        'last_modified': 'str',
        'payment_gateway': 'str',
        'payment_gateway_account_id': 'str',
        'payment_gateway_display_name': 'str',
        'pay_pal_legacy_settings': 'PayPalLegacySettings',
        'supported_currencies': 'list[str]',
        'supported_payment_methods': 'list[str]',
        'supported_payment_methods_with_options': 'list[PaymentMethodWithOptions]',
        'zero_decimal_currencies': 'list[str]'
    }

    attribute_map = {
        'allow_custom_metadata': 'allowCustomMetadata',
        'config': 'config',
        'display_name': 'displayName',
        'is_enabled': 'isEnabled',
        'is_legacy': 'isLegacy',
        'last_modified': 'lastModified',
        'payment_gateway': 'paymentGateway',
        'payment_gateway_account_id': 'paymentGatewayAccountId',
        'payment_gateway_display_name': 'paymentGatewayDisplayName',
        'pay_pal_legacy_settings': 'payPalLegacySettings',
        'supported_currencies': 'supportedCurrencies',
        'supported_payment_methods': 'supportedPaymentMethods',
        'supported_payment_methods_with_options': 'supportedPaymentMethodsWithOptions',
        'zero_decimal_currencies': 'zeroDecimalCurrencies'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """PaymentGatewayAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_custom_metadata = None
        self._config = None
        self._display_name = None
        self._is_enabled = None
        self._is_legacy = None
        self._last_modified = None
        self._payment_gateway = None
        self._payment_gateway_account_id = None
        self._payment_gateway_display_name = None
        self._pay_pal_legacy_settings = None
        self._supported_currencies = None
        self._supported_payment_methods = None
        self._supported_payment_methods_with_options = None
        self._zero_decimal_currencies = None
        self.discriminator = None

        setattr(self, "_{}".format('allow_custom_metadata'), kwargs.get('allow_custom_metadata', None))
        setattr(self, "_{}".format('config'), kwargs.get('config', None))
        setattr(self, "_{}".format('display_name'), kwargs.get('display_name', None))
        setattr(self, "_{}".format('is_enabled'), kwargs.get('is_enabled', None))
        setattr(self, "_{}".format('is_legacy'), kwargs.get('is_legacy', None))
        setattr(self, "_{}".format('last_modified'), kwargs.get('last_modified', None))
        setattr(self, "_{}".format('payment_gateway'), kwargs.get('payment_gateway', None))
        setattr(self, "_{}".format('payment_gateway_account_id'), kwargs.get('payment_gateway_account_id', None))
        setattr(self, "_{}".format('payment_gateway_display_name'), kwargs.get('payment_gateway_display_name', None))
        setattr(self, "_{}".format('pay_pal_legacy_settings'), kwargs.get('pay_pal_legacy_settings', None))
        setattr(self, "_{}".format('supported_currencies'), kwargs.get('supported_currencies', None))
        setattr(self, "_{}".format('supported_payment_methods'), kwargs.get('supported_payment_methods', None))
        setattr(self, "_{}".format('supported_payment_methods_with_options'), kwargs.get('supported_payment_methods_with_options', None))
        setattr(self, "_{}".format('zero_decimal_currencies'), kwargs.get('zero_decimal_currencies', None))

    @property
    def allow_custom_metadata(self):
        """Gets the allow_custom_metadata of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The allow_custom_metadata of this PaymentGatewayAccount.  # noqa: E501
        :rtype: bool
        """
        return self._allow_custom_metadata

    @allow_custom_metadata.setter
    def allow_custom_metadata(self, allow_custom_metadata):
        """Sets the allow_custom_metadata of this PaymentGatewayAccount.

          # noqa: E501

        :param allow_custom_metadata: The allow_custom_metadata of this PaymentGatewayAccount.  # noqa: E501
        :type: bool
        """

        self._allow_custom_metadata = allow_custom_metadata

    @property
    def config(self):
        """Gets the config of this PaymentGatewayAccount.  # noqa: E501

        This property contains metadata about the payment gateway account's configuration such as the API key, `userId`, and `merchantId` details.  # noqa: E501

        :return: The config of this PaymentGatewayAccount.  # noqa: E501
        :rtype: PaymentGatewayAccountSetting
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this PaymentGatewayAccount.

        This property contains metadata about the payment gateway account's configuration such as the API key, `userId`, and `merchantId` details.  # noqa: E501

        :param config: The config of this PaymentGatewayAccount.  # noqa: E501
        :type: PaymentGatewayAccountSetting
        """

        self._config = config

    @property
    def display_name(self):
        """Gets the display_name of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The display_name of this PaymentGatewayAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PaymentGatewayAccount.

          # noqa: E501

        :param display_name: The display_name of this PaymentGatewayAccount.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_enabled(self):
        """Gets the is_enabled of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The is_enabled of this PaymentGatewayAccount.  # noqa: E501
        :rtype: str
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this PaymentGatewayAccount.

          # noqa: E501

        :param is_enabled: The is_enabled of this PaymentGatewayAccount.  # noqa: E501
        :type: str
        """

        self._is_enabled = is_enabled

    @property
    def is_legacy(self):
        """Gets the is_legacy of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The is_legacy of this PaymentGatewayAccount.  # noqa: E501
        :rtype: str
        """
        return self._is_legacy

    @is_legacy.setter
    def is_legacy(self, is_legacy):
        """Sets the is_legacy of this PaymentGatewayAccount.

          # noqa: E501

        :param is_legacy: The is_legacy of this PaymentGatewayAccount.  # noqa: E501
        :type: str
        """

        self._is_legacy = is_legacy

    @property
    def last_modified(self):
        """Gets the last_modified of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The last_modified of this PaymentGatewayAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this PaymentGatewayAccount.

          # noqa: E501

        :param last_modified: The last_modified of this PaymentGatewayAccount.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The payment_gateway of this PaymentGatewayAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this PaymentGatewayAccount.

          # noqa: E501

        :param payment_gateway: The payment_gateway of this PaymentGatewayAccount.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_gateway_account_id(self):
        """Gets the payment_gateway_account_id of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The payment_gateway_account_id of this PaymentGatewayAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_account_id

    @payment_gateway_account_id.setter
    def payment_gateway_account_id(self, payment_gateway_account_id):
        """Sets the payment_gateway_account_id of this PaymentGatewayAccount.

          # noqa: E501

        :param payment_gateway_account_id: The payment_gateway_account_id of this PaymentGatewayAccount.  # noqa: E501
        :type: str
        """

        self._payment_gateway_account_id = payment_gateway_account_id

    @property
    def payment_gateway_display_name(self):
        """Gets the payment_gateway_display_name of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The payment_gateway_display_name of this PaymentGatewayAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_display_name

    @payment_gateway_display_name.setter
    def payment_gateway_display_name(self, payment_gateway_display_name):
        """Sets the payment_gateway_display_name of this PaymentGatewayAccount.

          # noqa: E501

        :param payment_gateway_display_name: The payment_gateway_display_name of this PaymentGatewayAccount.  # noqa: E501
        :type: str
        """

        self._payment_gateway_display_name = payment_gateway_display_name

    @property
    def pay_pal_legacy_settings(self):
        """Gets the pay_pal_legacy_settings of this PaymentGatewayAccount.  # noqa: E501

        Reserved for DocuSign.  # noqa: E501

        :return: The pay_pal_legacy_settings of this PaymentGatewayAccount.  # noqa: E501
        :rtype: PayPalLegacySettings
        """
        return self._pay_pal_legacy_settings

    @pay_pal_legacy_settings.setter
    def pay_pal_legacy_settings(self, pay_pal_legacy_settings):
        """Sets the pay_pal_legacy_settings of this PaymentGatewayAccount.

        Reserved for DocuSign.  # noqa: E501

        :param pay_pal_legacy_settings: The pay_pal_legacy_settings of this PaymentGatewayAccount.  # noqa: E501
        :type: PayPalLegacySettings
        """

        self._pay_pal_legacy_settings = pay_pal_legacy_settings

    @property
    def supported_currencies(self):
        """Gets the supported_currencies of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The supported_currencies of this PaymentGatewayAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_currencies

    @supported_currencies.setter
    def supported_currencies(self, supported_currencies):
        """Sets the supported_currencies of this PaymentGatewayAccount.

          # noqa: E501

        :param supported_currencies: The supported_currencies of this PaymentGatewayAccount.  # noqa: E501
        :type: list[str]
        """

        self._supported_currencies = supported_currencies

    @property
    def supported_payment_methods(self):
        """Gets the supported_payment_methods of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The supported_payment_methods of this PaymentGatewayAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_payment_methods

    @supported_payment_methods.setter
    def supported_payment_methods(self, supported_payment_methods):
        """Sets the supported_payment_methods of this PaymentGatewayAccount.

          # noqa: E501

        :param supported_payment_methods: The supported_payment_methods of this PaymentGatewayAccount.  # noqa: E501
        :type: list[str]
        """

        self._supported_payment_methods = supported_payment_methods

    @property
    def supported_payment_methods_with_options(self):
        """Gets the supported_payment_methods_with_options of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The supported_payment_methods_with_options of this PaymentGatewayAccount.  # noqa: E501
        :rtype: list[PaymentMethodWithOptions]
        """
        return self._supported_payment_methods_with_options

    @supported_payment_methods_with_options.setter
    def supported_payment_methods_with_options(self, supported_payment_methods_with_options):
        """Sets the supported_payment_methods_with_options of this PaymentGatewayAccount.

          # noqa: E501

        :param supported_payment_methods_with_options: The supported_payment_methods_with_options of this PaymentGatewayAccount.  # noqa: E501
        :type: list[PaymentMethodWithOptions]
        """

        self._supported_payment_methods_with_options = supported_payment_methods_with_options

    @property
    def zero_decimal_currencies(self):
        """Gets the zero_decimal_currencies of this PaymentGatewayAccount.  # noqa: E501

          # noqa: E501

        :return: The zero_decimal_currencies of this PaymentGatewayAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._zero_decimal_currencies

    @zero_decimal_currencies.setter
    def zero_decimal_currencies(self, zero_decimal_currencies):
        """Sets the zero_decimal_currencies of this PaymentGatewayAccount.

          # noqa: E501

        :param zero_decimal_currencies: The zero_decimal_currencies of this PaymentGatewayAccount.  # noqa: E501
        :type: list[str]
        """

        self._zero_decimal_currencies = zero_decimal_currencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentGatewayAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentGatewayAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentGatewayAccount):
            return True

        return self.to_dict() != other.to_dict()
