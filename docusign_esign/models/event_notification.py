# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'envelope_events': 'list[EnvelopeEvent]',
        'event_data': 'ConnectEventData',
        'include_certificate_of_completion': 'str',
        'include_certificate_with_soap': 'str',
        'include_document_fields': 'str',
        'include_documents': 'str',
        'include_envelope_void_reason': 'str',
        'include_hmac': 'str',
        'include_sender_account_as_custom_field': 'str',
        'include_time_zone': 'str',
        'logging_enabled': 'str',
        'recipient_events': 'list[RecipientEvent]',
        'require_acknowledgment': 'str',
        'sign_message_with_x509_cert': 'str',
        'soap_name_space': 'str',
        'url': 'str',
        'use_soap_interface': 'str'
    }

    attribute_map = {
        'envelope_events': 'envelopeEvents',
        'event_data': 'eventData',
        'include_certificate_of_completion': 'includeCertificateOfCompletion',
        'include_certificate_with_soap': 'includeCertificateWithSoap',
        'include_document_fields': 'includeDocumentFields',
        'include_documents': 'includeDocuments',
        'include_envelope_void_reason': 'includeEnvelopeVoidReason',
        'include_hmac': 'includeHMAC',
        'include_sender_account_as_custom_field': 'includeSenderAccountAsCustomField',
        'include_time_zone': 'includeTimeZone',
        'logging_enabled': 'loggingEnabled',
        'recipient_events': 'recipientEvents',
        'require_acknowledgment': 'requireAcknowledgment',
        'sign_message_with_x509_cert': 'signMessageWithX509Cert',
        'soap_name_space': 'soapNameSpace',
        'url': 'url',
        'use_soap_interface': 'useSoapInterface'
    }

    def __init__(self, envelope_events=None, event_data=None, include_certificate_of_completion=None, include_certificate_with_soap=None, include_document_fields=None, include_documents=None, include_envelope_void_reason=None, include_hmac=None, include_sender_account_as_custom_field=None, include_time_zone=None, logging_enabled=None, recipient_events=None, require_acknowledgment=None, sign_message_with_x509_cert=None, soap_name_space=None, url=None, use_soap_interface=None):  # noqa: E501
        """EventNotification - a model defined in Swagger"""  # noqa: E501

        self._envelope_events = None
        self._event_data = None
        self._include_certificate_of_completion = None
        self._include_certificate_with_soap = None
        self._include_document_fields = None
        self._include_documents = None
        self._include_envelope_void_reason = None
        self._include_hmac = None
        self._include_sender_account_as_custom_field = None
        self._include_time_zone = None
        self._logging_enabled = None
        self._recipient_events = None
        self._require_acknowledgment = None
        self._sign_message_with_x509_cert = None
        self._soap_name_space = None
        self._url = None
        self._use_soap_interface = None
        self.discriminator = None

        if envelope_events is not None:
            self.envelope_events = envelope_events
        if event_data is not None:
            self.event_data = event_data
        if include_certificate_of_completion is not None:
            self.include_certificate_of_completion = include_certificate_of_completion
        if include_certificate_with_soap is not None:
            self.include_certificate_with_soap = include_certificate_with_soap
        if include_document_fields is not None:
            self.include_document_fields = include_document_fields
        if include_documents is not None:
            self.include_documents = include_documents
        if include_envelope_void_reason is not None:
            self.include_envelope_void_reason = include_envelope_void_reason
        if include_hmac is not None:
            self.include_hmac = include_hmac
        if include_sender_account_as_custom_field is not None:
            self.include_sender_account_as_custom_field = include_sender_account_as_custom_field
        if include_time_zone is not None:
            self.include_time_zone = include_time_zone
        if logging_enabled is not None:
            self.logging_enabled = logging_enabled
        if recipient_events is not None:
            self.recipient_events = recipient_events
        if require_acknowledgment is not None:
            self.require_acknowledgment = require_acknowledgment
        if sign_message_with_x509_cert is not None:
            self.sign_message_with_x509_cert = sign_message_with_x509_cert
        if soap_name_space is not None:
            self.soap_name_space = soap_name_space
        if url is not None:
            self.url = url
        if use_soap_interface is not None:
            self.use_soap_interface = use_soap_interface

    @property
    def envelope_events(self):
        """Gets the envelope_events of this EventNotification.  # noqa: E501

        A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property.   To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.  # noqa: E501

        :return: The envelope_events of this EventNotification.  # noqa: E501
        :rtype: list[EnvelopeEvent]
        """
        return self._envelope_events

    @envelope_events.setter
    def envelope_events(self, envelope_events):
        """Sets the envelope_events of this EventNotification.

        A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the `url` property.   To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.  # noqa: E501

        :param envelope_events: The envelope_events of this EventNotification.  # noqa: E501
        :type: list[EnvelopeEvent]
        """

        self._envelope_events = envelope_events

    @property
    def event_data(self):
        """Gets the event_data of this EventNotification.  # noqa: E501


        :return: The event_data of this EventNotification.  # noqa: E501
        :rtype: ConnectEventData
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this EventNotification.


        :param event_data: The event_data of this EventNotification.  # noqa: E501
        :type: ConnectEventData
        """

        self._event_data = event_data

    @property
    def include_certificate_of_completion(self):
        """Gets the include_certificate_of_completion of this EventNotification.  # noqa: E501

        When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.   # noqa: E501

        :return: The include_certificate_of_completion of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_certificate_of_completion

    @include_certificate_of_completion.setter
    def include_certificate_of_completion(self, include_certificate_of_completion):
        """Sets the include_certificate_of_completion of this EventNotification.

        When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes.   # noqa: E501

        :param include_certificate_of_completion: The include_certificate_of_completion of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_certificate_of_completion = include_certificate_of_completion

    @property
    def include_certificate_with_soap(self):
        """Gets the include_certificate_with_soap of this EventNotification.  # noqa: E501

        When set to **true**, this tells the Connect service to send the DocuSign signedby certificate as part of the outgoing SOAP xml. This appears in the XML as wsse:BinarySecurityToken.  # noqa: E501

        :return: The include_certificate_with_soap of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_certificate_with_soap

    @include_certificate_with_soap.setter
    def include_certificate_with_soap(self, include_certificate_with_soap):
        """Sets the include_certificate_with_soap of this EventNotification.

        When set to **true**, this tells the Connect service to send the DocuSign signedby certificate as part of the outgoing SOAP xml. This appears in the XML as wsse:BinarySecurityToken.  # noqa: E501

        :param include_certificate_with_soap: The include_certificate_with_soap of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_certificate_with_soap = include_certificate_with_soap

    @property
    def include_document_fields(self):
        """Gets the include_document_fields of this EventNotification.  # noqa: E501

        When set to **true**, the Document Fields associated with envelope documents are included in the data. Document Fields are optional custom name-value pairs added to documents using the API.   # noqa: E501

        :return: The include_document_fields of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_document_fields

    @include_document_fields.setter
    def include_document_fields(self, include_document_fields):
        """Sets the include_document_fields of this EventNotification.

        When set to **true**, the Document Fields associated with envelope documents are included in the data. Document Fields are optional custom name-value pairs added to documents using the API.   # noqa: E501

        :param include_document_fields: The include_document_fields of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_document_fields = include_document_fields

    @property
    def include_documents(self):
        """Gets the include_documents of this EventNotification.  # noqa: E501

        When set to **true**, the PDF documents are included in the message along with the updated XML.   # noqa: E501

        :return: The include_documents of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_documents

    @include_documents.setter
    def include_documents(self, include_documents):
        """Sets the include_documents of this EventNotification.

        When set to **true**, the PDF documents are included in the message along with the updated XML.   # noqa: E501

        :param include_documents: The include_documents of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_documents = include_documents

    @property
    def include_envelope_void_reason(self):
        """Gets the include_envelope_void_reason of this EventNotification.  # noqa: E501

        When set to **true**, this tells the Connect Service to include the void reason, as entered by the person that voided the envelope, in the message.   # noqa: E501

        :return: The include_envelope_void_reason of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_envelope_void_reason

    @include_envelope_void_reason.setter
    def include_envelope_void_reason(self, include_envelope_void_reason):
        """Sets the include_envelope_void_reason of this EventNotification.

        When set to **true**, this tells the Connect Service to include the void reason, as entered by the person that voided the envelope, in the message.   # noqa: E501

        :param include_envelope_void_reason: The include_envelope_void_reason of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_envelope_void_reason = include_envelope_void_reason

    @property
    def include_hmac(self):
        """Gets the include_hmac of this EventNotification.  # noqa: E501

          # noqa: E501

        :return: The include_hmac of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_hmac

    @include_hmac.setter
    def include_hmac(self, include_hmac):
        """Sets the include_hmac of this EventNotification.

          # noqa: E501

        :param include_hmac: The include_hmac of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_hmac = include_hmac

    @property
    def include_sender_account_as_custom_field(self):
        """Gets the include_sender_account_as_custom_field of this EventNotification.  # noqa: E501

        When set to **true**, the sender account ID is included as a envelope custom field in the data.   # noqa: E501

        :return: The include_sender_account_as_custom_field of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_sender_account_as_custom_field

    @include_sender_account_as_custom_field.setter
    def include_sender_account_as_custom_field(self, include_sender_account_as_custom_field):
        """Sets the include_sender_account_as_custom_field of this EventNotification.

        When set to **true**, the sender account ID is included as a envelope custom field in the data.   # noqa: E501

        :param include_sender_account_as_custom_field: The include_sender_account_as_custom_field of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_sender_account_as_custom_field = include_sender_account_as_custom_field

    @property
    def include_time_zone(self):
        """Gets the include_time_zone of this EventNotification.  # noqa: E501

        When set to **true**, the envelope time zone information is included in the message.   # noqa: E501

        :return: The include_time_zone of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._include_time_zone

    @include_time_zone.setter
    def include_time_zone(self, include_time_zone):
        """Sets the include_time_zone of this EventNotification.

        When set to **true**, the envelope time zone information is included in the message.   # noqa: E501

        :param include_time_zone: The include_time_zone of this EventNotification.  # noqa: E501
        :type: str
        """

        self._include_time_zone = include_time_zone

    @property
    def logging_enabled(self):
        """Gets the logging_enabled of this EventNotification.  # noqa: E501

        When set to **true**, logging is turned on for envelope events on the Web Console Connect page.   # noqa: E501

        :return: The logging_enabled of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._logging_enabled

    @logging_enabled.setter
    def logging_enabled(self, logging_enabled):
        """Sets the logging_enabled of this EventNotification.

        When set to **true**, logging is turned on for envelope events on the Web Console Connect page.   # noqa: E501

        :param logging_enabled: The logging_enabled of this EventNotification.  # noqa: E501
        :type: str
        """

        self._logging_enabled = logging_enabled

    @property
    def recipient_events(self):
        """Gets the recipient_events of this EventNotification.  # noqa: E501

        A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the url property.  To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.  # noqa: E501

        :return: The recipient_events of this EventNotification.  # noqa: E501
        :rtype: list[RecipientEvent]
        """
        return self._recipient_events

    @recipient_events.setter
    def recipient_events(self, recipient_events):
        """Sets the recipient_events of this EventNotification.

        A list of recipient event statuses that will trigger Connect to send updates to   the endpoint specified in the url property.  To receive notifications, you must include either an `envelopeEvents` node or a `recipientEvents` node. You do not need to specify both.  # noqa: E501

        :param recipient_events: The recipient_events of this EventNotification.  # noqa: E501
        :type: list[RecipientEvent]
        """

        self._recipient_events = recipient_events

    @property
    def require_acknowledgment(self):
        """Gets the require_acknowledgment of this EventNotification.  # noqa: E501

        When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures.   # noqa: E501

        :return: The require_acknowledgment of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._require_acknowledgment

    @require_acknowledgment.setter
    def require_acknowledgment(self, require_acknowledgment):
        """Sets the require_acknowledgment of this EventNotification.

        When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures.   # noqa: E501

        :param require_acknowledgment: The require_acknowledgment of this EventNotification.  # noqa: E501
        :type: str
        """

        self._require_acknowledgment = require_acknowledgment

    @property
    def sign_message_with_x509_cert(self):
        """Gets the sign_message_with_x509_cert of this EventNotification.  # noqa: E501

        When set to **true**, messages are signed with an X509 certificate. This provides support for 2-way SSL in the envelope.   # noqa: E501

        :return: The sign_message_with_x509_cert of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._sign_message_with_x509_cert

    @sign_message_with_x509_cert.setter
    def sign_message_with_x509_cert(self, sign_message_with_x509_cert):
        """Sets the sign_message_with_x509_cert of this EventNotification.

        When set to **true**, messages are signed with an X509 certificate. This provides support for 2-way SSL in the envelope.   # noqa: E501

        :param sign_message_with_x509_cert: The sign_message_with_x509_cert of this EventNotification.  # noqa: E501
        :type: str
        """

        self._sign_message_with_x509_cert = sign_message_with_x509_cert

    @property
    def soap_name_space(self):
        """Gets the soap_name_space of this EventNotification.  # noqa: E501

        This lists the namespace in the SOAP listener provided.  # noqa: E501

        :return: The soap_name_space of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._soap_name_space

    @soap_name_space.setter
    def soap_name_space(self, soap_name_space):
        """Sets the soap_name_space of this EventNotification.

        This lists the namespace in the SOAP listener provided.  # noqa: E501

        :param soap_name_space: The soap_name_space of this EventNotification.  # noqa: E501
        :type: str
        """

        self._soap_name_space = soap_name_space

    @property
    def url(self):
        """Gets the url of this EventNotification.  # noqa: E501

        Specifies the endpoint to which envelope updates are sent. Udpates are sent as XML unless `useSoapInterface` property is set to **true**.  # noqa: E501

        :return: The url of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventNotification.

        Specifies the endpoint to which envelope updates are sent. Udpates are sent as XML unless `useSoapInterface` property is set to **true**.  # noqa: E501

        :param url: The url of this EventNotification.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def use_soap_interface(self):
        """Gets the use_soap_interface of this EventNotification.  # noqa: E501

        When set to **true**, this tells the Connect service that the user's endpoint has implemented a SOAP interface.   # noqa: E501

        :return: The use_soap_interface of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._use_soap_interface

    @use_soap_interface.setter
    def use_soap_interface(self, use_soap_interface):
        """Sets the use_soap_interface of this EventNotification.

        When set to **true**, this tells the Connect service that the user's endpoint has implemented a SOAP interface.   # noqa: E501

        :param use_soap_interface: The use_soap_interface of this EventNotification.  # noqa: E501
        :type: str
        """

        self._use_soap_interface = use_soap_interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
